// Generated by jextract

package tech.bitey.golpanama.xutil;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class XClassHint {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("res_name"),
        Constants$root.C_POINTER$LAYOUT.withName("res_class")
    );
    public static MemoryLayout $LAYOUT() {
        return XClassHint.$struct$LAYOUT;
    }
    static final VarHandle res_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("res_name"));
    public static VarHandle res_name$VH() {
        return XClassHint.res_name$VH;
    }
    public static MemoryAddress res_name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)XClassHint.res_name$VH.get(seg);
    }
    public static void res_name$set( MemorySegment seg, MemoryAddress x) {
        XClassHint.res_name$VH.set(seg, x);
    }
    public static MemoryAddress res_name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)XClassHint.res_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void res_name$set(MemorySegment seg, long index, MemoryAddress x) {
        XClassHint.res_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle res_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("res_class"));
    public static VarHandle res_class$VH() {
        return XClassHint.res_class$VH;
    }
    public static MemoryAddress res_class$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)XClassHint.res_class$VH.get(seg);
    }
    public static void res_class$set( MemorySegment seg, MemoryAddress x) {
        XClassHint.res_class$VH.set(seg, x);
    }
    public static MemoryAddress res_class$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)XClassHint.res_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void res_class$set(MemorySegment seg, long index, MemoryAddress x) {
        XClassHint.res_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


