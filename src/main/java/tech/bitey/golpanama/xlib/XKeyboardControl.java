// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int key_click_percent;
 *     int bell_percent;
 *     int bell_pitch;
 *     int bell_duration;
 *     int led;
 *     int led_mode;
 *     int key;
 *     int auto_repeat_mode;
 * }
 * }
 */
public class XKeyboardControl {

    XKeyboardControl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Xlib_h.C_INT.withName("key_click_percent"),
        Xlib_h.C_INT.withName("bell_percent"),
        Xlib_h.C_INT.withName("bell_pitch"),
        Xlib_h.C_INT.withName("bell_duration"),
        Xlib_h.C_INT.withName("led"),
        Xlib_h.C_INT.withName("led_mode"),
        Xlib_h.C_INT.withName("key"),
        Xlib_h.C_INT.withName("auto_repeat_mode")
    ).withName("$anon$444:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt key_click_percent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("key_click_percent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int key_click_percent
     * }
     */
    public static final OfInt key_click_percent$layout() {
        return key_click_percent$LAYOUT;
    }

    private static final long key_click_percent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int key_click_percent
     * }
     */
    public static final long key_click_percent$offset() {
        return key_click_percent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int key_click_percent
     * }
     */
    public static int key_click_percent(MemorySegment struct) {
        return struct.get(key_click_percent$LAYOUT, key_click_percent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int key_click_percent
     * }
     */
    public static void key_click_percent(MemorySegment struct, int fieldValue) {
        struct.set(key_click_percent$LAYOUT, key_click_percent$OFFSET, fieldValue);
    }

    private static final OfInt bell_percent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bell_percent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bell_percent
     * }
     */
    public static final OfInt bell_percent$layout() {
        return bell_percent$LAYOUT;
    }

    private static final long bell_percent$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bell_percent
     * }
     */
    public static final long bell_percent$offset() {
        return bell_percent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bell_percent
     * }
     */
    public static int bell_percent(MemorySegment struct) {
        return struct.get(bell_percent$LAYOUT, bell_percent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bell_percent
     * }
     */
    public static void bell_percent(MemorySegment struct, int fieldValue) {
        struct.set(bell_percent$LAYOUT, bell_percent$OFFSET, fieldValue);
    }

    private static final OfInt bell_pitch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bell_pitch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bell_pitch
     * }
     */
    public static final OfInt bell_pitch$layout() {
        return bell_pitch$LAYOUT;
    }

    private static final long bell_pitch$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bell_pitch
     * }
     */
    public static final long bell_pitch$offset() {
        return bell_pitch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bell_pitch
     * }
     */
    public static int bell_pitch(MemorySegment struct) {
        return struct.get(bell_pitch$LAYOUT, bell_pitch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bell_pitch
     * }
     */
    public static void bell_pitch(MemorySegment struct, int fieldValue) {
        struct.set(bell_pitch$LAYOUT, bell_pitch$OFFSET, fieldValue);
    }

    private static final OfInt bell_duration$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bell_duration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bell_duration
     * }
     */
    public static final OfInt bell_duration$layout() {
        return bell_duration$LAYOUT;
    }

    private static final long bell_duration$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bell_duration
     * }
     */
    public static final long bell_duration$offset() {
        return bell_duration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bell_duration
     * }
     */
    public static int bell_duration(MemorySegment struct) {
        return struct.get(bell_duration$LAYOUT, bell_duration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bell_duration
     * }
     */
    public static void bell_duration(MemorySegment struct, int fieldValue) {
        struct.set(bell_duration$LAYOUT, bell_duration$OFFSET, fieldValue);
    }

    private static final OfInt led$LAYOUT = (OfInt)$LAYOUT.select(groupElement("led"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int led
     * }
     */
    public static final OfInt led$layout() {
        return led$LAYOUT;
    }

    private static final long led$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int led
     * }
     */
    public static final long led$offset() {
        return led$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int led
     * }
     */
    public static int led(MemorySegment struct) {
        return struct.get(led$LAYOUT, led$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int led
     * }
     */
    public static void led(MemorySegment struct, int fieldValue) {
        struct.set(led$LAYOUT, led$OFFSET, fieldValue);
    }

    private static final OfInt led_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("led_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int led_mode
     * }
     */
    public static final OfInt led_mode$layout() {
        return led_mode$LAYOUT;
    }

    private static final long led_mode$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int led_mode
     * }
     */
    public static final long led_mode$offset() {
        return led_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int led_mode
     * }
     */
    public static int led_mode(MemorySegment struct) {
        return struct.get(led_mode$LAYOUT, led_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int led_mode
     * }
     */
    public static void led_mode(MemorySegment struct, int fieldValue) {
        struct.set(led_mode$LAYOUT, led_mode$OFFSET, fieldValue);
    }

    private static final OfInt key$LAYOUT = (OfInt)$LAYOUT.select(groupElement("key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int key
     * }
     */
    public static final OfInt key$layout() {
        return key$LAYOUT;
    }

    private static final long key$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int key
     * }
     */
    public static final long key$offset() {
        return key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int key
     * }
     */
    public static int key(MemorySegment struct) {
        return struct.get(key$LAYOUT, key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int key
     * }
     */
    public static void key(MemorySegment struct, int fieldValue) {
        struct.set(key$LAYOUT, key$OFFSET, fieldValue);
    }

    private static final OfInt auto_repeat_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("auto_repeat_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int auto_repeat_mode
     * }
     */
    public static final OfInt auto_repeat_mode$layout() {
        return auto_repeat_mode$LAYOUT;
    }

    private static final long auto_repeat_mode$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int auto_repeat_mode
     * }
     */
    public static final long auto_repeat_mode$offset() {
        return auto_repeat_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int auto_repeat_mode
     * }
     */
    public static int auto_repeat_mode(MemorySegment struct) {
        return struct.get(auto_repeat_mode$LAYOUT, auto_repeat_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int auto_repeat_mode
     * }
     */
    public static void auto_repeat_mode(MemorySegment struct, int fieldValue) {
        struct.set(auto_repeat_mode$LAYOUT, auto_repeat_mode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

