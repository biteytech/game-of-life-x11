// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     int function;
 *     unsigned long plane_mask;
 *     unsigned long foreground;
 *     unsigned long background;
 *     int line_width;
 *     int line_style;
 *     int cap_style;
 *     int join_style;
 *     int fill_style;
 *     int fill_rule;
 *     int arc_mode;
 *     Pixmap tile;
 *     Pixmap stipple;
 *     int ts_x_origin;
 *     int ts_y_origin;
 *     Font font;
 *     int subwindow_mode;
 *     int graphics_exposures;
 *     int clip_x_origin;
 *     int clip_y_origin;
 *     Pixmap clip_mask;
 *     int dash_offset;
 *     char dashes;
 * };
 * }
 */
public class XGCValues {

    public static MemoryLayout $LAYOUT() {
        return constants$13.const$2;
    }
    public static VarHandle function$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int function;
     * }
     */
    public static int function$get(MemorySegment seg) {
        return (int)constants$13.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int function;
     * }
     */
    public static void function$set(MemorySegment seg, int x) {
        constants$13.const$3.set(seg, x);
    }
    public static int function$get(MemorySegment seg, long index) {
        return (int)constants$13.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void function$set(MemorySegment seg, long index, int x) {
        constants$13.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle plane_mask$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long plane_mask;
     * }
     */
    public static long plane_mask$get(MemorySegment seg) {
        return (long)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long plane_mask;
     * }
     */
    public static void plane_mask$set(MemorySegment seg, long x) {
        constants$13.const$4.set(seg, x);
    }
    public static long plane_mask$get(MemorySegment seg, long index) {
        return (long)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void plane_mask$set(MemorySegment seg, long index, long x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle foreground$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long foreground;
     * }
     */
    public static long foreground$get(MemorySegment seg) {
        return (long)constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long foreground;
     * }
     */
    public static void foreground$set(MemorySegment seg, long x) {
        constants$13.const$5.set(seg, x);
    }
    public static long foreground$get(MemorySegment seg, long index) {
        return (long)constants$13.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void foreground$set(MemorySegment seg, long index, long x) {
        constants$13.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle background$VH() {
        return constants$14.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long background;
     * }
     */
    public static long background$get(MemorySegment seg) {
        return (long)constants$14.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long background;
     * }
     */
    public static void background$set(MemorySegment seg, long x) {
        constants$14.const$0.set(seg, x);
    }
    public static long background$get(MemorySegment seg, long index) {
        return (long)constants$14.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void background$set(MemorySegment seg, long index, long x) {
        constants$14.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle line_width$VH() {
        return constants$14.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int line_width;
     * }
     */
    public static int line_width$get(MemorySegment seg) {
        return (int)constants$14.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int line_width;
     * }
     */
    public static void line_width$set(MemorySegment seg, int x) {
        constants$14.const$1.set(seg, x);
    }
    public static int line_width$get(MemorySegment seg, long index) {
        return (int)constants$14.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void line_width$set(MemorySegment seg, long index, int x) {
        constants$14.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle line_style$VH() {
        return constants$14.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int line_style;
     * }
     */
    public static int line_style$get(MemorySegment seg) {
        return (int)constants$14.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int line_style;
     * }
     */
    public static void line_style$set(MemorySegment seg, int x) {
        constants$14.const$2.set(seg, x);
    }
    public static int line_style$get(MemorySegment seg, long index) {
        return (int)constants$14.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void line_style$set(MemorySegment seg, long index, int x) {
        constants$14.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cap_style$VH() {
        return constants$14.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cap_style;
     * }
     */
    public static int cap_style$get(MemorySegment seg) {
        return (int)constants$14.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cap_style;
     * }
     */
    public static void cap_style$set(MemorySegment seg, int x) {
        constants$14.const$3.set(seg, x);
    }
    public static int cap_style$get(MemorySegment seg, long index) {
        return (int)constants$14.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cap_style$set(MemorySegment seg, long index, int x) {
        constants$14.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle join_style$VH() {
        return constants$14.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int join_style;
     * }
     */
    public static int join_style$get(MemorySegment seg) {
        return (int)constants$14.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int join_style;
     * }
     */
    public static void join_style$set(MemorySegment seg, int x) {
        constants$14.const$4.set(seg, x);
    }
    public static int join_style$get(MemorySegment seg, long index) {
        return (int)constants$14.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void join_style$set(MemorySegment seg, long index, int x) {
        constants$14.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fill_style$VH() {
        return constants$14.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fill_style;
     * }
     */
    public static int fill_style$get(MemorySegment seg) {
        return (int)constants$14.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fill_style;
     * }
     */
    public static void fill_style$set(MemorySegment seg, int x) {
        constants$14.const$5.set(seg, x);
    }
    public static int fill_style$get(MemorySegment seg, long index) {
        return (int)constants$14.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void fill_style$set(MemorySegment seg, long index, int x) {
        constants$14.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fill_rule$VH() {
        return constants$15.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fill_rule;
     * }
     */
    public static int fill_rule$get(MemorySegment seg) {
        return (int)constants$15.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fill_rule;
     * }
     */
    public static void fill_rule$set(MemorySegment seg, int x) {
        constants$15.const$0.set(seg, x);
    }
    public static int fill_rule$get(MemorySegment seg, long index) {
        return (int)constants$15.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void fill_rule$set(MemorySegment seg, long index, int x) {
        constants$15.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle arc_mode$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int arc_mode;
     * }
     */
    public static int arc_mode$get(MemorySegment seg) {
        return (int)constants$15.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int arc_mode;
     * }
     */
    public static void arc_mode$set(MemorySegment seg, int x) {
        constants$15.const$1.set(seg, x);
    }
    public static int arc_mode$get(MemorySegment seg, long index) {
        return (int)constants$15.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void arc_mode$set(MemorySegment seg, long index, int x) {
        constants$15.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tile$VH() {
        return constants$15.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Pixmap tile;
     * }
     */
    public static long tile$get(MemorySegment seg) {
        return (long)constants$15.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Pixmap tile;
     * }
     */
    public static void tile$set(MemorySegment seg, long x) {
        constants$15.const$2.set(seg, x);
    }
    public static long tile$get(MemorySegment seg, long index) {
        return (long)constants$15.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tile$set(MemorySegment seg, long index, long x) {
        constants$15.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stipple$VH() {
        return constants$15.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Pixmap stipple;
     * }
     */
    public static long stipple$get(MemorySegment seg) {
        return (long)constants$15.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Pixmap stipple;
     * }
     */
    public static void stipple$set(MemorySegment seg, long x) {
        constants$15.const$3.set(seg, x);
    }
    public static long stipple$get(MemorySegment seg, long index) {
        return (long)constants$15.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void stipple$set(MemorySegment seg, long index, long x) {
        constants$15.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ts_x_origin$VH() {
        return constants$15.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ts_x_origin;
     * }
     */
    public static int ts_x_origin$get(MemorySegment seg) {
        return (int)constants$15.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ts_x_origin;
     * }
     */
    public static void ts_x_origin$set(MemorySegment seg, int x) {
        constants$15.const$4.set(seg, x);
    }
    public static int ts_x_origin$get(MemorySegment seg, long index) {
        return (int)constants$15.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_x_origin$set(MemorySegment seg, long index, int x) {
        constants$15.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ts_y_origin$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ts_y_origin;
     * }
     */
    public static int ts_y_origin$get(MemorySegment seg) {
        return (int)constants$15.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ts_y_origin;
     * }
     */
    public static void ts_y_origin$set(MemorySegment seg, int x) {
        constants$15.const$5.set(seg, x);
    }
    public static int ts_y_origin$get(MemorySegment seg, long index) {
        return (int)constants$15.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_y_origin$set(MemorySegment seg, long index, int x) {
        constants$15.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle font$VH() {
        return constants$16.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Font font;
     * }
     */
    public static long font$get(MemorySegment seg) {
        return (long)constants$16.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Font font;
     * }
     */
    public static void font$set(MemorySegment seg, long x) {
        constants$16.const$0.set(seg, x);
    }
    public static long font$get(MemorySegment seg, long index) {
        return (long)constants$16.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void font$set(MemorySegment seg, long index, long x) {
        constants$16.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subwindow_mode$VH() {
        return constants$16.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int subwindow_mode;
     * }
     */
    public static int subwindow_mode$get(MemorySegment seg) {
        return (int)constants$16.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int subwindow_mode;
     * }
     */
    public static void subwindow_mode$set(MemorySegment seg, int x) {
        constants$16.const$1.set(seg, x);
    }
    public static int subwindow_mode$get(MemorySegment seg, long index) {
        return (int)constants$16.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void subwindow_mode$set(MemorySegment seg, long index, int x) {
        constants$16.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle graphics_exposures$VH() {
        return constants$16.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int graphics_exposures;
     * }
     */
    public static int graphics_exposures$get(MemorySegment seg) {
        return (int)constants$16.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int graphics_exposures;
     * }
     */
    public static void graphics_exposures$set(MemorySegment seg, int x) {
        constants$16.const$2.set(seg, x);
    }
    public static int graphics_exposures$get(MemorySegment seg, long index) {
        return (int)constants$16.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void graphics_exposures$set(MemorySegment seg, long index, int x) {
        constants$16.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clip_x_origin$VH() {
        return constants$16.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int clip_x_origin;
     * }
     */
    public static int clip_x_origin$get(MemorySegment seg) {
        return (int)constants$16.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int clip_x_origin;
     * }
     */
    public static void clip_x_origin$set(MemorySegment seg, int x) {
        constants$16.const$3.set(seg, x);
    }
    public static int clip_x_origin$get(MemorySegment seg, long index) {
        return (int)constants$16.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void clip_x_origin$set(MemorySegment seg, long index, int x) {
        constants$16.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clip_y_origin$VH() {
        return constants$16.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int clip_y_origin;
     * }
     */
    public static int clip_y_origin$get(MemorySegment seg) {
        return (int)constants$16.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int clip_y_origin;
     * }
     */
    public static void clip_y_origin$set(MemorySegment seg, int x) {
        constants$16.const$4.set(seg, x);
    }
    public static int clip_y_origin$get(MemorySegment seg, long index) {
        return (int)constants$16.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void clip_y_origin$set(MemorySegment seg, long index, int x) {
        constants$16.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle clip_mask$VH() {
        return constants$16.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Pixmap clip_mask;
     * }
     */
    public static long clip_mask$get(MemorySegment seg) {
        return (long)constants$16.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Pixmap clip_mask;
     * }
     */
    public static void clip_mask$set(MemorySegment seg, long x) {
        constants$16.const$5.set(seg, x);
    }
    public static long clip_mask$get(MemorySegment seg, long index) {
        return (long)constants$16.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void clip_mask$set(MemorySegment seg, long index, long x) {
        constants$16.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dash_offset$VH() {
        return constants$17.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dash_offset;
     * }
     */
    public static int dash_offset$get(MemorySegment seg) {
        return (int)constants$17.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dash_offset;
     * }
     */
    public static void dash_offset$set(MemorySegment seg, int x) {
        constants$17.const$0.set(seg, x);
    }
    public static int dash_offset$get(MemorySegment seg, long index) {
        return (int)constants$17.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dash_offset$set(MemorySegment seg, long index, int x) {
        constants$17.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dashes$VH() {
        return constants$17.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char dashes;
     * }
     */
    public static byte dashes$get(MemorySegment seg) {
        return (byte)constants$17.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char dashes;
     * }
     */
    public static void dashes$set(MemorySegment seg, byte x) {
        constants$17.const$1.set(seg, x);
    }
    public static byte dashes$get(MemorySegment seg, long index) {
        return (byte)constants$17.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dashes$set(MemorySegment seg, long index, byte x) {
        constants$17.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


