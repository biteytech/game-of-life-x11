// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     long flags;
 *     int x;
 *     int y;
 *     int width;
 *     int height;
 *     int min_width;
 *     int min_height;
 *     int max_width;
 *     int max_height;
 *     int width_inc;
 *     int height_inc;
 *     struct  min_aspect;
 *     struct  max_aspect;
 *     int base_width;
 *     int base_height;
 *     int win_gravity;
 * };
 * }
 */
public class XSizeHints {

    public static MemoryLayout $LAYOUT() {
        return constants$210.const$4;
    }
    public static VarHandle flags$VH() {
        return constants$210.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long flags;
     * }
     */
    public static long flags$get(MemorySegment seg) {
        return (long)constants$210.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long flags;
     * }
     */
    public static void flags$set(MemorySegment seg, long x) {
        constants$210.const$5.set(seg, x);
    }
    public static long flags$get(MemorySegment seg, long index) {
        return (long)constants$210.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, long x) {
        constants$210.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle x$VH() {
        return constants$211.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int x;
     * }
     */
    public static int x$get(MemorySegment seg) {
        return (int)constants$211.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int x;
     * }
     */
    public static void x$set(MemorySegment seg, int x) {
        constants$211.const$0.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)constants$211.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        constants$211.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y$VH() {
        return constants$211.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int y;
     * }
     */
    public static int y$get(MemorySegment seg) {
        return (int)constants$211.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int y;
     * }
     */
    public static void y$set(MemorySegment seg, int x) {
        constants$211.const$1.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)constants$211.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        constants$211.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$211.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$211.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$211.const$2.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$211.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$211.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$211.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$211.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$211.const$3.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$211.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$211.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle min_width$VH() {
        return constants$211.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_width;
     * }
     */
    public static int min_width$get(MemorySegment seg) {
        return (int)constants$211.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_width;
     * }
     */
    public static void min_width$set(MemorySegment seg, int x) {
        constants$211.const$4.set(seg, x);
    }
    public static int min_width$get(MemorySegment seg, long index) {
        return (int)constants$211.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void min_width$set(MemorySegment seg, long index, int x) {
        constants$211.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle min_height$VH() {
        return constants$211.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_height;
     * }
     */
    public static int min_height$get(MemorySegment seg) {
        return (int)constants$211.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_height;
     * }
     */
    public static void min_height$set(MemorySegment seg, int x) {
        constants$211.const$5.set(seg, x);
    }
    public static int min_height$get(MemorySegment seg, long index) {
        return (int)constants$211.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void min_height$set(MemorySegment seg, long index, int x) {
        constants$211.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_width$VH() {
        return constants$212.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_width;
     * }
     */
    public static int max_width$get(MemorySegment seg) {
        return (int)constants$212.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_width;
     * }
     */
    public static void max_width$set(MemorySegment seg, int x) {
        constants$212.const$0.set(seg, x);
    }
    public static int max_width$get(MemorySegment seg, long index) {
        return (int)constants$212.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void max_width$set(MemorySegment seg, long index, int x) {
        constants$212.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_height$VH() {
        return constants$212.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_height;
     * }
     */
    public static int max_height$get(MemorySegment seg) {
        return (int)constants$212.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_height;
     * }
     */
    public static void max_height$set(MemorySegment seg, int x) {
        constants$212.const$1.set(seg, x);
    }
    public static int max_height$get(MemorySegment seg, long index) {
        return (int)constants$212.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void max_height$set(MemorySegment seg, long index, int x) {
        constants$212.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width_inc$VH() {
        return constants$212.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width_inc;
     * }
     */
    public static int width_inc$get(MemorySegment seg) {
        return (int)constants$212.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width_inc;
     * }
     */
    public static void width_inc$set(MemorySegment seg, int x) {
        constants$212.const$2.set(seg, x);
    }
    public static int width_inc$get(MemorySegment seg, long index) {
        return (int)constants$212.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void width_inc$set(MemorySegment seg, long index, int x) {
        constants$212.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height_inc$VH() {
        return constants$212.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height_inc;
     * }
     */
    public static int height_inc$get(MemorySegment seg) {
        return (int)constants$212.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height_inc;
     * }
     */
    public static void height_inc$set(MemorySegment seg, int x) {
        constants$212.const$3.set(seg, x);
    }
    public static int height_inc$get(MemorySegment seg, long index) {
        return (int)constants$212.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void height_inc$set(MemorySegment seg, long index, int x) {
        constants$212.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     int x;
     *     int y;
     * };
     * }
     */
    public static final class min_aspect {

        // Suppresses default constructor, ensuring non-instantiability.
        private min_aspect() {}
        public static MemoryLayout $LAYOUT() {
            return constants$212.const$4;
        }
        public static VarHandle x$VH() {
            return constants$212.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int x;
         * }
         */
        public static int x$get(MemorySegment seg) {
            return (int)constants$212.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int x;
         * }
         */
        public static void x$set(MemorySegment seg, int x) {
            constants$212.const$5.set(seg, x);
        }
        public static int x$get(MemorySegment seg, long index) {
            return (int)constants$212.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void x$set(MemorySegment seg, long index, int x) {
            constants$212.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle y$VH() {
            return constants$213.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int y;
         * }
         */
        public static int y$get(MemorySegment seg) {
            return (int)constants$213.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int y;
         * }
         */
        public static void y$set(MemorySegment seg, int x) {
            constants$213.const$0.set(seg, x);
        }
        public static int y$get(MemorySegment seg, long index) {
            return (int)constants$213.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void y$set(MemorySegment seg, long index, int x) {
            constants$213.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment min_aspect$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    /**
     * {@snippet :
     * struct {
     *     int x;
     *     int y;
     * };
     * }
     */
    public static final class max_aspect {

        // Suppresses default constructor, ensuring non-instantiability.
        private max_aspect() {}
        public static MemoryLayout $LAYOUT() {
            return constants$212.const$4;
        }
        public static VarHandle x$VH() {
            return constants$213.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int x;
         * }
         */
        public static int x$get(MemorySegment seg) {
            return (int)constants$213.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int x;
         * }
         */
        public static void x$set(MemorySegment seg, int x) {
            constants$213.const$1.set(seg, x);
        }
        public static int x$get(MemorySegment seg, long index) {
            return (int)constants$213.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void x$set(MemorySegment seg, long index, int x) {
            constants$213.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle y$VH() {
            return constants$213.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int y;
         * }
         */
        public static int y$get(MemorySegment seg) {
            return (int)constants$213.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int y;
         * }
         */
        public static void y$set(MemorySegment seg, int x) {
            constants$213.const$2.set(seg, x);
        }
        public static int y$get(MemorySegment seg, long index) {
            return (int)constants$213.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void y$set(MemorySegment seg, long index, int x) {
            constants$213.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment max_aspect$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static VarHandle base_width$VH() {
        return constants$213.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int base_width;
     * }
     */
    public static int base_width$get(MemorySegment seg) {
        return (int)constants$213.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int base_width;
     * }
     */
    public static void base_width$set(MemorySegment seg, int x) {
        constants$213.const$3.set(seg, x);
    }
    public static int base_width$get(MemorySegment seg, long index) {
        return (int)constants$213.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void base_width$set(MemorySegment seg, long index, int x) {
        constants$213.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle base_height$VH() {
        return constants$213.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int base_height;
     * }
     */
    public static int base_height$get(MemorySegment seg) {
        return (int)constants$213.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int base_height;
     * }
     */
    public static void base_height$set(MemorySegment seg, int x) {
        constants$213.const$4.set(seg, x);
    }
    public static int base_height$get(MemorySegment seg, long index) {
        return (int)constants$213.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void base_height$set(MemorySegment seg, long index, int x) {
        constants$213.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle win_gravity$VH() {
        return constants$213.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int win_gravity;
     * }
     */
    public static int win_gravity$get(MemorySegment seg) {
        return (int)constants$213.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int win_gravity;
     * }
     */
    public static void win_gravity$set(MemorySegment seg, int x) {
        constants$213.const$5.set(seg, x);
    }
    public static int win_gravity$get(MemorySegment seg, long index) {
        return (int)constants$213.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void win_gravity$set(MemorySegment seg, long index, int x) {
        constants$213.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


