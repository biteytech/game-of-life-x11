// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     Visual* visual;
 *     VisualID visualid;
 *     int screen;
 *     int depth;
 *     int class;
 *     unsigned long red_mask;
 *     unsigned long green_mask;
 *     unsigned long blue_mask;
 *     int colormap_size;
 *     int bits_per_rgb;
 * };
 * }
 */
public class XVisualInfo {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("visual"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("visualid"),
        Constants$root.C_INT$LAYOUT.withName("screen"),
        Constants$root.C_INT$LAYOUT.withName("depth"),
        Constants$root.C_INT$LAYOUT.withName("class"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("red_mask"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("green_mask"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("blue_mask"),
        Constants$root.C_INT$LAYOUT.withName("colormap_size"),
        Constants$root.C_INT$LAYOUT.withName("bits_per_rgb")
    );
    public static MemoryLayout $LAYOUT() {
        return XVisualInfo.$struct$LAYOUT;
    }
    static final VarHandle visual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visual"));
    public static VarHandle visual$VH() {
        return XVisualInfo.visual$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static MemorySegment visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XVisualInfo.visual$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static void visual$set(MemorySegment seg, MemorySegment x) {
        XVisualInfo.visual$VH.set(seg, x);
    }
    public static MemorySegment visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XVisualInfo.visual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visual$set(MemorySegment seg, long index, MemorySegment x) {
        XVisualInfo.visual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle visualid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visualid"));
    public static VarHandle visualid$VH() {
        return XVisualInfo.visualid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static long visualid$get(MemorySegment seg) {
        return (long)XVisualInfo.visualid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static void visualid$set(MemorySegment seg, long x) {
        XVisualInfo.visualid$VH.set(seg, x);
    }
    public static long visualid$get(MemorySegment seg, long index) {
        return (long)XVisualInfo.visualid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visualid$set(MemorySegment seg, long index, long x) {
        XVisualInfo.visualid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle screen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("screen"));
    public static VarHandle screen$VH() {
        return XVisualInfo.screen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int screen;
     * }
     */
    public static int screen$get(MemorySegment seg) {
        return (int)XVisualInfo.screen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int screen;
     * }
     */
    public static void screen$set(MemorySegment seg, int x) {
        XVisualInfo.screen$VH.set(seg, x);
    }
    public static int screen$get(MemorySegment seg, long index) {
        return (int)XVisualInfo.screen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void screen$set(MemorySegment seg, long index, int x) {
        XVisualInfo.screen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle depth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("depth"));
    public static VarHandle depth$VH() {
        return XVisualInfo.depth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int depth;
     * }
     */
    public static int depth$get(MemorySegment seg) {
        return (int)XVisualInfo.depth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int depth;
     * }
     */
    public static void depth$set(MemorySegment seg, int x) {
        XVisualInfo.depth$VH.set(seg, x);
    }
    public static int depth$get(MemorySegment seg, long index) {
        return (int)XVisualInfo.depth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void depth$set(MemorySegment seg, long index, int x) {
        XVisualInfo.depth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle class_$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("class"));
    public static VarHandle class_$VH() {
        return XVisualInfo.class_$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int class;
     * }
     */
    public static int class_$get(MemorySegment seg) {
        return (int)XVisualInfo.class_$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int class;
     * }
     */
    public static void class_$set(MemorySegment seg, int x) {
        XVisualInfo.class_$VH.set(seg, x);
    }
    public static int class_$get(MemorySegment seg, long index) {
        return (int)XVisualInfo.class_$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void class_$set(MemorySegment seg, long index, int x) {
        XVisualInfo.class_$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle red_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("red_mask"));
    public static VarHandle red_mask$VH() {
        return XVisualInfo.red_mask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long red_mask;
     * }
     */
    public static long red_mask$get(MemorySegment seg) {
        return (long)XVisualInfo.red_mask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long red_mask;
     * }
     */
    public static void red_mask$set(MemorySegment seg, long x) {
        XVisualInfo.red_mask$VH.set(seg, x);
    }
    public static long red_mask$get(MemorySegment seg, long index) {
        return (long)XVisualInfo.red_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red_mask$set(MemorySegment seg, long index, long x) {
        XVisualInfo.red_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("green_mask"));
    public static VarHandle green_mask$VH() {
        return XVisualInfo.green_mask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long green_mask;
     * }
     */
    public static long green_mask$get(MemorySegment seg) {
        return (long)XVisualInfo.green_mask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long green_mask;
     * }
     */
    public static void green_mask$set(MemorySegment seg, long x) {
        XVisualInfo.green_mask$VH.set(seg, x);
    }
    public static long green_mask$get(MemorySegment seg, long index) {
        return (long)XVisualInfo.green_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_mask$set(MemorySegment seg, long index, long x) {
        XVisualInfo.green_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("blue_mask"));
    public static VarHandle blue_mask$VH() {
        return XVisualInfo.blue_mask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long blue_mask;
     * }
     */
    public static long blue_mask$get(MemorySegment seg) {
        return (long)XVisualInfo.blue_mask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long blue_mask;
     * }
     */
    public static void blue_mask$set(MemorySegment seg, long x) {
        XVisualInfo.blue_mask$VH.set(seg, x);
    }
    public static long blue_mask$get(MemorySegment seg, long index) {
        return (long)XVisualInfo.blue_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_mask$set(MemorySegment seg, long index, long x) {
        XVisualInfo.blue_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle colormap_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("colormap_size"));
    public static VarHandle colormap_size$VH() {
        return XVisualInfo.colormap_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int colormap_size;
     * }
     */
    public static int colormap_size$get(MemorySegment seg) {
        return (int)XVisualInfo.colormap_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int colormap_size;
     * }
     */
    public static void colormap_size$set(MemorySegment seg, int x) {
        XVisualInfo.colormap_size$VH.set(seg, x);
    }
    public static int colormap_size$get(MemorySegment seg, long index) {
        return (int)XVisualInfo.colormap_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colormap_size$set(MemorySegment seg, long index, int x) {
        XVisualInfo.colormap_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bits_per_rgb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bits_per_rgb"));
    public static VarHandle bits_per_rgb$VH() {
        return XVisualInfo.bits_per_rgb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_rgb;
     * }
     */
    public static int bits_per_rgb$get(MemorySegment seg) {
        return (int)XVisualInfo.bits_per_rgb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_rgb;
     * }
     */
    public static void bits_per_rgb$set(MemorySegment seg, int x) {
        XVisualInfo.bits_per_rgb$VH.set(seg, x);
    }
    public static int bits_per_rgb$get(MemorySegment seg, long index) {
        return (int)XVisualInfo.bits_per_rgb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_rgb$set(MemorySegment seg, long index, int x) {
        XVisualInfo.bits_per_rgb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


