// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     Visual* visual;
 *     VisualID visualid;
 *     int screen;
 *     int depth;
 *     int class;
 *     unsigned long red_mask;
 *     unsigned long green_mask;
 *     unsigned long blue_mask;
 *     int colormap_size;
 *     int bits_per_rgb;
 * };
 * }
 */
public class XVisualInfo {

    public static MemoryLayout $LAYOUT() {
        return constants$218.const$4;
    }
    public static VarHandle visual$VH() {
        return constants$218.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static MemorySegment visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$218.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static void visual$set(MemorySegment seg, MemorySegment x) {
        constants$218.const$5.set(seg, x);
    }
    public static MemorySegment visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$218.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void visual$set(MemorySegment seg, long index, MemorySegment x) {
        constants$218.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle visualid$VH() {
        return constants$219.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static long visualid$get(MemorySegment seg) {
        return (long)constants$219.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static void visualid$set(MemorySegment seg, long x) {
        constants$219.const$0.set(seg, x);
    }
    public static long visualid$get(MemorySegment seg, long index) {
        return (long)constants$219.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void visualid$set(MemorySegment seg, long index, long x) {
        constants$219.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle screen$VH() {
        return constants$219.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int screen;
     * }
     */
    public static int screen$get(MemorySegment seg) {
        return (int)constants$219.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int screen;
     * }
     */
    public static void screen$set(MemorySegment seg, int x) {
        constants$219.const$1.set(seg, x);
    }
    public static int screen$get(MemorySegment seg, long index) {
        return (int)constants$219.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void screen$set(MemorySegment seg, long index, int x) {
        constants$219.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depth$VH() {
        return constants$219.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int depth;
     * }
     */
    public static int depth$get(MemorySegment seg) {
        return (int)constants$219.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int depth;
     * }
     */
    public static void depth$set(MemorySegment seg, int x) {
        constants$219.const$2.set(seg, x);
    }
    public static int depth$get(MemorySegment seg, long index) {
        return (int)constants$219.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void depth$set(MemorySegment seg, long index, int x) {
        constants$219.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle class_$VH() {
        return constants$219.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int class;
     * }
     */
    public static int class_$get(MemorySegment seg) {
        return (int)constants$219.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int class;
     * }
     */
    public static void class_$set(MemorySegment seg, int x) {
        constants$219.const$3.set(seg, x);
    }
    public static int class_$get(MemorySegment seg, long index) {
        return (int)constants$219.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void class_$set(MemorySegment seg, long index, int x) {
        constants$219.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle red_mask$VH() {
        return constants$219.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long red_mask;
     * }
     */
    public static long red_mask$get(MemorySegment seg) {
        return (long)constants$219.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long red_mask;
     * }
     */
    public static void red_mask$set(MemorySegment seg, long x) {
        constants$219.const$4.set(seg, x);
    }
    public static long red_mask$get(MemorySegment seg, long index) {
        return (long)constants$219.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void red_mask$set(MemorySegment seg, long index, long x) {
        constants$219.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle green_mask$VH() {
        return constants$219.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long green_mask;
     * }
     */
    public static long green_mask$get(MemorySegment seg) {
        return (long)constants$219.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long green_mask;
     * }
     */
    public static void green_mask$set(MemorySegment seg, long x) {
        constants$219.const$5.set(seg, x);
    }
    public static long green_mask$get(MemorySegment seg, long index) {
        return (long)constants$219.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void green_mask$set(MemorySegment seg, long index, long x) {
        constants$219.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blue_mask$VH() {
        return constants$220.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long blue_mask;
     * }
     */
    public static long blue_mask$get(MemorySegment seg) {
        return (long)constants$220.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long blue_mask;
     * }
     */
    public static void blue_mask$set(MemorySegment seg, long x) {
        constants$220.const$0.set(seg, x);
    }
    public static long blue_mask$get(MemorySegment seg, long index) {
        return (long)constants$220.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_mask$set(MemorySegment seg, long index, long x) {
        constants$220.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colormap_size$VH() {
        return constants$220.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int colormap_size;
     * }
     */
    public static int colormap_size$get(MemorySegment seg) {
        return (int)constants$220.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int colormap_size;
     * }
     */
    public static void colormap_size$set(MemorySegment seg, int x) {
        constants$220.const$1.set(seg, x);
    }
    public static int colormap_size$get(MemorySegment seg, long index) {
        return (int)constants$220.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void colormap_size$set(MemorySegment seg, long index, int x) {
        constants$220.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits_per_rgb$VH() {
        return constants$220.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_rgb;
     * }
     */
    public static int bits_per_rgb$get(MemorySegment seg) {
        return (int)constants$220.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_rgb;
     * }
     */
    public static void bits_per_rgb$set(MemorySegment seg, int x) {
        constants$220.const$2.set(seg, x);
    }
    public static int bits_per_rgb$get(MemorySegment seg, long index) {
        return (int)constants$220.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_rgb$set(MemorySegment seg, long index, int x) {
        constants$220.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


