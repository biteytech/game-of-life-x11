// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union {
 *     Display* display;
 *     GC gc;
 *     Visual* visual;
 *     Screen* screen;
 *     ScreenFormat* pixmap_format;
 *     XFontStruct* font;
 * };
 * }
 */
public class XEDataObject {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_POINTER$LAYOUT.withName("display"),
        Constants$root.C_POINTER$LAYOUT.withName("gc"),
        Constants$root.C_POINTER$LAYOUT.withName("visual"),
        Constants$root.C_POINTER$LAYOUT.withName("screen"),
        Constants$root.C_POINTER$LAYOUT.withName("pixmap_format"),
        Constants$root.C_POINTER$LAYOUT.withName("font")
    );
    public static MemoryLayout $LAYOUT() {
        return XEDataObject.$union$LAYOUT;
    }
    static final VarHandle display$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("display"));
    public static VarHandle display$VH() {
        return XEDataObject.display$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Display* display;
     * }
     */
    public static MemorySegment display$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XEDataObject.display$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Display* display;
     * }
     */
    public static void display$set(MemorySegment seg, MemorySegment x) {
        XEDataObject.display$VH.set(seg, x);
    }
    public static MemorySegment display$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XEDataObject.display$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void display$set(MemorySegment seg, long index, MemorySegment x) {
        XEDataObject.display$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gc$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gc"));
    public static VarHandle gc$VH() {
        return XEDataObject.gc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GC gc;
     * }
     */
    public static MemorySegment gc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XEDataObject.gc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GC gc;
     * }
     */
    public static void gc$set(MemorySegment seg, MemorySegment x) {
        XEDataObject.gc$VH.set(seg, x);
    }
    public static MemorySegment gc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XEDataObject.gc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gc$set(MemorySegment seg, long index, MemorySegment x) {
        XEDataObject.gc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle visual$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visual"));
    public static VarHandle visual$VH() {
        return XEDataObject.visual$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static MemorySegment visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XEDataObject.visual$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static void visual$set(MemorySegment seg, MemorySegment x) {
        XEDataObject.visual$VH.set(seg, x);
    }
    public static MemorySegment visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XEDataObject.visual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visual$set(MemorySegment seg, long index, MemorySegment x) {
        XEDataObject.visual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle screen$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("screen"));
    public static VarHandle screen$VH() {
        return XEDataObject.screen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Screen* screen;
     * }
     */
    public static MemorySegment screen$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XEDataObject.screen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Screen* screen;
     * }
     */
    public static void screen$set(MemorySegment seg, MemorySegment x) {
        XEDataObject.screen$VH.set(seg, x);
    }
    public static MemorySegment screen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XEDataObject.screen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void screen$set(MemorySegment seg, long index, MemorySegment x) {
        XEDataObject.screen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pixmap_format$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pixmap_format"));
    public static VarHandle pixmap_format$VH() {
        return XEDataObject.pixmap_format$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ScreenFormat* pixmap_format;
     * }
     */
    public static MemorySegment pixmap_format$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XEDataObject.pixmap_format$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ScreenFormat* pixmap_format;
     * }
     */
    public static void pixmap_format$set(MemorySegment seg, MemorySegment x) {
        XEDataObject.pixmap_format$VH.set(seg, x);
    }
    public static MemorySegment pixmap_format$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XEDataObject.pixmap_format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pixmap_format$set(MemorySegment seg, long index, MemorySegment x) {
        XEDataObject.pixmap_format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle font$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("font"));
    public static VarHandle font$VH() {
        return XEDataObject.font$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XFontStruct* font;
     * }
     */
    public static MemorySegment font$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XEDataObject.font$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XFontStruct* font;
     * }
     */
    public static void font$set(MemorySegment seg, MemorySegment x) {
        XEDataObject.font$VH.set(seg, x);
    }
    public static MemorySegment font$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XEDataObject.font$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void font$set(MemorySegment seg, long index, MemorySegment x) {
        XEDataObject.font$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


