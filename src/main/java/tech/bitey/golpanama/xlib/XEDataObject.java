// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union {
 *     Display* display;
 *     GC gc;
 *     Visual* visual;
 *     Screen* screen;
 *     ScreenFormat* pixmap_format;
 *     XFontStruct* font;
 * };
 * }
 */
public class XEDataObject {

    public static MemoryLayout $LAYOUT() {
        return constants$109.const$1;
    }
    public static VarHandle display$VH() {
        return constants$109.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Display* display;
     * }
     */
    public static MemorySegment display$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$109.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Display* display;
     * }
     */
    public static void display$set(MemorySegment seg, MemorySegment x) {
        constants$109.const$2.set(seg, x);
    }
    public static MemorySegment display$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$109.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void display$set(MemorySegment seg, long index, MemorySegment x) {
        constants$109.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gc$VH() {
        return constants$109.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GC gc;
     * }
     */
    public static MemorySegment gc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$109.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GC gc;
     * }
     */
    public static void gc$set(MemorySegment seg, MemorySegment x) {
        constants$109.const$3.set(seg, x);
    }
    public static MemorySegment gc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$109.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void gc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$109.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle visual$VH() {
        return constants$109.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static MemorySegment visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$109.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static void visual$set(MemorySegment seg, MemorySegment x) {
        constants$109.const$4.set(seg, x);
    }
    public static MemorySegment visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$109.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void visual$set(MemorySegment seg, long index, MemorySegment x) {
        constants$109.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle screen$VH() {
        return constants$109.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Screen* screen;
     * }
     */
    public static MemorySegment screen$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$109.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Screen* screen;
     * }
     */
    public static void screen$set(MemorySegment seg, MemorySegment x) {
        constants$109.const$5.set(seg, x);
    }
    public static MemorySegment screen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$109.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void screen$set(MemorySegment seg, long index, MemorySegment x) {
        constants$109.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pixmap_format$VH() {
        return constants$110.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ScreenFormat* pixmap_format;
     * }
     */
    public static MemorySegment pixmap_format$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$110.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ScreenFormat* pixmap_format;
     * }
     */
    public static void pixmap_format$set(MemorySegment seg, MemorySegment x) {
        constants$110.const$0.set(seg, x);
    }
    public static MemorySegment pixmap_format$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$110.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pixmap_format$set(MemorySegment seg, long index, MemorySegment x) {
        constants$110.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle font$VH() {
        return constants$110.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XFontStruct* font;
     * }
     */
    public static MemorySegment font$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$110.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XFontStruct* font;
     * }
     */
    public static void font$set(MemorySegment seg, MemorySegment x) {
        constants$110.const$1.set(seg, x);
    }
    public static MemorySegment font$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$110.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void font$set(MemorySegment seg, long index, MemorySegment x) {
        constants$110.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


