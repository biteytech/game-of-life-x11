// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     int x;
 *     int y;
 *     int width;
 *     int height;
 *     int border_width;
 *     int depth;
 *     Visual* visual;
 *     Window root;
 *     int class;
 *     int bit_gravity;
 *     int win_gravity;
 *     int backing_store;
 *     unsigned long backing_planes;
 *     unsigned long backing_pixel;
 *     int save_under;
 *     Colormap colormap;
 *     int map_installed;
 *     int map_state;
 *     long all_event_masks;
 *     long your_event_mask;
 *     long do_not_propagate_mask;
 *     int override_redirect;
 *     Screen* screen;
 * };
 * }
 */
public class XWindowAttributes {

    public static MemoryLayout $LAYOUT() {
        return constants$26.const$3;
    }
    public static VarHandle x$VH() {
        return constants$26.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int x;
     * }
     */
    public static int x$get(MemorySegment seg) {
        return (int)constants$26.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int x;
     * }
     */
    public static void x$set(MemorySegment seg, int x) {
        constants$26.const$4.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)constants$26.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        constants$26.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y$VH() {
        return constants$26.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int y;
     * }
     */
    public static int y$get(MemorySegment seg) {
        return (int)constants$26.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int y;
     * }
     */
    public static void y$set(MemorySegment seg, int x) {
        constants$26.const$5.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)constants$26.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        constants$26.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$27.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$27.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$27.const$0.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$27.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$27.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$27.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$27.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$27.const$1.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$27.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$27.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle border_width$VH() {
        return constants$27.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int border_width;
     * }
     */
    public static int border_width$get(MemorySegment seg) {
        return (int)constants$27.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int border_width;
     * }
     */
    public static void border_width$set(MemorySegment seg, int x) {
        constants$27.const$2.set(seg, x);
    }
    public static int border_width$get(MemorySegment seg, long index) {
        return (int)constants$27.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void border_width$set(MemorySegment seg, long index, int x) {
        constants$27.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depth$VH() {
        return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int depth;
     * }
     */
    public static int depth$get(MemorySegment seg) {
        return (int)constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int depth;
     * }
     */
    public static void depth$set(MemorySegment seg, int x) {
        constants$27.const$3.set(seg, x);
    }
    public static int depth$get(MemorySegment seg, long index) {
        return (int)constants$27.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void depth$set(MemorySegment seg, long index, int x) {
        constants$27.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle visual$VH() {
        return constants$27.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static MemorySegment visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$27.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Visual* visual;
     * }
     */
    public static void visual$set(MemorySegment seg, MemorySegment x) {
        constants$27.const$4.set(seg, x);
    }
    public static MemorySegment visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$27.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void visual$set(MemorySegment seg, long index, MemorySegment x) {
        constants$27.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle root$VH() {
        return constants$27.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Window root;
     * }
     */
    public static long root$get(MemorySegment seg) {
        return (long)constants$27.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Window root;
     * }
     */
    public static void root$set(MemorySegment seg, long x) {
        constants$27.const$5.set(seg, x);
    }
    public static long root$get(MemorySegment seg, long index) {
        return (long)constants$27.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void root$set(MemorySegment seg, long index, long x) {
        constants$27.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle class_$VH() {
        return constants$28.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int class;
     * }
     */
    public static int class_$get(MemorySegment seg) {
        return (int)constants$28.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int class;
     * }
     */
    public static void class_$set(MemorySegment seg, int x) {
        constants$28.const$0.set(seg, x);
    }
    public static int class_$get(MemorySegment seg, long index) {
        return (int)constants$28.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void class_$set(MemorySegment seg, long index, int x) {
        constants$28.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_gravity$VH() {
        return constants$28.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bit_gravity;
     * }
     */
    public static int bit_gravity$get(MemorySegment seg) {
        return (int)constants$28.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bit_gravity;
     * }
     */
    public static void bit_gravity$set(MemorySegment seg, int x) {
        constants$28.const$1.set(seg, x);
    }
    public static int bit_gravity$get(MemorySegment seg, long index) {
        return (int)constants$28.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_gravity$set(MemorySegment seg, long index, int x) {
        constants$28.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle win_gravity$VH() {
        return constants$28.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int win_gravity;
     * }
     */
    public static int win_gravity$get(MemorySegment seg) {
        return (int)constants$28.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int win_gravity;
     * }
     */
    public static void win_gravity$set(MemorySegment seg, int x) {
        constants$28.const$2.set(seg, x);
    }
    public static int win_gravity$get(MemorySegment seg, long index) {
        return (int)constants$28.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void win_gravity$set(MemorySegment seg, long index, int x) {
        constants$28.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle backing_store$VH() {
        return constants$28.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int backing_store;
     * }
     */
    public static int backing_store$get(MemorySegment seg) {
        return (int)constants$28.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int backing_store;
     * }
     */
    public static void backing_store$set(MemorySegment seg, int x) {
        constants$28.const$3.set(seg, x);
    }
    public static int backing_store$get(MemorySegment seg, long index) {
        return (int)constants$28.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void backing_store$set(MemorySegment seg, long index, int x) {
        constants$28.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle backing_planes$VH() {
        return constants$28.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long backing_planes;
     * }
     */
    public static long backing_planes$get(MemorySegment seg) {
        return (long)constants$28.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long backing_planes;
     * }
     */
    public static void backing_planes$set(MemorySegment seg, long x) {
        constants$28.const$4.set(seg, x);
    }
    public static long backing_planes$get(MemorySegment seg, long index) {
        return (long)constants$28.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void backing_planes$set(MemorySegment seg, long index, long x) {
        constants$28.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle backing_pixel$VH() {
        return constants$28.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long backing_pixel;
     * }
     */
    public static long backing_pixel$get(MemorySegment seg) {
        return (long)constants$28.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long backing_pixel;
     * }
     */
    public static void backing_pixel$set(MemorySegment seg, long x) {
        constants$28.const$5.set(seg, x);
    }
    public static long backing_pixel$get(MemorySegment seg, long index) {
        return (long)constants$28.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void backing_pixel$set(MemorySegment seg, long index, long x) {
        constants$28.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle save_under$VH() {
        return constants$29.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int save_under;
     * }
     */
    public static int save_under$get(MemorySegment seg) {
        return (int)constants$29.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int save_under;
     * }
     */
    public static void save_under$set(MemorySegment seg, int x) {
        constants$29.const$0.set(seg, x);
    }
    public static int save_under$get(MemorySegment seg, long index) {
        return (int)constants$29.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void save_under$set(MemorySegment seg, long index, int x) {
        constants$29.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colormap$VH() {
        return constants$29.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Colormap colormap;
     * }
     */
    public static long colormap$get(MemorySegment seg) {
        return (long)constants$29.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Colormap colormap;
     * }
     */
    public static void colormap$set(MemorySegment seg, long x) {
        constants$29.const$1.set(seg, x);
    }
    public static long colormap$get(MemorySegment seg, long index) {
        return (long)constants$29.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void colormap$set(MemorySegment seg, long index, long x) {
        constants$29.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle map_installed$VH() {
        return constants$29.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int map_installed;
     * }
     */
    public static int map_installed$get(MemorySegment seg) {
        return (int)constants$29.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int map_installed;
     * }
     */
    public static void map_installed$set(MemorySegment seg, int x) {
        constants$29.const$2.set(seg, x);
    }
    public static int map_installed$get(MemorySegment seg, long index) {
        return (int)constants$29.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void map_installed$set(MemorySegment seg, long index, int x) {
        constants$29.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle map_state$VH() {
        return constants$29.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int map_state;
     * }
     */
    public static int map_state$get(MemorySegment seg) {
        return (int)constants$29.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int map_state;
     * }
     */
    public static void map_state$set(MemorySegment seg, int x) {
        constants$29.const$3.set(seg, x);
    }
    public static int map_state$get(MemorySegment seg, long index) {
        return (int)constants$29.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void map_state$set(MemorySegment seg, long index, int x) {
        constants$29.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle all_event_masks$VH() {
        return constants$29.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long all_event_masks;
     * }
     */
    public static long all_event_masks$get(MemorySegment seg) {
        return (long)constants$29.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long all_event_masks;
     * }
     */
    public static void all_event_masks$set(MemorySegment seg, long x) {
        constants$29.const$4.set(seg, x);
    }
    public static long all_event_masks$get(MemorySegment seg, long index) {
        return (long)constants$29.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void all_event_masks$set(MemorySegment seg, long index, long x) {
        constants$29.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle your_event_mask$VH() {
        return constants$29.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long your_event_mask;
     * }
     */
    public static long your_event_mask$get(MemorySegment seg) {
        return (long)constants$29.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long your_event_mask;
     * }
     */
    public static void your_event_mask$set(MemorySegment seg, long x) {
        constants$29.const$5.set(seg, x);
    }
    public static long your_event_mask$get(MemorySegment seg, long index) {
        return (long)constants$29.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void your_event_mask$set(MemorySegment seg, long index, long x) {
        constants$29.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle do_not_propagate_mask$VH() {
        return constants$30.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long do_not_propagate_mask;
     * }
     */
    public static long do_not_propagate_mask$get(MemorySegment seg) {
        return (long)constants$30.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long do_not_propagate_mask;
     * }
     */
    public static void do_not_propagate_mask$set(MemorySegment seg, long x) {
        constants$30.const$0.set(seg, x);
    }
    public static long do_not_propagate_mask$get(MemorySegment seg, long index) {
        return (long)constants$30.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void do_not_propagate_mask$set(MemorySegment seg, long index, long x) {
        constants$30.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle override_redirect$VH() {
        return constants$30.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int override_redirect;
     * }
     */
    public static int override_redirect$get(MemorySegment seg) {
        return (int)constants$30.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int override_redirect;
     * }
     */
    public static void override_redirect$set(MemorySegment seg, int x) {
        constants$30.const$1.set(seg, x);
    }
    public static int override_redirect$get(MemorySegment seg, long index) {
        return (int)constants$30.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void override_redirect$set(MemorySegment seg, long index, int x) {
        constants$30.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle screen$VH() {
        return constants$30.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Screen* screen;
     * }
     */
    public static MemorySegment screen$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Screen* screen;
     * }
     */
    public static void screen$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$2.set(seg, x);
    }
    public static MemorySegment screen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void screen$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


