// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _XIMText {
 *     unsigned short length;
 *     XIMFeedback* feedback;
 *     int encoding_is_wchar;
 *     union  string;
 * };
 * }
 */
public class _XIMText {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("length"),
        MemoryLayout.paddingLayout(48),
        Constants$root.C_POINTER$LAYOUT.withName("feedback"),
        Constants$root.C_INT$LAYOUT.withName("encoding_is_wchar"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("multi_byte"),
            Constants$root.C_POINTER$LAYOUT.withName("wide_char")
        ).withName("string")
    ).withName("_XIMText");
    public static MemoryLayout $LAYOUT() {
        return _XIMText.$struct$LAYOUT;
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return _XIMText.length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short length;
     * }
     */
    public static short length$get(MemorySegment seg) {
        return (short)_XIMText.length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short length;
     * }
     */
    public static void length$set(MemorySegment seg, short x) {
        _XIMText.length$VH.set(seg, x);
    }
    public static short length$get(MemorySegment seg, long index) {
        return (short)_XIMText.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, short x) {
        _XIMText.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle feedback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("feedback"));
    public static VarHandle feedback$VH() {
        return _XIMText.feedback$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XIMFeedback* feedback;
     * }
     */
    public static MemorySegment feedback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_XIMText.feedback$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XIMFeedback* feedback;
     * }
     */
    public static void feedback$set(MemorySegment seg, MemorySegment x) {
        _XIMText.feedback$VH.set(seg, x);
    }
    public static MemorySegment feedback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_XIMText.feedback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void feedback$set(MemorySegment seg, long index, MemorySegment x) {
        _XIMText.feedback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle encoding_is_wchar$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("encoding_is_wchar"));
    public static VarHandle encoding_is_wchar$VH() {
        return _XIMText.encoding_is_wchar$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int encoding_is_wchar;
     * }
     */
    public static int encoding_is_wchar$get(MemorySegment seg) {
        return (int)_XIMText.encoding_is_wchar$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int encoding_is_wchar;
     * }
     */
    public static void encoding_is_wchar$set(MemorySegment seg, int x) {
        _XIMText.encoding_is_wchar$VH.set(seg, x);
    }
    public static int encoding_is_wchar$get(MemorySegment seg, long index) {
        return (int)_XIMText.encoding_is_wchar$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void encoding_is_wchar$set(MemorySegment seg, long index, int x) {
        _XIMText.encoding_is_wchar$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     char* multi_byte;
     *     wchar_t* wide_char;
     * };
     * }
     */
    public static final class string {

        // Suppresses default constructor, ensuring non-instantiability.
        private string() {}
        static final UnionLayout string$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("multi_byte"),
            Constants$root.C_POINTER$LAYOUT.withName("wide_char")
        );
        public static MemoryLayout $LAYOUT() {
            return string.string$union$LAYOUT;
        }
        static final VarHandle multi_byte$VH = string$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("multi_byte"));
        public static VarHandle multi_byte$VH() {
            return string.multi_byte$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * char* multi_byte;
         * }
         */
        public static MemorySegment multi_byte$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)string.multi_byte$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * char* multi_byte;
         * }
         */
        public static void multi_byte$set(MemorySegment seg, MemorySegment x) {
            string.multi_byte$VH.set(seg, x);
        }
        public static MemorySegment multi_byte$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)string.multi_byte$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void multi_byte$set(MemorySegment seg, long index, MemorySegment x) {
            string.multi_byte$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle wide_char$VH = string$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wide_char"));
        public static VarHandle wide_char$VH() {
            return string.wide_char$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * wchar_t* wide_char;
         * }
         */
        public static MemorySegment wide_char$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)string.wide_char$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * wchar_t* wide_char;
         * }
         */
        public static void wide_char$set(MemorySegment seg, MemorySegment x) {
            string.wide_char$VH.set(seg, x);
        }
        public static MemorySegment wide_char$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)string.wide_char$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void wide_char$set(MemorySegment seg, long index, MemorySegment x) {
            string.wide_char$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment string$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


