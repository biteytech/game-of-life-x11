// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class Xlib_h_2 extends Xlib_h_1 {

    /**
     * {@snippet :
     * #define XK_braille_dots_3467 16787564
     * }
     */
    public static int XK_braille_dots_3467() {
        return (int)16787564L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13467 16787565
     * }
     */
    public static int XK_braille_dots_13467() {
        return (int)16787565L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23467 16787566
     * }
     */
    public static int XK_braille_dots_23467() {
        return (int)16787566L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123467 16787567
     * }
     */
    public static int XK_braille_dots_123467() {
        return (int)16787567L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_567 16787568
     * }
     */
    public static int XK_braille_dots_567() {
        return (int)16787568L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1567 16787569
     * }
     */
    public static int XK_braille_dots_1567() {
        return (int)16787569L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2567 16787570
     * }
     */
    public static int XK_braille_dots_2567() {
        return (int)16787570L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12567 16787571
     * }
     */
    public static int XK_braille_dots_12567() {
        return (int)16787571L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_3567 16787572
     * }
     */
    public static int XK_braille_dots_3567() {
        return (int)16787572L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13567 16787573
     * }
     */
    public static int XK_braille_dots_13567() {
        return (int)16787573L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23567 16787574
     * }
     */
    public static int XK_braille_dots_23567() {
        return (int)16787574L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123567 16787575
     * }
     */
    public static int XK_braille_dots_123567() {
        return (int)16787575L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_4567 16787576
     * }
     */
    public static int XK_braille_dots_4567() {
        return (int)16787576L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_14567 16787577
     * }
     */
    public static int XK_braille_dots_14567() {
        return (int)16787577L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_24567 16787578
     * }
     */
    public static int XK_braille_dots_24567() {
        return (int)16787578L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_124567 16787579
     * }
     */
    public static int XK_braille_dots_124567() {
        return (int)16787579L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_34567 16787580
     * }
     */
    public static int XK_braille_dots_34567() {
        return (int)16787580L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_134567 16787581
     * }
     */
    public static int XK_braille_dots_134567() {
        return (int)16787581L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_234567 16787582
     * }
     */
    public static int XK_braille_dots_234567() {
        return (int)16787582L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1234567 16787583
     * }
     */
    public static int XK_braille_dots_1234567() {
        return (int)16787583L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_8 16787584
     * }
     */
    public static int XK_braille_dots_8() {
        return (int)16787584L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_18 16787585
     * }
     */
    public static int XK_braille_dots_18() {
        return (int)16787585L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_28 16787586
     * }
     */
    public static int XK_braille_dots_28() {
        return (int)16787586L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_128 16787587
     * }
     */
    public static int XK_braille_dots_128() {
        return (int)16787587L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_38 16787588
     * }
     */
    public static int XK_braille_dots_38() {
        return (int)16787588L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_138 16787589
     * }
     */
    public static int XK_braille_dots_138() {
        return (int)16787589L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_238 16787590
     * }
     */
    public static int XK_braille_dots_238() {
        return (int)16787590L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1238 16787591
     * }
     */
    public static int XK_braille_dots_1238() {
        return (int)16787591L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_48 16787592
     * }
     */
    public static int XK_braille_dots_48() {
        return (int)16787592L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_148 16787593
     * }
     */
    public static int XK_braille_dots_148() {
        return (int)16787593L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_248 16787594
     * }
     */
    public static int XK_braille_dots_248() {
        return (int)16787594L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1248 16787595
     * }
     */
    public static int XK_braille_dots_1248() {
        return (int)16787595L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_348 16787596
     * }
     */
    public static int XK_braille_dots_348() {
        return (int)16787596L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1348 16787597
     * }
     */
    public static int XK_braille_dots_1348() {
        return (int)16787597L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2348 16787598
     * }
     */
    public static int XK_braille_dots_2348() {
        return (int)16787598L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12348 16787599
     * }
     */
    public static int XK_braille_dots_12348() {
        return (int)16787599L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_58 16787600
     * }
     */
    public static int XK_braille_dots_58() {
        return (int)16787600L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_158 16787601
     * }
     */
    public static int XK_braille_dots_158() {
        return (int)16787601L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_258 16787602
     * }
     */
    public static int XK_braille_dots_258() {
        return (int)16787602L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1258 16787603
     * }
     */
    public static int XK_braille_dots_1258() {
        return (int)16787603L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_358 16787604
     * }
     */
    public static int XK_braille_dots_358() {
        return (int)16787604L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1358 16787605
     * }
     */
    public static int XK_braille_dots_1358() {
        return (int)16787605L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2358 16787606
     * }
     */
    public static int XK_braille_dots_2358() {
        return (int)16787606L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12358 16787607
     * }
     */
    public static int XK_braille_dots_12358() {
        return (int)16787607L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_458 16787608
     * }
     */
    public static int XK_braille_dots_458() {
        return (int)16787608L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1458 16787609
     * }
     */
    public static int XK_braille_dots_1458() {
        return (int)16787609L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2458 16787610
     * }
     */
    public static int XK_braille_dots_2458() {
        return (int)16787610L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12458 16787611
     * }
     */
    public static int XK_braille_dots_12458() {
        return (int)16787611L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_3458 16787612
     * }
     */
    public static int XK_braille_dots_3458() {
        return (int)16787612L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13458 16787613
     * }
     */
    public static int XK_braille_dots_13458() {
        return (int)16787613L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23458 16787614
     * }
     */
    public static int XK_braille_dots_23458() {
        return (int)16787614L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123458 16787615
     * }
     */
    public static int XK_braille_dots_123458() {
        return (int)16787615L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_68 16787616
     * }
     */
    public static int XK_braille_dots_68() {
        return (int)16787616L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_168 16787617
     * }
     */
    public static int XK_braille_dots_168() {
        return (int)16787617L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_268 16787618
     * }
     */
    public static int XK_braille_dots_268() {
        return (int)16787618L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1268 16787619
     * }
     */
    public static int XK_braille_dots_1268() {
        return (int)16787619L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_368 16787620
     * }
     */
    public static int XK_braille_dots_368() {
        return (int)16787620L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1368 16787621
     * }
     */
    public static int XK_braille_dots_1368() {
        return (int)16787621L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2368 16787622
     * }
     */
    public static int XK_braille_dots_2368() {
        return (int)16787622L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12368 16787623
     * }
     */
    public static int XK_braille_dots_12368() {
        return (int)16787623L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_468 16787624
     * }
     */
    public static int XK_braille_dots_468() {
        return (int)16787624L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1468 16787625
     * }
     */
    public static int XK_braille_dots_1468() {
        return (int)16787625L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2468 16787626
     * }
     */
    public static int XK_braille_dots_2468() {
        return (int)16787626L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12468 16787627
     * }
     */
    public static int XK_braille_dots_12468() {
        return (int)16787627L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_3468 16787628
     * }
     */
    public static int XK_braille_dots_3468() {
        return (int)16787628L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13468 16787629
     * }
     */
    public static int XK_braille_dots_13468() {
        return (int)16787629L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23468 16787630
     * }
     */
    public static int XK_braille_dots_23468() {
        return (int)16787630L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123468 16787631
     * }
     */
    public static int XK_braille_dots_123468() {
        return (int)16787631L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_568 16787632
     * }
     */
    public static int XK_braille_dots_568() {
        return (int)16787632L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1568 16787633
     * }
     */
    public static int XK_braille_dots_1568() {
        return (int)16787633L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2568 16787634
     * }
     */
    public static int XK_braille_dots_2568() {
        return (int)16787634L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12568 16787635
     * }
     */
    public static int XK_braille_dots_12568() {
        return (int)16787635L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_3568 16787636
     * }
     */
    public static int XK_braille_dots_3568() {
        return (int)16787636L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13568 16787637
     * }
     */
    public static int XK_braille_dots_13568() {
        return (int)16787637L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23568 16787638
     * }
     */
    public static int XK_braille_dots_23568() {
        return (int)16787638L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123568 16787639
     * }
     */
    public static int XK_braille_dots_123568() {
        return (int)16787639L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_4568 16787640
     * }
     */
    public static int XK_braille_dots_4568() {
        return (int)16787640L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_14568 16787641
     * }
     */
    public static int XK_braille_dots_14568() {
        return (int)16787641L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_24568 16787642
     * }
     */
    public static int XK_braille_dots_24568() {
        return (int)16787642L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_124568 16787643
     * }
     */
    public static int XK_braille_dots_124568() {
        return (int)16787643L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_34568 16787644
     * }
     */
    public static int XK_braille_dots_34568() {
        return (int)16787644L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_134568 16787645
     * }
     */
    public static int XK_braille_dots_134568() {
        return (int)16787645L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_234568 16787646
     * }
     */
    public static int XK_braille_dots_234568() {
        return (int)16787646L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1234568 16787647
     * }
     */
    public static int XK_braille_dots_1234568() {
        return (int)16787647L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_78 16787648
     * }
     */
    public static int XK_braille_dots_78() {
        return (int)16787648L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_178 16787649
     * }
     */
    public static int XK_braille_dots_178() {
        return (int)16787649L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_278 16787650
     * }
     */
    public static int XK_braille_dots_278() {
        return (int)16787650L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1278 16787651
     * }
     */
    public static int XK_braille_dots_1278() {
        return (int)16787651L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_378 16787652
     * }
     */
    public static int XK_braille_dots_378() {
        return (int)16787652L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1378 16787653
     * }
     */
    public static int XK_braille_dots_1378() {
        return (int)16787653L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2378 16787654
     * }
     */
    public static int XK_braille_dots_2378() {
        return (int)16787654L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12378 16787655
     * }
     */
    public static int XK_braille_dots_12378() {
        return (int)16787655L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_478 16787656
     * }
     */
    public static int XK_braille_dots_478() {
        return (int)16787656L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1478 16787657
     * }
     */
    public static int XK_braille_dots_1478() {
        return (int)16787657L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2478 16787658
     * }
     */
    public static int XK_braille_dots_2478() {
        return (int)16787658L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12478 16787659
     * }
     */
    public static int XK_braille_dots_12478() {
        return (int)16787659L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_3478 16787660
     * }
     */
    public static int XK_braille_dots_3478() {
        return (int)16787660L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13478 16787661
     * }
     */
    public static int XK_braille_dots_13478() {
        return (int)16787661L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23478 16787662
     * }
     */
    public static int XK_braille_dots_23478() {
        return (int)16787662L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123478 16787663
     * }
     */
    public static int XK_braille_dots_123478() {
        return (int)16787663L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_578 16787664
     * }
     */
    public static int XK_braille_dots_578() {
        return (int)16787664L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1578 16787665
     * }
     */
    public static int XK_braille_dots_1578() {
        return (int)16787665L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2578 16787666
     * }
     */
    public static int XK_braille_dots_2578() {
        return (int)16787666L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12578 16787667
     * }
     */
    public static int XK_braille_dots_12578() {
        return (int)16787667L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_3578 16787668
     * }
     */
    public static int XK_braille_dots_3578() {
        return (int)16787668L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13578 16787669
     * }
     */
    public static int XK_braille_dots_13578() {
        return (int)16787669L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23578 16787670
     * }
     */
    public static int XK_braille_dots_23578() {
        return (int)16787670L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123578 16787671
     * }
     */
    public static int XK_braille_dots_123578() {
        return (int)16787671L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_4578 16787672
     * }
     */
    public static int XK_braille_dots_4578() {
        return (int)16787672L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_14578 16787673
     * }
     */
    public static int XK_braille_dots_14578() {
        return (int)16787673L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_24578 16787674
     * }
     */
    public static int XK_braille_dots_24578() {
        return (int)16787674L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_124578 16787675
     * }
     */
    public static int XK_braille_dots_124578() {
        return (int)16787675L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_34578 16787676
     * }
     */
    public static int XK_braille_dots_34578() {
        return (int)16787676L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_134578 16787677
     * }
     */
    public static int XK_braille_dots_134578() {
        return (int)16787677L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_234578 16787678
     * }
     */
    public static int XK_braille_dots_234578() {
        return (int)16787678L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1234578 16787679
     * }
     */
    public static int XK_braille_dots_1234578() {
        return (int)16787679L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_678 16787680
     * }
     */
    public static int XK_braille_dots_678() {
        return (int)16787680L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1678 16787681
     * }
     */
    public static int XK_braille_dots_1678() {
        return (int)16787681L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2678 16787682
     * }
     */
    public static int XK_braille_dots_2678() {
        return (int)16787682L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12678 16787683
     * }
     */
    public static int XK_braille_dots_12678() {
        return (int)16787683L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_3678 16787684
     * }
     */
    public static int XK_braille_dots_3678() {
        return (int)16787684L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_13678 16787685
     * }
     */
    public static int XK_braille_dots_13678() {
        return (int)16787685L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_23678 16787686
     * }
     */
    public static int XK_braille_dots_23678() {
        return (int)16787686L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_123678 16787687
     * }
     */
    public static int XK_braille_dots_123678() {
        return (int)16787687L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_4678 16787688
     * }
     */
    public static int XK_braille_dots_4678() {
        return (int)16787688L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_14678 16787689
     * }
     */
    public static int XK_braille_dots_14678() {
        return (int)16787689L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_24678 16787690
     * }
     */
    public static int XK_braille_dots_24678() {
        return (int)16787690L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_124678 16787691
     * }
     */
    public static int XK_braille_dots_124678() {
        return (int)16787691L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_34678 16787692
     * }
     */
    public static int XK_braille_dots_34678() {
        return (int)16787692L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_134678 16787693
     * }
     */
    public static int XK_braille_dots_134678() {
        return (int)16787693L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_234678 16787694
     * }
     */
    public static int XK_braille_dots_234678() {
        return (int)16787694L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1234678 16787695
     * }
     */
    public static int XK_braille_dots_1234678() {
        return (int)16787695L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_5678 16787696
     * }
     */
    public static int XK_braille_dots_5678() {
        return (int)16787696L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_15678 16787697
     * }
     */
    public static int XK_braille_dots_15678() {
        return (int)16787697L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_25678 16787698
     * }
     */
    public static int XK_braille_dots_25678() {
        return (int)16787698L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_125678 16787699
     * }
     */
    public static int XK_braille_dots_125678() {
        return (int)16787699L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_35678 16787700
     * }
     */
    public static int XK_braille_dots_35678() {
        return (int)16787700L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_135678 16787701
     * }
     */
    public static int XK_braille_dots_135678() {
        return (int)16787701L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_235678 16787702
     * }
     */
    public static int XK_braille_dots_235678() {
        return (int)16787702L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1235678 16787703
     * }
     */
    public static int XK_braille_dots_1235678() {
        return (int)16787703L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_45678 16787704
     * }
     */
    public static int XK_braille_dots_45678() {
        return (int)16787704L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_145678 16787705
     * }
     */
    public static int XK_braille_dots_145678() {
        return (int)16787705L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_245678 16787706
     * }
     */
    public static int XK_braille_dots_245678() {
        return (int)16787706L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1245678 16787707
     * }
     */
    public static int XK_braille_dots_1245678() {
        return (int)16787707L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_345678 16787708
     * }
     */
    public static int XK_braille_dots_345678() {
        return (int)16787708L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_1345678 16787709
     * }
     */
    public static int XK_braille_dots_1345678() {
        return (int)16787709L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_2345678 16787710
     * }
     */
    public static int XK_braille_dots_2345678() {
        return (int)16787710L;
    }
    /**
     * {@snippet :
     * #define XK_braille_dots_12345678 16787711
     * }
     */
    public static int XK_braille_dots_12345678() {
        return (int)16787711L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ng 16780674
     * }
     */
    public static int XK_Sinh_ng() {
        return (int)16780674L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_h2 16780675
     * }
     */
    public static int XK_Sinh_h2() {
        return (int)16780675L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_a 16780677
     * }
     */
    public static int XK_Sinh_a() {
        return (int)16780677L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_aa 16780678
     * }
     */
    public static int XK_Sinh_aa() {
        return (int)16780678L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ae 16780679
     * }
     */
    public static int XK_Sinh_ae() {
        return (int)16780679L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_aee 16780680
     * }
     */
    public static int XK_Sinh_aee() {
        return (int)16780680L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_i 16780681
     * }
     */
    public static int XK_Sinh_i() {
        return (int)16780681L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ii 16780682
     * }
     */
    public static int XK_Sinh_ii() {
        return (int)16780682L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_u 16780683
     * }
     */
    public static int XK_Sinh_u() {
        return (int)16780683L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_uu 16780684
     * }
     */
    public static int XK_Sinh_uu() {
        return (int)16780684L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ri 16780685
     * }
     */
    public static int XK_Sinh_ri() {
        return (int)16780685L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_rii 16780686
     * }
     */
    public static int XK_Sinh_rii() {
        return (int)16780686L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_lu 16780687
     * }
     */
    public static int XK_Sinh_lu() {
        return (int)16780687L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_luu 16780688
     * }
     */
    public static int XK_Sinh_luu() {
        return (int)16780688L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_e 16780689
     * }
     */
    public static int XK_Sinh_e() {
        return (int)16780689L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ee 16780690
     * }
     */
    public static int XK_Sinh_ee() {
        return (int)16780690L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ai 16780691
     * }
     */
    public static int XK_Sinh_ai() {
        return (int)16780691L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_o 16780692
     * }
     */
    public static int XK_Sinh_o() {
        return (int)16780692L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_oo 16780693
     * }
     */
    public static int XK_Sinh_oo() {
        return (int)16780693L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_au 16780694
     * }
     */
    public static int XK_Sinh_au() {
        return (int)16780694L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ka 16780698
     * }
     */
    public static int XK_Sinh_ka() {
        return (int)16780698L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_kha 16780699
     * }
     */
    public static int XK_Sinh_kha() {
        return (int)16780699L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ga 16780700
     * }
     */
    public static int XK_Sinh_ga() {
        return (int)16780700L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_gha 16780701
     * }
     */
    public static int XK_Sinh_gha() {
        return (int)16780701L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ng2 16780702
     * }
     */
    public static int XK_Sinh_ng2() {
        return (int)16780702L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_nga 16780703
     * }
     */
    public static int XK_Sinh_nga() {
        return (int)16780703L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ca 16780704
     * }
     */
    public static int XK_Sinh_ca() {
        return (int)16780704L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_cha 16780705
     * }
     */
    public static int XK_Sinh_cha() {
        return (int)16780705L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ja 16780706
     * }
     */
    public static int XK_Sinh_ja() {
        return (int)16780706L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_jha 16780707
     * }
     */
    public static int XK_Sinh_jha() {
        return (int)16780707L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_nya 16780708
     * }
     */
    public static int XK_Sinh_nya() {
        return (int)16780708L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_jnya 16780709
     * }
     */
    public static int XK_Sinh_jnya() {
        return (int)16780709L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_nja 16780710
     * }
     */
    public static int XK_Sinh_nja() {
        return (int)16780710L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_tta 16780711
     * }
     */
    public static int XK_Sinh_tta() {
        return (int)16780711L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ttha 16780712
     * }
     */
    public static int XK_Sinh_ttha() {
        return (int)16780712L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_dda 16780713
     * }
     */
    public static int XK_Sinh_dda() {
        return (int)16780713L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ddha 16780714
     * }
     */
    public static int XK_Sinh_ddha() {
        return (int)16780714L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_nna 16780715
     * }
     */
    public static int XK_Sinh_nna() {
        return (int)16780715L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ndda 16780716
     * }
     */
    public static int XK_Sinh_ndda() {
        return (int)16780716L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_tha 16780717
     * }
     */
    public static int XK_Sinh_tha() {
        return (int)16780717L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_thha 16780718
     * }
     */
    public static int XK_Sinh_thha() {
        return (int)16780718L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_dha 16780719
     * }
     */
    public static int XK_Sinh_dha() {
        return (int)16780719L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_dhha 16780720
     * }
     */
    public static int XK_Sinh_dhha() {
        return (int)16780720L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_na 16780721
     * }
     */
    public static int XK_Sinh_na() {
        return (int)16780721L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ndha 16780723
     * }
     */
    public static int XK_Sinh_ndha() {
        return (int)16780723L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_pa 16780724
     * }
     */
    public static int XK_Sinh_pa() {
        return (int)16780724L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_pha 16780725
     * }
     */
    public static int XK_Sinh_pha() {
        return (int)16780725L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ba 16780726
     * }
     */
    public static int XK_Sinh_ba() {
        return (int)16780726L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_bha 16780727
     * }
     */
    public static int XK_Sinh_bha() {
        return (int)16780727L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ma 16780728
     * }
     */
    public static int XK_Sinh_ma() {
        return (int)16780728L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_mba 16780729
     * }
     */
    public static int XK_Sinh_mba() {
        return (int)16780729L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ya 16780730
     * }
     */
    public static int XK_Sinh_ya() {
        return (int)16780730L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ra 16780731
     * }
     */
    public static int XK_Sinh_ra() {
        return (int)16780731L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_la 16780733
     * }
     */
    public static int XK_Sinh_la() {
        return (int)16780733L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_va 16780736
     * }
     */
    public static int XK_Sinh_va() {
        return (int)16780736L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_sha 16780737
     * }
     */
    public static int XK_Sinh_sha() {
        return (int)16780737L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ssha 16780738
     * }
     */
    public static int XK_Sinh_ssha() {
        return (int)16780738L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_sa 16780739
     * }
     */
    public static int XK_Sinh_sa() {
        return (int)16780739L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ha 16780740
     * }
     */
    public static int XK_Sinh_ha() {
        return (int)16780740L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_lla 16780741
     * }
     */
    public static int XK_Sinh_lla() {
        return (int)16780741L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_fa 16780742
     * }
     */
    public static int XK_Sinh_fa() {
        return (int)16780742L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_al 16780746
     * }
     */
    public static int XK_Sinh_al() {
        return (int)16780746L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_aa2 16780751
     * }
     */
    public static int XK_Sinh_aa2() {
        return (int)16780751L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ae2 16780752
     * }
     */
    public static int XK_Sinh_ae2() {
        return (int)16780752L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_aee2 16780753
     * }
     */
    public static int XK_Sinh_aee2() {
        return (int)16780753L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_i2 16780754
     * }
     */
    public static int XK_Sinh_i2() {
        return (int)16780754L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ii2 16780755
     * }
     */
    public static int XK_Sinh_ii2() {
        return (int)16780755L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_u2 16780756
     * }
     */
    public static int XK_Sinh_u2() {
        return (int)16780756L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_uu2 16780758
     * }
     */
    public static int XK_Sinh_uu2() {
        return (int)16780758L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ru2 16780760
     * }
     */
    public static int XK_Sinh_ru2() {
        return (int)16780760L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_e2 16780761
     * }
     */
    public static int XK_Sinh_e2() {
        return (int)16780761L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ee2 16780762
     * }
     */
    public static int XK_Sinh_ee2() {
        return (int)16780762L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ai2 16780763
     * }
     */
    public static int XK_Sinh_ai2() {
        return (int)16780763L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_o2 16780764
     * }
     */
    public static int XK_Sinh_o2() {
        return (int)16780764L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_oo2 16780765
     * }
     */
    public static int XK_Sinh_oo2() {
        return (int)16780765L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_au2 16780766
     * }
     */
    public static int XK_Sinh_au2() {
        return (int)16780766L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_lu2 16780767
     * }
     */
    public static int XK_Sinh_lu2() {
        return (int)16780767L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_ruu2 16780786
     * }
     */
    public static int XK_Sinh_ruu2() {
        return (int)16780786L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_luu2 16780787
     * }
     */
    public static int XK_Sinh_luu2() {
        return (int)16780787L;
    }
    /**
     * {@snippet :
     * #define XK_Sinh_kunddaliya 16780788
     * }
     */
    public static int XK_Sinh_kunddaliya() {
        return (int)16780788L;
    }
    /**
     * {@snippet :
     * #define NoValue 0
     * }
     */
    public static int NoValue() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define XValue 1
     * }
     */
    public static int XValue() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define YValue 2
     * }
     */
    public static int YValue() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WidthValue 4
     * }
     */
    public static int WidthValue() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define HeightValue 8
     * }
     */
    public static int HeightValue() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define AllValues 15
     * }
     */
    public static int AllValues() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define XNegative 16
     * }
     */
    public static int XNegative() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define YNegative 32
     * }
     */
    public static int YNegative() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define WithdrawnState 0
     * }
     */
    public static int WithdrawnState() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NormalState 1
     * }
     */
    public static int NormalState() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IconicState 3
     * }
     */
    public static int IconicState() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define DontCareState 0
     * }
     */
    public static int DontCareState() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ZoomState 2
     * }
     */
    public static int ZoomState() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define InactiveState 4
     * }
     */
    public static int InactiveState() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RectangleOut 0
     * }
     */
    public static int RectangleOut() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RectangleIn 1
     * }
     */
    public static int RectangleIn() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RectanglePart 2
     * }
     */
    public static int RectanglePart() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define VisualNoMask 0
     * }
     */
    public static int VisualNoMask() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define VisualIDMask 1
     * }
     */
    public static int VisualIDMask() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define VisualScreenMask 2
     * }
     */
    public static int VisualScreenMask() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define VisualDepthMask 4
     * }
     */
    public static int VisualDepthMask() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define VisualClassMask 8
     * }
     */
    public static int VisualClassMask() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define VisualRedMaskMask 16
     * }
     */
    public static int VisualRedMaskMask() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define VisualGreenMaskMask 32
     * }
     */
    public static int VisualGreenMaskMask() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define VisualBlueMaskMask 64
     * }
     */
    public static int VisualBlueMaskMask() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define VisualColormapSizeMask 128
     * }
     */
    public static int VisualColormapSizeMask() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define VisualBitsPerRGBMask 256
     * }
     */
    public static int VisualBitsPerRGBMask() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define VisualAllMask 511
     * }
     */
    public static int VisualAllMask() {
        return (int)511L;
    }
    /**
     * {@snippet :
     * #define BitmapSuccess 0
     * }
     */
    public static int BitmapSuccess() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define BitmapOpenFailed 1
     * }
     */
    public static int BitmapOpenFailed() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define BitmapFileInvalid 2
     * }
     */
    public static int BitmapFileInvalid() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define BitmapNoMemory 3
     * }
     */
    public static int BitmapNoMemory() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define XCSUCCESS 0
     * }
     */
    public static int XCSUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define XCNOMEM 1
     * }
     */
    public static int XCNOMEM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define XCNOENT 2
     * }
     */
    public static int XCNOENT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final AddressLayout __timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final AddressLayout __caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final AddressLayout caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final AddressLayout timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = JAVA_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$4,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$6,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timespec* __timeout, const __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long XID;
     * }
     */
    public static final OfLong XID = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Mask;
     * }
     */
    public static final OfLong Mask = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Atom;
     * }
     */
    public static final OfLong Atom = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long VisualID;
     * }
     */
    public static final OfLong VisualID = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Time;
     * }
     */
    public static final OfLong Time = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Window;
     * }
     */
    public static final OfLong Window = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Drawable;
     * }
     */
    public static final OfLong Drawable = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Font;
     * }
     */
    public static final OfLong Font = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Pixmap;
     * }
     */
    public static final OfLong Pixmap = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Cursor;
     * }
     */
    public static final OfLong Cursor = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long Colormap;
     * }
     */
    public static final OfLong Colormap = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long GContext;
     * }
     */
    public static final OfLong GContext = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long KeySym;
     * }
     */
    public static final OfLong KeySym = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char KeyCode;
     * }
     */
    public static final OfByte KeyCode = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    public static MethodHandle _Xmblen$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"_Xmblen");
    }
    /**
     * {@snippet :
     * int _Xmblen(char* str, int len);
     * }
     */
    public static int _Xmblen(MemorySegment str, int len) {
        var mh$ = _Xmblen$MH();
        try {
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef char* XPointer;
     * }
     */
    public static final AddressLayout XPointer = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _XGC* GC;
     * }
     */
    public static final AddressLayout GC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct * _XPrivDisplay;
     * }
     */
    public static final AddressLayout _XPrivDisplay = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _XOM* XOM;
     * }
     */
    public static final AddressLayout XOM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _XOC* XOC;
     * }
     */
    public static final AddressLayout XOC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _XOC* XFontSet;
     * }
     */
    public static final AddressLayout XFontSet = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum .XOMOrientation_LTR_TTB = 0;
     * }
     */
    public static int XOMOrientation_LTR_TTB() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .XOMOrientation_RTL_TTB = 1;
     * }
     */
    public static int XOMOrientation_RTL_TTB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .XOMOrientation_TTB_LTR = 2;
     * }
     */
    public static int XOMOrientation_TTB_LTR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .XOMOrientation_TTB_RTL = 3;
     * }
     */
    public static int XOMOrientation_TTB_RTL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .XOMOrientation_Context = 4;
     * }
     */
    public static int XOMOrientation_Context() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef struct _XIM* XIM;
     * }
     */
    public static final AddressLayout XIM = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _XIC* XIC;
     * }
     */
    public static final AddressLayout XIC = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long XIMStyle;
     * }
     */
    public static final OfLong XIMStyle = JAVA_LONG;
    /**
     * {@snippet :
     * typedef void* XVaNestedList;
     * }
     */
    public static final AddressLayout XVaNestedList = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long XIMFeedback;
     * }
     */
    public static final OfLong XIMFeedback = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long XIMPreeditState;
     * }
     */
    public static final OfLong XIMPreeditState = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long XIMResetState;
     * }
     */
    public static final OfLong XIMResetState = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long XIMStringConversionFeedback;
     * }
     */
    public static final OfLong XIMStringConversionFeedback = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short XIMStringConversionPosition;
     * }
     */
    public static final OfShort XIMStringConversionPosition = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short XIMStringConversionType;
     * }
     */
    public static final OfShort XIMStringConversionType = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short XIMStringConversionOperation;
     * }
     */
    public static final OfShort XIMStringConversionOperation = JAVA_SHORT;
    /**
     * {@snippet :
     * enum .XIMForwardChar = 0;
     * }
     */
    public static int XIMForwardChar() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .XIMBackwardChar = 1;
     * }
     */
    public static int XIMBackwardChar() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .XIMForwardWord = 2;
     * }
     */
    public static int XIMForwardWord() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .XIMBackwardWord = 3;
     * }
     */
    public static int XIMBackwardWord() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .XIMCaretUp = 4;
     * }
     */
    public static int XIMCaretUp() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .XIMCaretDown = 5;
     * }
     */
    public static int XIMCaretDown() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .XIMNextLine = 6;
     * }
     */
    public static int XIMNextLine() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .XIMPreviousLine = 7;
     * }
     */
    public static int XIMPreviousLine() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .XIMLineStart = 8;
     * }
     */
    public static int XIMLineStart() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .XIMLineEnd = 9;
     * }
     */
    public static int XIMLineEnd() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .XIMAbsolutePosition = 10;
     * }
     */
    public static int XIMAbsolutePosition() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .XIMDontChange = 11;
     * }
     */
    public static int XIMDontChange() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .XIMIsInvisible = 0;
     * }
     */
    public static int XIMIsInvisible() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .XIMIsPrimary = 1;
     * }
     */
    public static int XIMIsPrimary() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .XIMIsSecondary = 2;
     * }
     */
    public static int XIMIsSecondary() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .XIMTextType = 0;
     * }
     */
    public static int XIMTextType() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .XIMBitmapType = 1;
     * }
     */
    public static int XIMBitmapType() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef unsigned long XIMHotKeyState;
     * }
     */
    public static final OfLong XIMHotKeyState = JAVA_LONG;
    public static MemoryLayout _Xdebug$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle _Xdebug$VH() {
        return constants$123.const$1;
    }
    public static MemorySegment _Xdebug$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$123.const$2,"_Xdebug");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int _Xdebug;
     * }
     */
    public static int _Xdebug$get() {
        return (int) constants$123.const$1.get(RuntimeHelper.requireNonNull(constants$123.const$2, "_Xdebug"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int _Xdebug;
     * }
     */
    public static void _Xdebug$set(int x) {
        constants$123.const$1.set(RuntimeHelper.requireNonNull(constants$123.const$2, "_Xdebug"), x);
    }
    public static MethodHandle XLoadQueryFont$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$4,"XLoadQueryFont");
    }
    /**
     * {@snippet :
     * XFontStruct* XLoadQueryFont(Display*, char*);
     * }
     */
    public static MemorySegment XLoadQueryFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XLoadQueryFont$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryFont$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$6,"XQueryFont");
    }
    /**
     * {@snippet :
     * XFontStruct* XQueryFont(Display*, XID);
     * }
     */
    public static MemorySegment XQueryFont(MemorySegment x0, long x1) {
        var mh$ = XQueryFont$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetMotionEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$1,"XGetMotionEvents");
    }
    /**
     * {@snippet :
     * XTimeCoord* XGetMotionEvents(Display*, Window, Time, Time, int*);
     * }
     */
    public static MemorySegment XGetMotionEvents(MemorySegment x0, long x1, long x2, long x3, MemorySegment x4) {
        var mh$ = XGetMotionEvents$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteModifiermapEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$3,"XDeleteModifiermapEntry");
    }
    /**
     * {@snippet :
     * XModifierKeymap* XDeleteModifiermapEntry(XModifierKeymap*, KeyCode, int);
     * }
     */
    public static MemorySegment XDeleteModifiermapEntry(MemorySegment x0, byte x1, int x2) {
        var mh$ = XDeleteModifiermapEntry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetModifierMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$5,"XGetModifierMapping");
    }
    /**
     * {@snippet :
     * XModifierKeymap* XGetModifierMapping(Display*);
     * }
     */
    public static MemorySegment XGetModifierMapping(MemorySegment x0) {
        var mh$ = XGetModifierMapping$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInsertModifiermapEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$0,"XInsertModifiermapEntry");
    }
    /**
     * {@snippet :
     * XModifierKeymap* XInsertModifiermapEntry(XModifierKeymap*, KeyCode, int);
     * }
     */
    public static MemorySegment XInsertModifiermapEntry(MemorySegment x0, byte x1, int x2) {
        var mh$ = XInsertModifiermapEntry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNewModifiermap$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$2,"XNewModifiermap");
    }
    /**
     * {@snippet :
     * XModifierKeymap* XNewModifiermap(int);
     * }
     */
    public static MemorySegment XNewModifiermap(int x0) {
        var mh$ = XNewModifiermap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateImage$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$3,"XCreateImage");
    }
    /**
     * {@snippet :
     * XImage* XCreateImage(Display*, Visual*, unsigned int, int, int, char*, unsigned int, unsigned int, int, int);
     * }
     */
    public static MemorySegment XCreateImage(MemorySegment x0, MemorySegment x1, int x2, int x3, int x4, MemorySegment x5, int x6, int x7, int x8, int x9) {
        var mh$ = XCreateImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitImage$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$4,"XInitImage");
    }
    /**
     * {@snippet :
     * int XInitImage(XImage*);
     * }
     */
    public static int XInitImage(MemorySegment x0) {
        var mh$ = XInitImage$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetImage$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$6,"XGetImage");
    }
    /**
     * {@snippet :
     * XImage* XGetImage(Display*, Drawable, int, int, unsigned int, unsigned int, unsigned long, int);
     * }
     */
    public static MemorySegment XGetImage(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, int x7) {
        var mh$ = XGetImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSubImage$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$1,"XGetSubImage");
    }
    /**
     * {@snippet :
     * XImage* XGetSubImage(Display*, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage*, int, int);
     * }
     */
    public static MemorySegment XGetSubImage(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, int x7, MemorySegment x8, int x9, int x10) {
        var mh$ = XGetSubImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$2,"XOpenDisplay");
    }
    /**
     * {@snippet :
     * Display* XOpenDisplay(char*);
     * }
     */
    public static MemorySegment XOpenDisplay(MemorySegment x0) {
        var mh$ = XOpenDisplay$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XrmInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$4,"XrmInitialize");
    }
    /**
     * {@snippet :
     * void XrmInitialize();
     * }
     */
    public static void XrmInitialize() {
        var mh$ = XrmInitialize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$5,"XFetchBytes");
    }
    /**
     * {@snippet :
     * char* XFetchBytes(Display*, int*);
     * }
     */
    public static MemorySegment XFetchBytes(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFetchBytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$1,"XFetchBuffer");
    }
    /**
     * {@snippet :
     * char* XFetchBuffer(Display*, int*, int);
     * }
     */
    public static MemorySegment XFetchBuffer(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XFetchBuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetAtomName$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$2,"XGetAtomName");
    }
    /**
     * {@snippet :
     * char* XGetAtomName(Display*, Atom);
     * }
     */
    public static MemorySegment XGetAtomName(MemorySegment x0, long x1) {
        var mh$ = XGetAtomName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetAtomNames$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$4,"XGetAtomNames");
    }
    /**
     * {@snippet :
     * int XGetAtomNames(Display*, Atom*, int, char**);
     * }
     */
    public static int XGetAtomNames(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = XGetAtomNames$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$6,"XGetDefault");
    }
    /**
     * {@snippet :
     * char* XGetDefault(Display*, char*, char*);
     * }
     */
    public static MemorySegment XGetDefault(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XGetDefault$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayName$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$0,"XDisplayName");
    }
    /**
     * {@snippet :
     * char* XDisplayName(char*);
     * }
     */
    public static MemorySegment XDisplayName(MemorySegment x0) {
        var mh$ = XDisplayName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeysymToString$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$2,"XKeysymToString");
    }
    /**
     * {@snippet :
     * char* XKeysymToString(KeySym);
     * }
     */
    public static MemorySegment XKeysymToString(long x0) {
        var mh$ = XKeysymToString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSynchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$5,"XSynchronize");
    }
    /**
     * {@snippet :
     * int (*XSynchronize(Display*, int))(Display*);
     * }
     */
    public static MemorySegment XSynchronize(MemorySegment x0, int x1) {
        var mh$ = XSynchronize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAfterFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$2,"XSetAfterFunction");
    }
    /**
     * {@snippet :
     * int (*XSetAfterFunction(Display*, int (*)(Display*)))(Display*);
     * }
     */
    public static MemorySegment XSetAfterFunction(MemorySegment x0, MemorySegment x1) {
        var mh$ = XSetAfterFunction$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternAtom$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$4,"XInternAtom");
    }
    /**
     * {@snippet :
     * Atom XInternAtom(Display*, char*, int);
     * }
     */
    public static long XInternAtom(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XInternAtom$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternAtoms$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$6,"XInternAtoms");
    }
    /**
     * {@snippet :
     * int XInternAtoms(Display*, char**, int, int, Atom*);
     * }
     */
    public static int XInternAtoms(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XInternAtoms$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyColormapAndFree$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$1,"XCopyColormapAndFree");
    }
    /**
     * {@snippet :
     * Colormap XCopyColormapAndFree(Display*, Colormap);
     * }
     */
    public static long XCopyColormapAndFree(MemorySegment x0, long x1) {
        var mh$ = XCopyColormapAndFree$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$3,"XCreateColormap");
    }
    /**
     * {@snippet :
     * Colormap XCreateColormap(Display*, Window, Visual*, int);
     * }
     */
    public static long XCreateColormap(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XCreateColormap$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmapCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$5,"XCreatePixmapCursor");
    }
    /**
     * {@snippet :
     * Cursor XCreatePixmapCursor(Display*, Pixmap, Pixmap, XColor*, XColor*, unsigned int, unsigned int);
     * }
     */
    public static long XCreatePixmapCursor(MemorySegment x0, long x1, long x2, MemorySegment x3, MemorySegment x4, int x5, int x6) {
        var mh$ = XCreatePixmapCursor$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateGlyphCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$1,"XCreateGlyphCursor");
    }
    /**
     * {@snippet :
     * Cursor XCreateGlyphCursor(Display*, Font, Font, unsigned int, unsigned int, const XColor*, const XColor*);
     * }
     */
    public static long XCreateGlyphCursor(MemorySegment x0, long x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XCreateGlyphCursor$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateFontCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$3,"XCreateFontCursor");
    }
    /**
     * {@snippet :
     * Cursor XCreateFontCursor(Display*, unsigned int);
     * }
     */
    public static long XCreateFontCursor(MemorySegment x0, int x1) {
        var mh$ = XCreateFontCursor$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLoadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$5,"XLoadFont");
    }
    /**
     * {@snippet :
     * Font XLoadFont(Display*, char*);
     * }
     */
    public static long XLoadFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XLoadFont$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateGC$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$1,"XCreateGC");
    }
    /**
     * {@snippet :
     * GC XCreateGC(Display*, Drawable, unsigned long, XGCValues*);
     * }
     */
    public static MemorySegment XCreateGC(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XCreateGC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGContextFromGC$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$3,"XGContextFromGC");
    }
    /**
     * {@snippet :
     * GContext XGContextFromGC(GC);
     * }
     */
    public static long XGContextFromGC(MemorySegment x0) {
        var mh$ = XGContextFromGC$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFlushGC$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$5,"XFlushGC");
    }
    /**
     * {@snippet :
     * void XFlushGC(Display*, GC);
     * }
     */
    public static void XFlushGC(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFlushGC$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$1,"XCreatePixmap");
    }
    /**
     * {@snippet :
     * Pixmap XCreatePixmap(Display*, Drawable, unsigned int, unsigned int, unsigned int);
     * }
     */
    public static long XCreatePixmap(MemorySegment x0, long x1, int x2, int x3, int x4) {
        var mh$ = XCreatePixmap$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateBitmapFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$3,"XCreateBitmapFromData");
    }
    /**
     * {@snippet :
     * Pixmap XCreateBitmapFromData(Display*, Drawable, char*, unsigned int, unsigned int);
     * }
     */
    public static long XCreateBitmapFromData(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XCreateBitmapFromData$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmapFromBitmapData$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$5,"XCreatePixmapFromBitmapData");
    }
    /**
     * {@snippet :
     * Pixmap XCreatePixmapFromBitmapData(Display*, Drawable, char*, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int);
     * }
     */
    public static long XCreatePixmapFromBitmapData(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, long x5, long x6, int x7) {
        var mh$ = XCreatePixmapFromBitmapData$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateSimpleWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$1,"XCreateSimpleWindow");
    }
    /**
     * {@snippet :
     * Window XCreateSimpleWindow(Display*, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long);
     * }
     */
    public static long XCreateSimpleWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6, long x7, long x8) {
        var mh$ = XCreateSimpleWindow$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSelectionOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$2,"XGetSelectionOwner");
    }
    /**
     * {@snippet :
     * Window XGetSelectionOwner(Display*, Atom);
     * }
     */
    public static long XGetSelectionOwner(MemorySegment x0, long x1) {
        var mh$ = XGetSelectionOwner$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$4,"XCreateWindow");
    }
    /**
     * {@snippet :
     * Window XCreateWindow(Display*, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual*, unsigned long, XSetWindowAttributes*);
     * }
     */
    public static long XCreateWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, MemorySegment x9, long x10, MemorySegment x11) {
        var mh$ = XCreateWindow$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListInstalledColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$6,"XListInstalledColormaps");
    }
    /**
     * {@snippet :
     * Colormap* XListInstalledColormaps(Display*, Window, int*);
     * }
     */
    public static MemorySegment XListInstalledColormaps(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XListInstalledColormaps$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListFonts$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$1,"XListFonts");
    }
    /**
     * {@snippet :
     * char** XListFonts(Display*, char*, int, int*);
     * }
     */
    public static MemorySegment XListFonts(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = XListFonts$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListFontsWithInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$3,"XListFontsWithInfo");
    }
    /**
     * {@snippet :
     * char** XListFontsWithInfo(Display*, char*, int, int*, XFontStruct**);
     * }
     */
    public static MemorySegment XListFontsWithInfo(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XListFontsWithInfo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$4,"XGetFontPath");
    }
    /**
     * {@snippet :
     * char** XGetFontPath(Display*, int*);
     * }
     */
    public static MemorySegment XGetFontPath(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetFontPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListExtensions$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$5,"XListExtensions");
    }
    /**
     * {@snippet :
     * char** XListExtensions(Display*, int*);
     * }
     */
    public static MemorySegment XListExtensions(MemorySegment x0, MemorySegment x1) {
        var mh$ = XListExtensions$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$0,"XListProperties");
    }
    /**
     * {@snippet :
     * Atom* XListProperties(Display*, Window, int*);
     * }
     */
    public static MemorySegment XListProperties(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XListProperties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$1,"XListHosts");
    }
    /**
     * {@snippet :
     * XHostAddress* XListHosts(Display*, int*, int*);
     * }
     */
    public static MemorySegment XListHosts(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XListHosts$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeycodeToKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$3,"XKeycodeToKeysym");
    }
    /**
     * {@snippet :
     * KeySym XKeycodeToKeysym(Display*, KeyCode, int);
     * }
     */
    public static long XKeycodeToKeysym(MemorySegment x0, byte x1, int x2) {
        var mh$ = XKeycodeToKeysym$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$4,"XLookupKeysym");
    }
    /**
     * {@snippet :
     * KeySym XLookupKeysym(XKeyEvent*, int);
     * }
     */
    public static long XLookupKeysym(MemorySegment x0, int x1) {
        var mh$ = XLookupKeysym$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$6,"XGetKeyboardMapping");
    }
    /**
     * {@snippet :
     * KeySym* XGetKeyboardMapping(Display*, KeyCode, int, int*);
     * }
     */
    public static MemorySegment XGetKeyboardMapping(MemorySegment x0, byte x1, int x2, MemorySegment x3) {
        var mh$ = XGetKeyboardMapping$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStringToKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$0,"XStringToKeysym");
    }
    /**
     * {@snippet :
     * KeySym XStringToKeysym(char*);
     * }
     */
    public static long XStringToKeysym(MemorySegment x0) {
        var mh$ = XStringToKeysym$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaxRequestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$1,"XMaxRequestSize");
    }
    /**
     * {@snippet :
     * long XMaxRequestSize(Display*);
     * }
     */
    public static long XMaxRequestSize(MemorySegment x0) {
        var mh$ = XMaxRequestSize$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XExtendedMaxRequestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$2,"XExtendedMaxRequestSize");
    }
    /**
     * {@snippet :
     * long XExtendedMaxRequestSize(Display*);
     * }
     */
    public static long XExtendedMaxRequestSize(MemorySegment x0) {
        var mh$ = XExtendedMaxRequestSize$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResourceManagerString$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$3,"XResourceManagerString");
    }
    /**
     * {@snippet :
     * char* XResourceManagerString(Display*);
     * }
     */
    public static MemorySegment XResourceManagerString(MemorySegment x0) {
        var mh$ = XResourceManagerString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenResourceString$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$4,"XScreenResourceString");
    }
    /**
     * {@snippet :
     * char* XScreenResourceString(Screen*);
     * }
     */
    public static MemorySegment XScreenResourceString(MemorySegment x0) {
        var mh$ = XScreenResourceString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayMotionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$5,"XDisplayMotionBufferSize");
    }
    /**
     * {@snippet :
     * unsigned long XDisplayMotionBufferSize(Display*);
     * }
     */
    public static long XDisplayMotionBufferSize(MemorySegment x0) {
        var mh$ = XDisplayMotionBufferSize$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVisualIDFromVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$0,"XVisualIDFromVisual");
    }
    /**
     * {@snippet :
     * VisualID XVisualIDFromVisual(Visual*);
     * }
     */
    public static long XVisualIDFromVisual(MemorySegment x0) {
        var mh$ = XVisualIDFromVisual$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitThreads$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$2,"XInitThreads");
    }
    /**
     * {@snippet :
     * int XInitThreads();
     * }
     */
    public static int XInitThreads() {
        var mh$ = XInitThreads$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLockDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$4,"XLockDisplay");
    }
    /**
     * {@snippet :
     * void XLockDisplay(Display*);
     * }
     */
    public static void XLockDisplay(MemorySegment x0) {
        var mh$ = XLockDisplay$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnlockDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$5,"XUnlockDisplay");
    }
    /**
     * {@snippet :
     * void XUnlockDisplay(Display*);
     * }
     */
    public static void XUnlockDisplay(MemorySegment x0) {
        var mh$ = XUnlockDisplay$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$0,"XInitExtension");
    }
    /**
     * {@snippet :
     * XExtCodes* XInitExtension(Display*, char*);
     * }
     */
    public static MemorySegment XInitExtension(MemorySegment x0, MemorySegment x1) {
        var mh$ = XInitExtension$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$1,"XAddExtension");
    }
    /**
     * {@snippet :
     * XExtCodes* XAddExtension(Display*);
     * }
     */
    public static MemorySegment XAddExtension(MemorySegment x0) {
        var mh$ = XAddExtension$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFindOnExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$2,"XFindOnExtensionList");
    }
    /**
     * {@snippet :
     * XExtData* XFindOnExtensionList(XExtData**, int);
     * }
     */
    public static MemorySegment XFindOnExtensionList(MemorySegment x0, int x1) {
        var mh$ = XFindOnExtensionList$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEHeadOfExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$4,"XEHeadOfExtensionList");
    }
    /**
     * {@snippet :
     * XExtData** XEHeadOfExtensionList(XEDataObject);
     * }
     */
    public static MemorySegment XEHeadOfExtensionList(MemorySegment x0) {
        var mh$ = XEHeadOfExtensionList$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRootWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$5,"XRootWindow");
    }
    /**
     * {@snippet :
     * Window XRootWindow(Display*, int);
     * }
     */
    public static long XRootWindow(MemorySegment x0, int x1) {
        var mh$ = XRootWindow$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultRootWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$0,"XDefaultRootWindow");
    }
    /**
     * {@snippet :
     * Window XDefaultRootWindow(Display*);
     * }
     */
    public static long XDefaultRootWindow(MemorySegment x0) {
        var mh$ = XDefaultRootWindow$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRootWindowOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$1,"XRootWindowOfScreen");
    }
    /**
     * {@snippet :
     * Window XRootWindowOfScreen(Screen*);
     * }
     */
    public static long XRootWindowOfScreen(MemorySegment x0) {
        var mh$ = XRootWindowOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$2,"XDefaultVisual");
    }
    /**
     * {@snippet :
     * Visual* XDefaultVisual(Display*, int);
     * }
     */
    public static MemorySegment XDefaultVisual(MemorySegment x0, int x1) {
        var mh$ = XDefaultVisual$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultVisualOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$3,"XDefaultVisualOfScreen");
    }
    /**
     * {@snippet :
     * Visual* XDefaultVisualOfScreen(Screen*);
     * }
     */
    public static MemorySegment XDefaultVisualOfScreen(MemorySegment x0) {
        var mh$ = XDefaultVisualOfScreen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultGC$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$4,"XDefaultGC");
    }
    /**
     * {@snippet :
     * GC XDefaultGC(Display*, int);
     * }
     */
    public static MemorySegment XDefaultGC(MemorySegment x0, int x1) {
        var mh$ = XDefaultGC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultGCOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$5,"XDefaultGCOfScreen");
    }
    /**
     * {@snippet :
     * GC XDefaultGCOfScreen(Screen*);
     * }
     */
    public static MemorySegment XDefaultGCOfScreen(MemorySegment x0) {
        var mh$ = XDefaultGCOfScreen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBlackPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$0,"XBlackPixel");
    }
    /**
     * {@snippet :
     * unsigned long XBlackPixel(Display*, int);
     * }
     */
    public static long XBlackPixel(MemorySegment x0, int x1) {
        var mh$ = XBlackPixel$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWhitePixel$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$1,"XWhitePixel");
    }
    /**
     * {@snippet :
     * unsigned long XWhitePixel(Display*, int);
     * }
     */
    public static long XWhitePixel(MemorySegment x0, int x1) {
        var mh$ = XWhitePixel$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$3,"XAllPlanes");
    }
    /**
     * {@snippet :
     * unsigned long XAllPlanes();
     * }
     */
    public static long XAllPlanes() {
        var mh$ = XAllPlanes$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBlackPixelOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$4,"XBlackPixelOfScreen");
    }
    /**
     * {@snippet :
     * unsigned long XBlackPixelOfScreen(Screen*);
     * }
     */
    public static long XBlackPixelOfScreen(MemorySegment x0) {
        var mh$ = XBlackPixelOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWhitePixelOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$5,"XWhitePixelOfScreen");
    }
    /**
     * {@snippet :
     * unsigned long XWhitePixelOfScreen(Screen*);
     * }
     */
    public static long XWhitePixelOfScreen(MemorySegment x0) {
        var mh$ = XWhitePixelOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNextRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$0,"XNextRequest");
    }
    /**
     * {@snippet :
     * unsigned long XNextRequest(Display*);
     * }
     */
    public static long XNextRequest(MemorySegment x0) {
        var mh$ = XNextRequest$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLastKnownRequestProcessed$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$1,"XLastKnownRequestProcessed");
    }
    /**
     * {@snippet :
     * unsigned long XLastKnownRequestProcessed(Display*);
     * }
     */
    public static long XLastKnownRequestProcessed(MemorySegment x0) {
        var mh$ = XLastKnownRequestProcessed$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XServerVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$2,"XServerVendor");
    }
    /**
     * {@snippet :
     * char* XServerVendor(Display*);
     * }
     */
    public static MemorySegment XServerVendor(MemorySegment x0) {
        var mh$ = XServerVendor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayString$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$3,"XDisplayString");
    }
    /**
     * {@snippet :
     * char* XDisplayString(Display*);
     * }
     */
    public static MemorySegment XDisplayString(MemorySegment x0) {
        var mh$ = XDisplayString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$4,"XDefaultColormap");
    }
    /**
     * {@snippet :
     * Colormap XDefaultColormap(Display*, int);
     * }
     */
    public static long XDefaultColormap(MemorySegment x0, int x1) {
        var mh$ = XDefaultColormap$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultColormapOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$5,"XDefaultColormapOfScreen");
    }
    /**
     * {@snippet :
     * Colormap XDefaultColormapOfScreen(Screen*);
     * }
     */
    public static long XDefaultColormapOfScreen(MemorySegment x0) {
        var mh$ = XDefaultColormapOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$0,"XDisplayOfScreen");
    }
    /**
     * {@snippet :
     * Display* XDisplayOfScreen(Screen*);
     * }
     */
    public static MemorySegment XDisplayOfScreen(MemorySegment x0) {
        var mh$ = XDisplayOfScreen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenOfDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$1,"XScreenOfDisplay");
    }
    /**
     * {@snippet :
     * Screen* XScreenOfDisplay(Display*, int);
     * }
     */
    public static MemorySegment XScreenOfDisplay(MemorySegment x0, int x1) {
        var mh$ = XScreenOfDisplay$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultScreenOfDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$2,"XDefaultScreenOfDisplay");
    }
    /**
     * {@snippet :
     * Screen* XDefaultScreenOfDisplay(Display*);
     * }
     */
    public static MemorySegment XDefaultScreenOfDisplay(MemorySegment x0) {
        var mh$ = XDefaultScreenOfDisplay$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEventMaskOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$3,"XEventMaskOfScreen");
    }
    /**
     * {@snippet :
     * long XEventMaskOfScreen(Screen*);
     * }
     */
    public static long XEventMaskOfScreen(MemorySegment x0) {
        var mh$ = XEventMaskOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenNumberOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$4,"XScreenNumberOfScreen");
    }
    /**
     * {@snippet :
     * int XScreenNumberOfScreen(Screen*);
     * }
     */
    public static int XScreenNumberOfScreen(MemorySegment x0) {
        var mh$ = XScreenNumberOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$2,"XSetErrorHandler");
    }
    /**
     * {@snippet :
     * XErrorHandler XSetErrorHandler(XErrorHandler);
     * }
     */
    public static MemorySegment XSetErrorHandler(MemorySegment x0) {
        var mh$ = XSetErrorHandler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIOErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$4,"XSetIOErrorHandler");
    }
    /**
     * {@snippet :
     * XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler);
     * }
     */
    public static MemorySegment XSetIOErrorHandler(MemorySegment x0) {
        var mh$ = XSetIOErrorHandler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIOErrorExitHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$1,"XSetIOErrorExitHandler");
    }
    /**
     * {@snippet :
     * void XSetIOErrorExitHandler(Display*, XIOErrorExitHandler, void*);
     * }
     */
    public static void XSetIOErrorExitHandler(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSetIOErrorExitHandler$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListPixmapFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$2,"XListPixmapFormats");
    }
    /**
     * {@snippet :
     * XPixmapFormatValues* XListPixmapFormats(Display*, int*);
     * }
     */
    public static MemorySegment XListPixmapFormats(MemorySegment x0, MemorySegment x1) {
        var mh$ = XListPixmapFormats$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListDepths$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$4,"XListDepths");
    }
    /**
     * {@snippet :
     * int* XListDepths(Display*, int, int*);
     * }
     */
    public static MemorySegment XListDepths(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XListDepths$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReconfigureWMWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$6,"XReconfigureWMWindow");
    }
    /**
     * {@snippet :
     * int XReconfigureWMWindow(Display*, Window, int, unsigned int, XWindowChanges*);
     * }
     */
    public static int XReconfigureWMWindow(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XReconfigureWMWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMProtocols$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$1,"XGetWMProtocols");
    }
    /**
     * {@snippet :
     * int XGetWMProtocols(Display*, Window, Atom**, int*);
     * }
     */
    public static int XGetWMProtocols(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMProtocols$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMProtocols$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$3,"XSetWMProtocols");
    }
    /**
     * {@snippet :
     * int XSetWMProtocols(Display*, Window, Atom*, int);
     * }
     */
    public static int XSetWMProtocols(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetWMProtocols$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIconifyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$5,"XIconifyWindow");
    }
    /**
     * {@snippet :
     * int XIconifyWindow(Display*, Window, int);
     * }
     */
    public static int XIconifyWindow(MemorySegment x0, long x1, int x2) {
        var mh$ = XIconifyWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWithdrawWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$0,"XWithdrawWindow");
    }
    /**
     * {@snippet :
     * int XWithdrawWindow(Display*, Window, int);
     * }
     */
    public static int XWithdrawWindow(MemorySegment x0, long x1, int x2) {
        var mh$ = XWithdrawWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetCommand$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$1,"XGetCommand");
    }
    /**
     * {@snippet :
     * int XGetCommand(Display*, Window, char***, int*);
     * }
     */
    public static int XGetCommand(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetCommand$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMColormapWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$2,"XGetWMColormapWindows");
    }
    /**
     * {@snippet :
     * int XGetWMColormapWindows(Display*, Window, Window**, int*);
     * }
     */
    public static int XGetWMColormapWindows(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMColormapWindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMColormapWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$3,"XSetWMColormapWindows");
    }
    /**
     * {@snippet :
     * int XSetWMColormapWindows(Display*, Window, Window*, int);
     * }
     */
    public static int XSetWMColormapWindows(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetWMColormapWindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$4,"XFreeStringList");
    }
    /**
     * {@snippet :
     * void XFreeStringList(char**);
     * }
     */
    public static void XFreeStringList(MemorySegment x0) {
        var mh$ = XFreeStringList$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTransientForHint$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$6,"XSetTransientForHint");
    }
    /**
     * {@snippet :
     * int XSetTransientForHint(Display*, Window, Window);
     * }
     */
    public static int XSetTransientForHint(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetTransientForHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XActivateScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$0,"XActivateScreenSaver");
    }
    /**
     * {@snippet :
     * int XActivateScreenSaver(Display*);
     * }
     */
    public static int XActivateScreenSaver(MemorySegment x0) {
        var mh$ = XActivateScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddHost$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$1,"XAddHost");
    }
    /**
     * {@snippet :
     * int XAddHost(Display*, XHostAddress*);
     * }
     */
    public static int XAddHost(MemorySegment x0, MemorySegment x1) {
        var mh$ = XAddHost$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$3,"XAddHosts");
    }
    /**
     * {@snippet :
     * int XAddHosts(Display*, XHostAddress*, int);
     * }
     */
    public static int XAddHosts(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XAddHosts$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddToExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$4,"XAddToExtensionList");
    }
    /**
     * {@snippet :
     * int XAddToExtensionList(struct _XExtData**, XExtData*);
     * }
     */
    public static int XAddToExtensionList(MemorySegment x0, MemorySegment x1) {
        var mh$ = XAddToExtensionList$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddToSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$5,"XAddToSaveSet");
    }
    /**
     * {@snippet :
     * int XAddToSaveSet(Display*, Window);
     * }
     */
    public static int XAddToSaveSet(MemorySegment x0, long x1) {
        var mh$ = XAddToSaveSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColor$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$1,"XAllocColor");
    }
    /**
     * {@snippet :
     * int XAllocColor(Display*, Colormap, XColor*);
     * }
     */
    public static int XAllocColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XAllocColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColorCells$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$3,"XAllocColorCells");
    }
    /**
     * {@snippet :
     * int XAllocColorCells(Display*, Colormap, int, unsigned long*, unsigned int, unsigned long*, unsigned int);
     * }
     */
    public static int XAllocColorCells(MemorySegment x0, long x1, int x2, MemorySegment x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XAllocColorCells$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColorPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$5,"XAllocColorPlanes");
    }
    /**
     * {@snippet :
     * int XAllocColorPlanes(Display*, Colormap, int, unsigned long*, int, int, int, int, unsigned long*, unsigned long*, unsigned long*);
     * }
     */
    public static int XAllocColorPlanes(MemorySegment x0, long x1, int x2, MemorySegment x3, int x4, int x5, int x6, int x7, MemorySegment x8, MemorySegment x9, MemorySegment x10) {
        var mh$ = XAllocColorPlanes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocNamedColor$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$1,"XAllocNamedColor");
    }
    /**
     * {@snippet :
     * int XAllocNamedColor(Display*, Colormap, char*, XColor*, XColor*);
     * }
     */
    public static int XAllocNamedColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XAllocNamedColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllowEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$3,"XAllowEvents");
    }
    /**
     * {@snippet :
     * int XAllowEvents(Display*, int, Time);
     * }
     */
    public static int XAllowEvents(MemorySegment x0, int x1, long x2) {
        var mh$ = XAllowEvents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAutoRepeatOff$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$4,"XAutoRepeatOff");
    }
    /**
     * {@snippet :
     * int XAutoRepeatOff(Display*);
     * }
     */
    public static int XAutoRepeatOff(MemorySegment x0) {
        var mh$ = XAutoRepeatOff$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAutoRepeatOn$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$5,"XAutoRepeatOn");
    }
    /**
     * {@snippet :
     * int XAutoRepeatOn(Display*);
     * }
     */
    public static int XAutoRepeatOn(MemorySegment x0) {
        var mh$ = XAutoRepeatOn$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBell$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$0,"XBell");
    }
    /**
     * {@snippet :
     * int XBell(Display*, int);
     * }
     */
    public static int XBell(MemorySegment x0, int x1) {
        var mh$ = XBell$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapBitOrder$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$1,"XBitmapBitOrder");
    }
    /**
     * {@snippet :
     * int XBitmapBitOrder(Display*);
     * }
     */
    public static int XBitmapBitOrder(MemorySegment x0) {
        var mh$ = XBitmapBitOrder$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapPad$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$2,"XBitmapPad");
    }
    /**
     * {@snippet :
     * int XBitmapPad(Display*);
     * }
     */
    public static int XBitmapPad(MemorySegment x0) {
        var mh$ = XBitmapPad$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$3,"XBitmapUnit");
    }
    /**
     * {@snippet :
     * int XBitmapUnit(Display*);
     * }
     */
    public static int XBitmapUnit(MemorySegment x0) {
        var mh$ = XBitmapUnit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCellsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$4,"XCellsOfScreen");
    }
    /**
     * {@snippet :
     * int XCellsOfScreen(Screen*);
     * }
     */
    public static int XCellsOfScreen(MemorySegment x0) {
        var mh$ = XCellsOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeActivePointerGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$6,"XChangeActivePointerGrab");
    }
    /**
     * {@snippet :
     * int XChangeActivePointerGrab(Display*, unsigned int, Cursor, Time);
     * }
     */
    public static int XChangeActivePointerGrab(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = XChangeActivePointerGrab$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeGC$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$1,"XChangeGC");
    }
    /**
     * {@snippet :
     * int XChangeGC(Display*, GC, unsigned long, XGCValues*);
     * }
     */
    public static int XChangeGC(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XChangeGC$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeKeyboardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$2,"XChangeKeyboardControl");
    }
    /**
     * {@snippet :
     * int XChangeKeyboardControl(Display*, unsigned long, XKeyboardControl*);
     * }
     */
    public static int XChangeKeyboardControl(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XChangeKeyboardControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$4,"XChangeKeyboardMapping");
    }
    /**
     * {@snippet :
     * int XChangeKeyboardMapping(Display*, int, int, KeySym*, int);
     * }
     */
    public static int XChangeKeyboardMapping(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = XChangeKeyboardMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangePointerControl$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$6,"XChangePointerControl");
    }
    /**
     * {@snippet :
     * int XChangePointerControl(Display*, int, int, int, int, int);
     * }
     */
    public static int XChangePointerControl(MemorySegment x0, int x1, int x2, int x3, int x4, int x5) {
        var mh$ = XChangePointerControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$1,"XChangeProperty");
    }
    /**
     * {@snippet :
     * int XChangeProperty(Display*, Window, Atom, Atom, int, int, unsigned char*, int);
     * }
     */
    public static int XChangeProperty(MemorySegment x0, long x1, long x2, long x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XChangeProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$2,"XChangeSaveSet");
    }
    /**
     * {@snippet :
     * int XChangeSaveSet(Display*, Window, int);
     * }
     */
    public static int XChangeSaveSet(MemorySegment x0, long x1, int x2) {
        var mh$ = XChangeSaveSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$4,"XChangeWindowAttributes");
    }
    /**
     * {@snippet :
     * int XChangeWindowAttributes(Display*, Window, unsigned long, XSetWindowAttributes*);
     * }
     */
    public static int XChangeWindowAttributes(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XChangeWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$1,"XCheckIfEvent");
    }
    /**
     * {@snippet :
     * int XCheckIfEvent(Display*, XEvent*, int (*)(Display*,XEvent*,XPointer), XPointer);
     * }
     */
    public static int XCheckIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XCheckIfEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckMaskEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$2,"XCheckMaskEvent");
    }
    /**
     * {@snippet :
     * int XCheckMaskEvent(Display*, long, XEvent*);
     * }
     */
    public static int XCheckMaskEvent(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XCheckMaskEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckTypedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$4,"XCheckTypedEvent");
    }
    /**
     * {@snippet :
     * int XCheckTypedEvent(Display*, int, XEvent*);
     * }
     */
    public static int XCheckTypedEvent(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XCheckTypedEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckTypedWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$6,"XCheckTypedWindowEvent");
    }
    /**
     * {@snippet :
     * int XCheckTypedWindowEvent(Display*, Window, int, XEvent*);
     * }
     */
    public static int XCheckTypedWindowEvent(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XCheckTypedWindowEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$0,"XCheckWindowEvent");
    }
    /**
     * {@snippet :
     * int XCheckWindowEvent(Display*, Window, long, XEvent*);
     * }
     */
    public static int XCheckWindowEvent(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XCheckWindowEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$1,"XCirculateSubwindows");
    }
    /**
     * {@snippet :
     * int XCirculateSubwindows(Display*, Window, int);
     * }
     */
    public static int XCirculateSubwindows(MemorySegment x0, long x1, int x2) {
        var mh$ = XCirculateSubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindowsDown$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$2,"XCirculateSubwindowsDown");
    }
    /**
     * {@snippet :
     * int XCirculateSubwindowsDown(Display*, Window);
     * }
     */
    public static int XCirculateSubwindowsDown(MemorySegment x0, long x1) {
        var mh$ = XCirculateSubwindowsDown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindowsUp$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$3,"XCirculateSubwindowsUp");
    }
    /**
     * {@snippet :
     * int XCirculateSubwindowsUp(Display*, Window);
     * }
     */
    public static int XCirculateSubwindowsUp(MemorySegment x0, long x1) {
        var mh$ = XCirculateSubwindowsUp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClearArea$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$5,"XClearArea");
    }
    /**
     * {@snippet :
     * int XClearArea(Display*, Window, int, int, unsigned int, unsigned int, int);
     * }
     */
    public static int XClearArea(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6) {
        var mh$ = XClearArea$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClearWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$0,"XClearWindow");
    }
    /**
     * {@snippet :
     * int XClearWindow(Display*, Window);
     * }
     */
    public static int XClearWindow(MemorySegment x0, long x1) {
        var mh$ = XClearWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$1,"XCloseDisplay");
    }
    /**
     * {@snippet :
     * int XCloseDisplay(Display*);
     * }
     */
    public static int XCloseDisplay(MemorySegment x0) {
        var mh$ = XCloseDisplay$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConfigureWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$2,"XConfigureWindow");
    }
    /**
     * {@snippet :
     * int XConfigureWindow(Display*, Window, unsigned int, XWindowChanges*);
     * }
     */
    public static int XConfigureWindow(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XConfigureWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConnectionNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$3,"XConnectionNumber");
    }
    /**
     * {@snippet :
     * int XConnectionNumber(Display*);
     * }
     */
    public static int XConnectionNumber(MemorySegment x0) {
        var mh$ = XConnectionNumber$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConvertSelection$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$5,"XConvertSelection");
    }
    /**
     * {@snippet :
     * int XConvertSelection(Display*, Atom, Atom, Atom, Window, Time);
     * }
     */
    public static int XConvertSelection(MemorySegment x0, long x1, long x2, long x3, long x4, long x5) {
        var mh$ = XConvertSelection$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyArea$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$1,"XCopyArea");
    }
    /**
     * {@snippet :
     * int XCopyArea(Display*, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
     * }
     */
    public static int XCopyArea(MemorySegment x0, long x1, long x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9) {
        var mh$ = XCopyArea$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyGC$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$2,"XCopyGC");
    }
    /**
     * {@snippet :
     * int XCopyGC(Display*, GC, unsigned long, GC);
     * }
     */
    public static int XCopyGC(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XCopyGC$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$4,"XCopyPlane");
    }
    /**
     * {@snippet :
     * int XCopyPlane(Display*, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long);
     * }
     */
    public static int XCopyPlane(MemorySegment x0, long x1, long x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9, long x10) {
        var mh$ = XCopyPlane$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$5,"XDefaultDepth");
    }
    /**
     * {@snippet :
     * int XDefaultDepth(Display*, int);
     * }
     */
    public static int XDefaultDepth(MemorySegment x0, int x1) {
        var mh$ = XDefaultDepth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultDepthOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$0,"XDefaultDepthOfScreen");
    }
    /**
     * {@snippet :
     * int XDefaultDepthOfScreen(Screen*);
     * }
     */
    public static int XDefaultDepthOfScreen(MemorySegment x0) {
        var mh$ = XDefaultDepthOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$1,"XDefaultScreen");
    }
    /**
     * {@snippet :
     * int XDefaultScreen(Display*);
     * }
     */
    public static int XDefaultScreen(MemorySegment x0) {
        var mh$ = XDefaultScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefineCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$2,"XDefineCursor");
    }
    /**
     * {@snippet :
     * int XDefineCursor(Display*, Window, Cursor);
     * }
     */
    public static int XDefineCursor(MemorySegment x0, long x1, long x2) {
        var mh$ = XDefineCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$3,"XDeleteProperty");
    }
    /**
     * {@snippet :
     * int XDeleteProperty(Display*, Window, Atom);
     * }
     */
    public static int XDeleteProperty(MemorySegment x0, long x1, long x2) {
        var mh$ = XDeleteProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$4,"XDestroyWindow");
    }
    /**
     * {@snippet :
     * int XDestroyWindow(Display*, Window);
     * }
     */
    public static int XDestroyWindow(MemorySegment x0, long x1) {
        var mh$ = XDestroyWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroySubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$5,"XDestroySubwindows");
    }
    /**
     * {@snippet :
     * int XDestroySubwindows(Display*, Window);
     * }
     */
    public static int XDestroySubwindows(MemorySegment x0, long x1) {
        var mh$ = XDestroySubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDoesBackingStore$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$0,"XDoesBackingStore");
    }
    /**
     * {@snippet :
     * int XDoesBackingStore(Screen*);
     * }
     */
    public static int XDoesBackingStore(MemorySegment x0) {
        var mh$ = XDoesBackingStore$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDoesSaveUnders$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$1,"XDoesSaveUnders");
    }
    /**
     * {@snippet :
     * int XDoesSaveUnders(Screen*);
     * }
     */
    public static int XDoesSaveUnders(MemorySegment x0) {
        var mh$ = XDoesSaveUnders$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisableAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$2,"XDisableAccessControl");
    }
    /**
     * {@snippet :
     * int XDisableAccessControl(Display*);
     * }
     */
    public static int XDisableAccessControl(MemorySegment x0) {
        var mh$ = XDisableAccessControl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayCells$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$3,"XDisplayCells");
    }
    /**
     * {@snippet :
     * int XDisplayCells(Display*, int);
     * }
     */
    public static int XDisplayCells(MemorySegment x0, int x1) {
        var mh$ = XDisplayCells$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$4,"XDisplayHeight");
    }
    /**
     * {@snippet :
     * int XDisplayHeight(Display*, int);
     * }
     */
    public static int XDisplayHeight(MemorySegment x0, int x1) {
        var mh$ = XDisplayHeight$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayHeightMM$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$5,"XDisplayHeightMM");
    }
    /**
     * {@snippet :
     * int XDisplayHeightMM(Display*, int);
     * }
     */
    public static int XDisplayHeightMM(MemorySegment x0, int x1) {
        var mh$ = XDisplayHeightMM$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayKeycodes$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$0,"XDisplayKeycodes");
    }
    /**
     * {@snippet :
     * int XDisplayKeycodes(Display*, int*, int*);
     * }
     */
    public static int XDisplayKeycodes(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XDisplayKeycodes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$1,"XDisplayPlanes");
    }
    /**
     * {@snippet :
     * int XDisplayPlanes(Display*, int);
     * }
     */
    public static int XDisplayPlanes(MemorySegment x0, int x1) {
        var mh$ = XDisplayPlanes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$2,"XDisplayWidth");
    }
    /**
     * {@snippet :
     * int XDisplayWidth(Display*, int);
     * }
     */
    public static int XDisplayWidth(MemorySegment x0, int x1) {
        var mh$ = XDisplayWidth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayWidthMM$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$3,"XDisplayWidthMM");
    }
    /**
     * {@snippet :
     * int XDisplayWidthMM(Display*, int);
     * }
     */
    public static int XDisplayWidthMM(MemorySegment x0, int x1) {
        var mh$ = XDisplayWidthMM$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawArc$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$5,"XDrawArc");
    }
    /**
     * {@snippet :
     * int XDrawArc(Display*, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
     * }
     */
    public static int XDrawArc(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XDrawArc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawArcs$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$1,"XDrawArcs");
    }
    /**
     * {@snippet :
     * int XDrawArcs(Display*, Drawable, GC, XArc*, int);
     * }
     */
    public static int XDrawArcs(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawArcs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$3,"XDrawImageString");
    }
    /**
     * {@snippet :
     * int XDrawImageString(Display*, Drawable, GC, int, int, char*, int);
     * }
     */
    public static int XDrawImageString(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawImageString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawImageString16$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$4,"XDrawImageString16");
    }
    /**
     * {@snippet :
     * int XDrawImageString16(Display*, Drawable, GC, int, int, const XChar2b*, int);
     * }
     */
    public static int XDrawImageString16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawImageString16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawLine$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$6,"XDrawLine");
    }
    /**
     * {@snippet :
     * int XDrawLine(Display*, Drawable, GC, int, int, int, int);
     * }
     */
    public static int XDrawLine(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XDrawLine$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawLines$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$1,"XDrawLines");
    }
    /**
     * {@snippet :
     * int XDrawLines(Display*, Drawable, GC, XPoint*, int, int);
     * }
     */
    public static int XDrawLines(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5) {
        var mh$ = XDrawLines$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$3,"XDrawPoint");
    }
    /**
     * {@snippet :
     * int XDrawPoint(Display*, Drawable, GC, int, int);
     * }
     */
    public static int XDrawPoint(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XDrawPoint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$4,"XDrawPoints");
    }
    /**
     * {@snippet :
     * int XDrawPoints(Display*, Drawable, GC, XPoint*, int, int);
     * }
     */
    public static int XDrawPoints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5) {
        var mh$ = XDrawPoints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$5,"XDrawRectangle");
    }
    /**
     * {@snippet :
     * int XDrawRectangle(Display*, Drawable, GC, int, int, unsigned int, unsigned int);
     * }
     */
    public static int XDrawRectangle(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XDrawRectangle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$0,"XDrawRectangles");
    }
    /**
     * {@snippet :
     * int XDrawRectangles(Display*, Drawable, GC, XRectangle*, int);
     * }
     */
    public static int XDrawRectangles(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawRectangles$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawSegments$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$1,"XDrawSegments");
    }
    /**
     * {@snippet :
     * int XDrawSegments(Display*, Drawable, GC, XSegment*, int);
     * }
     */
    public static int XDrawSegments(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawSegments$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$2,"XDrawString");
    }
    /**
     * {@snippet :
     * int XDrawString(Display*, Drawable, GC, int, int, char*, int);
     * }
     */
    public static int XDrawString(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawString16$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$3,"XDrawString16");
    }
    /**
     * {@snippet :
     * int XDrawString16(Display*, Drawable, GC, int, int, const XChar2b*, int);
     * }
     */
    public static int XDrawString16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawString16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$4,"XDrawText");
    }
    /**
     * {@snippet :
     * int XDrawText(Display*, Drawable, GC, int, int, XTextItem*, int);
     * }
     */
    public static int XDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawText$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawText16$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$5,"XDrawText16");
    }
    /**
     * {@snippet :
     * int XDrawText16(Display*, Drawable, GC, int, int, XTextItem16*, int);
     * }
     */
    public static int XDrawText16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawText16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEnableAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$0,"XEnableAccessControl");
    }
    /**
     * {@snippet :
     * int XEnableAccessControl(Display*);
     * }
     */
    public static int XEnableAccessControl(MemorySegment x0) {
        var mh$ = XEnableAccessControl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEventsQueued$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$1,"XEventsQueued");
    }
    /**
     * {@snippet :
     * int XEventsQueued(Display*, int);
     * }
     */
    public static int XEventsQueued(MemorySegment x0, int x1) {
        var mh$ = XEventsQueued$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchName$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$2,"XFetchName");
    }
    /**
     * {@snippet :
     * int XFetchName(Display*, Window, char**);
     * }
     */
    public static int XFetchName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XFetchName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillArc$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$3,"XFillArc");
    }
    /**
     * {@snippet :
     * int XFillArc(Display*, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
     * }
     */
    public static int XFillArc(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XFillArc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillArcs$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$4,"XFillArcs");
    }
    /**
     * {@snippet :
     * int XFillArcs(Display*, Drawable, GC, XArc*, int);
     * }
     */
    public static int XFillArcs(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XFillArcs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$6,"XFillPolygon");
    }
    /**
     * {@snippet :
     * int XFillPolygon(Display*, Drawable, GC, XPoint*, int, int, int);
     * }
     */
    public static int XFillPolygon(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6) {
        var mh$ = XFillPolygon$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$0,"XFillRectangle");
    }
    /**
     * {@snippet :
     * int XFillRectangle(Display*, Drawable, GC, int, int, unsigned int, unsigned int);
     * }
     */
    public static int XFillRectangle(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XFillRectangle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$1,"XFillRectangles");
    }
    /**
     * {@snippet :
     * int XFillRectangles(Display*, Drawable, GC, XRectangle*, int);
     * }
     */
    public static int XFillRectangles(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XFillRectangles$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$2,"XFlush");
    }
    /**
     * {@snippet :
     * int XFlush(Display*);
     * }
     */
    public static int XFlush(MemorySegment x0) {
        var mh$ = XFlush$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XForceScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$3,"XForceScreenSaver");
    }
    /**
     * {@snippet :
     * int XForceScreenSaver(Display*, int);
     * }
     */
    public static int XForceScreenSaver(MemorySegment x0, int x1) {
        var mh$ = XForceScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFree$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$4,"XFree");
    }
    /**
     * {@snippet :
     * int XFree(void*);
     * }
     */
    public static int XFree(MemorySegment x0) {
        var mh$ = XFree$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$5,"XFreeColormap");
    }
    /**
     * {@snippet :
     * int XFreeColormap(Display*, Colormap);
     * }
     */
    public static int XFreeColormap(MemorySegment x0, long x1) {
        var mh$ = XFreeColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeColors$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$1,"XFreeColors");
    }
    /**
     * {@snippet :
     * int XFreeColors(Display*, Colormap, unsigned long*, int, unsigned long);
     * }
     */
    public static int XFreeColors(MemorySegment x0, long x1, MemorySegment x2, int x3, long x4) {
        var mh$ = XFreeColors$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$2,"XFreeCursor");
    }
    /**
     * {@snippet :
     * int XFreeCursor(Display*, Cursor);
     * }
     */
    public static int XFreeCursor(MemorySegment x0, long x1) {
        var mh$ = XFreeCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$3,"XFreeExtensionList");
    }
    /**
     * {@snippet :
     * int XFreeExtensionList(char**);
     * }
     */
    public static int XFreeExtensionList(MemorySegment x0) {
        var mh$ = XFreeExtensionList$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFont$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$4,"XFreeFont");
    }
    /**
     * {@snippet :
     * int XFreeFont(Display*, XFontStruct*);
     * }
     */
    public static int XFreeFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeFont$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$5,"XFreeFontInfo");
    }
    /**
     * {@snippet :
     * int XFreeFontInfo(char**, XFontStruct*, int);
     * }
     */
    public static int XFreeFontInfo(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XFreeFontInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontNames$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$0,"XFreeFontNames");
    }
    /**
     * {@snippet :
     * int XFreeFontNames(char**);
     * }
     */
    public static int XFreeFontNames(MemorySegment x0) {
        var mh$ = XFreeFontNames$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$1,"XFreeFontPath");
    }
    /**
     * {@snippet :
     * int XFreeFontPath(char**);
     * }
     */
    public static int XFreeFontPath(MemorySegment x0) {
        var mh$ = XFreeFontPath$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeGC$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$2,"XFreeGC");
    }
    /**
     * {@snippet :
     * int XFreeGC(Display*, GC);
     * }
     */
    public static int XFreeGC(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeGC$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeModifiermap$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$3,"XFreeModifiermap");
    }
    /**
     * {@snippet :
     * int XFreeModifiermap(XModifierKeymap*);
     * }
     */
    public static int XFreeModifiermap(MemorySegment x0) {
        var mh$ = XFreeModifiermap$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreePixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$4,"XFreePixmap");
    }
    /**
     * {@snippet :
     * int XFreePixmap(Display*, Pixmap);
     * }
     */
    public static int XFreePixmap(MemorySegment x0, long x1) {
        var mh$ = XFreePixmap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$6,"XGeometry");
    }
    /**
     * {@snippet :
     * int XGeometry(Display*, int, char*, char*, unsigned int, unsigned int, unsigned int, int, int, int*, int*, int*, int*);
     * }
     */
    public static int XGeometry(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, MemorySegment x9, MemorySegment x10, MemorySegment x11, MemorySegment x12) {
        var mh$ = XGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetErrorDatabaseText$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$1,"XGetErrorDatabaseText");
    }
    /**
     * {@snippet :
     * int XGetErrorDatabaseText(Display*, char*, char*, char*, char*, int);
     * }
     */
    public static int XGetErrorDatabaseText(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5) {
        var mh$ = XGetErrorDatabaseText$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetErrorText$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$3,"XGetErrorText");
    }
    /**
     * {@snippet :
     * int XGetErrorText(Display*, int, char*, int);
     * }
     */
    public static int XGetErrorText(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = XGetErrorText$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetFontProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$4,"XGetFontProperty");
    }
    /**
     * {@snippet :
     * int XGetFontProperty(XFontStruct*, Atom, unsigned long*);
     * }
     */
    public static int XGetFontProperty(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetFontProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetGCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$5,"XGetGCValues");
    }
    /**
     * {@snippet :
     * int XGetGCValues(Display*, GC, unsigned long, XGCValues*);
     * }
     */
    public static int XGetGCValues(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XGetGCValues$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$1,"XGetGeometry");
    }
    /**
     * {@snippet :
     * int XGetGeometry(Display*, Drawable, Window*, int*, int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*);
     * }
     */
    public static int XGetGeometry(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XGetGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$2,"XGetIconName");
    }
    /**
     * {@snippet :
     * int XGetIconName(Display*, Window, char**);
     * }
     */
    public static int XGetIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetIconName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$3,"XGetInputFocus");
    }
    /**
     * {@snippet :
     * int XGetInputFocus(Display*, Window*, int*);
     * }
     */
    public static int XGetInputFocus(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XGetInputFocus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetKeyboardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$4,"XGetKeyboardControl");
    }
    /**
     * {@snippet :
     * int XGetKeyboardControl(Display*, XKeyboardState*);
     * }
     */
    public static int XGetKeyboardControl(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetKeyboardControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetPointerControl$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$5,"XGetPointerControl");
    }
    /**
     * {@snippet :
     * int XGetPointerControl(Display*, int*, int*, int*);
     * }
     */
    public static int XGetPointerControl(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetPointerControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetPointerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$0,"XGetPointerMapping");
    }
    /**
     * {@snippet :
     * int XGetPointerMapping(Display*, unsigned char*, int);
     * }
     */
    public static int XGetPointerMapping(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XGetPointerMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$2,"XGetScreenSaver");
    }
    /**
     * {@snippet :
     * int XGetScreenSaver(Display*, int*, int*, int*, int*);
     * }
     */
    public static int XGetScreenSaver(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XGetScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetTransientForHint$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$3,"XGetTransientForHint");
    }
    /**
     * {@snippet :
     * int XGetTransientForHint(Display*, Window, Window*);
     * }
     */
    public static int XGetTransientForHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetTransientForHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWindowProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$5,"XGetWindowProperty");
    }
    /**
     * {@snippet :
     * int XGetWindowProperty(Display*, Window, Atom, long, long, int, Atom, Atom*, int*, unsigned long*, unsigned long*, unsigned char**);
     * }
     */
    public static int XGetWindowProperty(MemorySegment x0, long x1, long x2, long x3, long x4, int x5, long x6, MemorySegment x7, MemorySegment x8, MemorySegment x9, MemorySegment x10, MemorySegment x11) {
        var mh$ = XGetWindowProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$0,"XGetWindowAttributes");
    }
    /**
     * {@snippet :
     * int XGetWindowAttributes(Display*, Window, XWindowAttributes*);
     * }
     */
    public static int XGetWindowAttributes(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabButton$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$2,"XGrabButton");
    }
    /**
     * {@snippet :
     * int XGrabButton(Display*, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor);
     * }
     */
    public static int XGrabButton(MemorySegment x0, int x1, int x2, long x3, int x4, int x5, int x6, int x7, long x8, long x9) {
        var mh$ = XGrabButton$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabKey$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$4,"XGrabKey");
    }
    /**
     * {@snippet :
     * int XGrabKey(Display*, int, unsigned int, Window, int, int, int);
     * }
     */
    public static int XGrabKey(MemorySegment x0, int x1, int x2, long x3, int x4, int x5, int x6) {
        var mh$ = XGrabKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$6,"XGrabKeyboard");
    }
    /**
     * {@snippet :
     * int XGrabKeyboard(Display*, Window, int, int, int, Time);
     * }
     */
    public static int XGrabKeyboard(MemorySegment x0, long x1, int x2, int x3, int x4, long x5) {
        var mh$ = XGrabKeyboard$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$1,"XGrabPointer");
    }
    /**
     * {@snippet :
     * int XGrabPointer(Display*, Window, int, unsigned int, int, int, Window, Cursor, Time);
     * }
     */
    public static int XGrabPointer(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, long x7, long x8) {
        var mh$ = XGrabPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabServer$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$2,"XGrabServer");
    }
    /**
     * {@snippet :
     * int XGrabServer(Display*);
     * }
     */
    public static int XGrabServer(MemorySegment x0) {
        var mh$ = XGrabServer$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XHeightMMOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$3,"XHeightMMOfScreen");
    }
    /**
     * {@snippet :
     * int XHeightMMOfScreen(Screen*);
     * }
     */
    public static int XHeightMMOfScreen(MemorySegment x0) {
        var mh$ = XHeightMMOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XHeightOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$4,"XHeightOfScreen");
    }
    /**
     * {@snippet :
     * int XHeightOfScreen(Screen*);
     * }
     */
    public static int XHeightOfScreen(MemorySegment x0) {
        var mh$ = XHeightOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$0,"XIfEvent");
    }
    /**
     * {@snippet :
     * int XIfEvent(Display*, XEvent*, int (*)(Display*,XEvent*,XPointer), XPointer);
     * }
     */
    public static int XIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XIfEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XImageByteOrder$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$1,"XImageByteOrder");
    }
    /**
     * {@snippet :
     * int XImageByteOrder(Display*);
     * }
     */
    public static int XImageByteOrder(MemorySegment x0) {
        var mh$ = XImageByteOrder$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInstallColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$2,"XInstallColormap");
    }
    /**
     * {@snippet :
     * int XInstallColormap(Display*, Colormap);
     * }
     */
    public static int XInstallColormap(MemorySegment x0, long x1) {
        var mh$ = XInstallColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeysymToKeycode$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$4,"XKeysymToKeycode");
    }
    /**
     * {@snippet :
     * KeyCode XKeysymToKeycode(Display*, KeySym);
     * }
     */
    public static byte XKeysymToKeycode(MemorySegment x0, long x1) {
        var mh$ = XKeysymToKeycode$MH();
        try {
            return (byte)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKillClient$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$5,"XKillClient");
    }
    /**
     * {@snippet :
     * int XKillClient(Display*, XID);
     * }
     */
    public static int XKillClient(MemorySegment x0, long x1) {
        var mh$ = XKillClient$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupColor$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$0,"XLookupColor");
    }
    /**
     * {@snippet :
     * int XLookupColor(Display*, Colormap, char*, XColor*, XColor*);
     * }
     */
    public static int XLookupColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XLookupColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLowerWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$1,"XLowerWindow");
    }
    /**
     * {@snippet :
     * int XLowerWindow(Display*, Window);
     * }
     */
    public static int XLowerWindow(MemorySegment x0, long x1) {
        var mh$ = XLowerWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapRaised$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$2,"XMapRaised");
    }
    /**
     * {@snippet :
     * int XMapRaised(Display*, Window);
     * }
     */
    public static int XMapRaised(MemorySegment x0, long x1) {
        var mh$ = XMapRaised$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$3,"XMapSubwindows");
    }
    /**
     * {@snippet :
     * int XMapSubwindows(Display*, Window);
     * }
     */
    public static int XMapSubwindows(MemorySegment x0, long x1) {
        var mh$ = XMapSubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$4,"XMapWindow");
    }
    /**
     * {@snippet :
     * int XMapWindow(Display*, Window);
     * }
     */
    public static int XMapWindow(MemorySegment x0, long x1) {
        var mh$ = XMapWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaskEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$5,"XMaskEvent");
    }
    /**
     * {@snippet :
     * int XMaskEvent(Display*, long, XEvent*);
     * }
     */
    public static int XMaskEvent(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XMaskEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaxCmapsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$0,"XMaxCmapsOfScreen");
    }
    /**
     * {@snippet :
     * int XMaxCmapsOfScreen(Screen*);
     * }
     */
    public static int XMaxCmapsOfScreen(MemorySegment x0) {
        var mh$ = XMaxCmapsOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMinCmapsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$1,"XMinCmapsOfScreen");
    }
    /**
     * {@snippet :
     * int XMinCmapsOfScreen(Screen*);
     * }
     */
    public static int XMinCmapsOfScreen(MemorySegment x0) {
        var mh$ = XMinCmapsOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMoveResizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$3,"XMoveResizeWindow");
    }
    /**
     * {@snippet :
     * int XMoveResizeWindow(Display*, Window, int, int, unsigned int, unsigned int);
     * }
     */
    public static int XMoveResizeWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5) {
        var mh$ = XMoveResizeWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMoveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$5,"XMoveWindow");
    }
    /**
     * {@snippet :
     * int XMoveWindow(Display*, Window, int, int);
     * }
     */
    public static int XMoveWindow(MemorySegment x0, long x1, int x2, int x3) {
        var mh$ = XMoveWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNextEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$0,"XNextEvent");
    }
    /**
     * {@snippet :
     * int XNextEvent(Display*, XEvent*);
     * }
     */
    public static int XNextEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XNextEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNoOp$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$1,"XNoOp");
    }
    /**
     * {@snippet :
     * int XNoOp(Display*);
     * }
     */
    public static int XNoOp(MemorySegment x0) {
        var mh$ = XNoOp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XParseColor$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$2,"XParseColor");
    }
    /**
     * {@snippet :
     * int XParseColor(Display*, Colormap, char*, XColor*);
     * }
     */
    public static int XParseColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XParseColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XParseGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$3,"XParseGeometry");
    }
    /**
     * {@snippet :
     * int XParseGeometry(char*, int*, int*, unsigned int*, unsigned int*);
     * }
     */
    public static int XParseGeometry(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XParseGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPeekEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$4,"XPeekEvent");
    }
    /**
     * {@snippet :
     * int XPeekEvent(Display*, XEvent*);
     * }
     */
    public static int XPeekEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XPeekEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPeekIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$0,"XPeekIfEvent");
    }
    /**
     * {@snippet :
     * int XPeekIfEvent(Display*, XEvent*, int (*)(Display*,XEvent*,XPointer), XPointer);
     * }
     */
    public static int XPeekIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XPeekIfEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPending$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$1,"XPending");
    }
    /**
     * {@snippet :
     * int XPending(Display*);
     * }
     */
    public static int XPending(MemorySegment x0) {
        var mh$ = XPending$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPlanesOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$2,"XPlanesOfScreen");
    }
    /**
     * {@snippet :
     * int XPlanesOfScreen(Screen*);
     * }
     */
    public static int XPlanesOfScreen(MemorySegment x0) {
        var mh$ = XPlanesOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProtocolRevision$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$3,"XProtocolRevision");
    }
    /**
     * {@snippet :
     * int XProtocolRevision(Display*);
     * }
     */
    public static int XProtocolRevision(MemorySegment x0) {
        var mh$ = XProtocolRevision$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProtocolVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$4,"XProtocolVersion");
    }
    /**
     * {@snippet :
     * int XProtocolVersion(Display*);
     * }
     */
    public static int XProtocolVersion(MemorySegment x0) {
        var mh$ = XProtocolVersion$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPutBackEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$5,"XPutBackEvent");
    }
    /**
     * {@snippet :
     * int XPutBackEvent(Display*, XEvent*);
     * }
     */
    public static int XPutBackEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XPutBackEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPutImage$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$1,"XPutImage");
    }
    /**
     * {@snippet :
     * int XPutImage(Display*, Drawable, GC, XImage*, int, int, int, int, unsigned int, unsigned int);
     * }
     */
    public static int XPutImage(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9) {
        var mh$ = XPutImage$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQLength$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$2,"XQLength");
    }
    /**
     * {@snippet :
     * int XQLength(Display*);
     * }
     */
    public static int XQLength(MemorySegment x0) {
        var mh$ = XQLength$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$4,"XQueryBestCursor");
    }
    /**
     * {@snippet :
     * int XQueryBestCursor(Display*, Drawable, unsigned int, unsigned int, unsigned int*, unsigned int*);
     * }
     */
    public static int XQueryBestCursor(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$6,"XQueryBestSize");
    }
    /**
     * {@snippet :
     * int XQueryBestSize(Display*, int, Drawable, unsigned int, unsigned int, unsigned int*, unsigned int*);
     * }
     */
    public static int XQueryBestSize(MemorySegment x0, int x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XQueryBestSize$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$0,"XQueryBestStipple");
    }
    /**
     * {@snippet :
     * int XQueryBestStipple(Display*, Drawable, unsigned int, unsigned int, unsigned int*, unsigned int*);
     * }
     */
    public static int XQueryBestStipple(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestStipple$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestTile$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$1,"XQueryBestTile");
    }
    /**
     * {@snippet :
     * int XQueryBestTile(Display*, Drawable, unsigned int, unsigned int, unsigned int*, unsigned int*);
     * }
     */
    public static int XQueryBestTile(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestTile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryColor$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$2,"XQueryColor");
    }
    /**
     * {@snippet :
     * int XQueryColor(Display*, Colormap, XColor*);
     * }
     */
    public static int XQueryColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XQueryColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryColors$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$3,"XQueryColors");
    }
    /**
     * {@snippet :
     * int XQueryColors(Display*, Colormap, XColor*, int);
     * }
     */
    public static int XQueryColors(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XQueryColors$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$4,"XQueryExtension");
    }
    /**
     * {@snippet :
     * int XQueryExtension(Display*, char*, int*, int*, int*);
     * }
     */
    public static int XQueryExtension(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XQueryExtension$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$5,"XQueryKeymap");
    }
    /**
     * {@snippet :
     * int XQueryKeymap(Display*, char [32]);
     * }
     */
    public static int XQueryKeymap(MemorySegment x0, MemorySegment x1) {
        var mh$ = XQueryKeymap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$0,"XQueryPointer");
    }
    /**
     * {@snippet :
     * int XQueryPointer(Display*, Window, Window*, Window*, int*, int*, int*, int*, unsigned int*);
     * }
     */
    public static int XQueryPointer(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XQueryPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"XQueryTextExtents");
    }
    /**
     * {@snippet :
     * int XQueryTextExtents(Display*, XID, char*, int, int*, int*, int*, XCharStruct*);
     * }
     */
    public static int XQueryTextExtents(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XQueryTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTextExtents16$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$3,"XQueryTextExtents16");
    }
    /**
     * {@snippet :
     * int XQueryTextExtents16(Display*, XID, const XChar2b*, int, int*, int*, int*, XCharStruct*);
     * }
     */
    public static int XQueryTextExtents16(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XQueryTextExtents16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTree$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$5,"XQueryTree");
    }
    /**
     * {@snippet :
     * int XQueryTree(Display*, Window, Window*, Window*, Window**, unsigned int*);
     * }
     */
    public static int XQueryTree(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryTree$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRaiseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"XRaiseWindow");
    }
    /**
     * {@snippet :
     * int XRaiseWindow(Display*, Window);
     * }
     */
    public static int XRaiseWindow(MemorySegment x0, long x1) {
        var mh$ = XRaiseWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReadBitmapFile$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"XReadBitmapFile");
    }
    /**
     * {@snippet :
     * int XReadBitmapFile(Display*, Drawable, char*, unsigned int*, unsigned int*, Pixmap*, int*, int*);
     * }
     */
    public static int XReadBitmapFile(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XReadBitmapFile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReadBitmapFileData$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"XReadBitmapFileData");
    }
    /**
     * {@snippet :
     * int XReadBitmapFileData(char*, unsigned int*, unsigned int*, unsigned char**, int*, int*);
     * }
     */
    public static int XReadBitmapFileData(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XReadBitmapFileData$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRebindKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$6,"XRebindKeysym");
    }
    /**
     * {@snippet :
     * int XRebindKeysym(Display*, KeySym, KeySym*, int, unsigned char*, int);
     * }
     */
    public static int XRebindKeysym(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, int x5) {
        var mh$ = XRebindKeysym$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRecolorCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$0,"XRecolorCursor");
    }
    /**
     * {@snippet :
     * int XRecolorCursor(Display*, Cursor, XColor*, XColor*);
     * }
     */
    public static int XRecolorCursor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XRecolorCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRefreshKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"XRefreshKeyboardMapping");
    }
    /**
     * {@snippet :
     * int XRefreshKeyboardMapping(XMappingEvent*);
     * }
     */
    public static int XRefreshKeyboardMapping(MemorySegment x0) {
        var mh$ = XRefreshKeyboardMapping$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveFromSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"XRemoveFromSaveSet");
    }
    /**
     * {@snippet :
     * int XRemoveFromSaveSet(Display*, Window);
     * }
     */
    public static int XRemoveFromSaveSet(MemorySegment x0, long x1) {
        var mh$ = XRemoveFromSaveSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveHost$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"XRemoveHost");
    }
    /**
     * {@snippet :
     * int XRemoveHost(Display*, XHostAddress*);
     * }
     */
    public static int XRemoveHost(MemorySegment x0, MemorySegment x1) {
        var mh$ = XRemoveHost$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$4,"XRemoveHosts");
    }
    /**
     * {@snippet :
     * int XRemoveHosts(Display*, XHostAddress*, int);
     * }
     */
    public static int XRemoveHosts(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XRemoveHosts$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReparentWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$6,"XReparentWindow");
    }
    /**
     * {@snippet :
     * int XReparentWindow(Display*, Window, Window, int, int);
     * }
     */
    public static int XReparentWindow(MemorySegment x0, long x1, long x2, int x3, int x4) {
        var mh$ = XReparentWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$0,"XResetScreenSaver");
    }
    /**
     * {@snippet :
     * int XResetScreenSaver(Display*);
     * }
     */
    public static int XResetScreenSaver(MemorySegment x0) {
        var mh$ = XResetScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$1,"XResizeWindow");
    }
    /**
     * {@snippet :
     * int XResizeWindow(Display*, Window, unsigned int, unsigned int);
     * }
     */
    public static int XResizeWindow(MemorySegment x0, long x1, int x2, int x3) {
        var mh$ = XResizeWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRestackWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$2,"XRestackWindows");
    }
    /**
     * {@snippet :
     * int XRestackWindows(Display*, Window*, int);
     * }
     */
    public static int XRestackWindows(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XRestackWindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRotateBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$3,"XRotateBuffers");
    }
    /**
     * {@snippet :
     * int XRotateBuffers(Display*, int);
     * }
     */
    public static int XRotateBuffers(MemorySegment x0, int x1) {
        var mh$ = XRotateBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRotateWindowProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$4,"XRotateWindowProperties");
    }
    /**
     * {@snippet :
     * int XRotateWindowProperties(Display*, Window, Atom*, int, int);
     * }
     */
    public static int XRotateWindowProperties(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XRotateWindowProperties$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenCount$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$5,"XScreenCount");
    }
    /**
     * {@snippet :
     * int XScreenCount(Display*);
     * }
     */
    public static int XScreenCount(MemorySegment x0) {
        var mh$ = XScreenCount$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSelectInput$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$0,"XSelectInput");
    }
    /**
     * {@snippet :
     * int XSelectInput(Display*, Window, long);
     * }
     */
    public static int XSelectInput(MemorySegment x0, long x1, long x2) {
        var mh$ = XSelectInput$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSendEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$2,"XSendEvent");
    }
    /**
     * {@snippet :
     * int XSendEvent(Display*, Window, int, long, XEvent*);
     * }
     */
    public static int XSendEvent(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4) {
        var mh$ = XSendEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$3,"XSetAccessControl");
    }
    /**
     * {@snippet :
     * int XSetAccessControl(Display*, int);
     * }
     */
    public static int XSetAccessControl(MemorySegment x0, int x1) {
        var mh$ = XSetAccessControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetArcMode$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$4,"XSetArcMode");
    }
    /**
     * {@snippet :
     * int XSetArcMode(Display*, GC, int);
     * }
     */
    public static int XSetArcMode(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetArcMode$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$6,"XSetBackground");
    }
    /**
     * {@snippet :
     * int XSetBackground(Display*, GC, unsigned long);
     * }
     */
    public static int XSetBackground(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetBackground$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipMask$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$0,"XSetClipMask");
    }
    /**
     * {@snippet :
     * int XSetClipMask(Display*, GC, Pixmap);
     * }
     */
    public static int XSetClipMask(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetClipMask$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipOrigin$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$2,"XSetClipOrigin");
    }
    /**
     * {@snippet :
     * int XSetClipOrigin(Display*, GC, int, int);
     * }
     */
    public static int XSetClipOrigin(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XSetClipOrigin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$4,"XSetClipRectangles");
    }
    /**
     * {@snippet :
     * int XSetClipRectangles(Display*, GC, int, int, XRectangle*, int, int);
     * }
     */
    public static int XSetClipRectangles(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, int x5, int x6) {
        var mh$ = XSetClipRectangles$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetCloseDownMode$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$5,"XSetCloseDownMode");
    }
    /**
     * {@snippet :
     * int XSetCloseDownMode(Display*, int);
     * }
     */
    public static int XSetCloseDownMode(MemorySegment x0, int x1) {
        var mh$ = XSetCloseDownMode$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetCommand$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$0,"XSetCommand");
    }
    /**
     * {@snippet :
     * int XSetCommand(Display*, Window, char**, int);
     * }
     */
    public static int XSetCommand(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetCommand$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetDashes$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$2,"XSetDashes");
    }
    /**
     * {@snippet :
     * int XSetDashes(Display*, GC, int, char*, int);
     * }
     */
    public static int XSetDashes(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = XSetDashes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFillRule$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$3,"XSetFillRule");
    }
    /**
     * {@snippet :
     * int XSetFillRule(Display*, GC, int);
     * }
     */
    public static int XSetFillRule(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFillRule$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFillStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$4,"XSetFillStyle");
    }
    /**
     * {@snippet :
     * int XSetFillStyle(Display*, GC, int);
     * }
     */
    public static int XSetFillStyle(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFillStyle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFont$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$5,"XSetFont");
    }
    /**
     * {@snippet :
     * int XSetFont(Display*, GC, Font);
     * }
     */
    public static int XSetFont(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetFont$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$0,"XSetFontPath");
    }
    /**
     * {@snippet :
     * int XSetFontPath(Display*, char**, int);
     * }
     */
    public static int XSetFontPath(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFontPath$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetForeground$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$1,"XSetForeground");
    }
    /**
     * {@snippet :
     * int XSetForeground(Display*, GC, unsigned long);
     * }
     */
    public static int XSetForeground(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetForeground$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"XSetFunction");
    }
    /**
     * {@snippet :
     * int XSetFunction(Display*, GC, int);
     * }
     */
    public static int XSetFunction(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFunction$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetGraphicsExposures$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$3,"XSetGraphicsExposures");
    }
    /**
     * {@snippet :
     * int XSetGraphicsExposures(Display*, GC, int);
     * }
     */
    public static int XSetGraphicsExposures(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetGraphicsExposures$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"XSetIconName");
    }
    /**
     * {@snippet :
     * int XSetIconName(Display*, Window, char*);
     * }
     */
    public static int XSetIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetIconName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$6,"XSetInputFocus");
    }
    /**
     * {@snippet :
     * int XSetInputFocus(Display*, Window, int, Time);
     * }
     */
    public static int XSetInputFocus(MemorySegment x0, long x1, int x2, long x3) {
        var mh$ = XSetInputFocus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetLineAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"XSetLineAttributes");
    }
    /**
     * {@snippet :
     * int XSetLineAttributes(Display*, GC, unsigned int, int, int, int);
     * }
     */
    public static int XSetLineAttributes(MemorySegment x0, MemorySegment x1, int x2, int x3, int x4, int x5) {
        var mh$ = XSetLineAttributes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetModifierMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$2,"XSetModifierMapping");
    }
    /**
     * {@snippet :
     * int XSetModifierMapping(Display*, XModifierKeymap*);
     * }
     */
    public static int XSetModifierMapping(MemorySegment x0, MemorySegment x1) {
        var mh$ = XSetModifierMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetPlaneMask$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"XSetPlaneMask");
    }
    /**
     * {@snippet :
     * int XSetPlaneMask(Display*, GC, unsigned long);
     * }
     */
    public static int XSetPlaneMask(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetPlaneMask$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetPointerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"XSetPointerMapping");
    }
    /**
     * {@snippet :
     * int XSetPointerMapping(Display*, unsigned char*, int);
     * }
     */
    public static int XSetPointerMapping(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetPointerMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$6,"XSetScreenSaver");
    }
    /**
     * {@snippet :
     * int XSetScreenSaver(Display*, int, int, int, int);
     * }
     */
    public static int XSetScreenSaver(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = XSetScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSelectionOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$1,"XSetSelectionOwner");
    }
    /**
     * {@snippet :
     * int XSetSelectionOwner(Display*, Atom, Window, Time);
     * }
     */
    public static int XSetSelectionOwner(MemorySegment x0, long x1, long x2, long x3) {
        var mh$ = XSetSelectionOwner$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetState$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$3,"XSetState");
    }
    /**
     * {@snippet :
     * int XSetState(Display*, GC, unsigned long, unsigned long, int, unsigned long);
     * }
     */
    public static int XSetState(MemorySegment x0, MemorySegment x1, long x2, long x3, int x4, long x5) {
        var mh$ = XSetState$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$4,"XSetStipple");
    }
    /**
     * {@snippet :
     * int XSetStipple(Display*, GC, Pixmap);
     * }
     */
    public static int XSetStipple(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetStipple$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSubwindowMode$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$5,"XSetSubwindowMode");
    }
    /**
     * {@snippet :
     * int XSetSubwindowMode(Display*, GC, int);
     * }
     */
    public static int XSetSubwindowMode(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetSubwindowMode$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTSOrigin$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$0,"XSetTSOrigin");
    }
    /**
     * {@snippet :
     * int XSetTSOrigin(Display*, GC, int, int);
     * }
     */
    public static int XSetTSOrigin(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XSetTSOrigin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTile$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$1,"XSetTile");
    }
    /**
     * {@snippet :
     * int XSetTile(Display*, GC, Pixmap);
     * }
     */
    public static int XSetTile(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetTile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$2,"XSetWindowBackground");
    }
    /**
     * {@snippet :
     * int XSetWindowBackground(Display*, Window, unsigned long);
     * }
     */
    public static int XSetWindowBackground(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBackground$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBackgroundPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$3,"XSetWindowBackgroundPixmap");
    }
    /**
     * {@snippet :
     * int XSetWindowBackgroundPixmap(Display*, Window, Pixmap);
     * }
     */
    public static int XSetWindowBackgroundPixmap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBackgroundPixmap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$4,"XSetWindowBorder");
    }
    /**
     * {@snippet :
     * int XSetWindowBorder(Display*, Window, unsigned long);
     * }
     */
    public static int XSetWindowBorder(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBorder$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorderPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$5,"XSetWindowBorderPixmap");
    }
    /**
     * {@snippet :
     * int XSetWindowBorderPixmap(Display*, Window, Pixmap);
     * }
     */
    public static int XSetWindowBorderPixmap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBorderPixmap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorderWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$0,"XSetWindowBorderWidth");
    }
    /**
     * {@snippet :
     * int XSetWindowBorderWidth(Display*, Window, unsigned int);
     * }
     */
    public static int XSetWindowBorderWidth(MemorySegment x0, long x1, int x2) {
        var mh$ = XSetWindowBorderWidth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"XSetWindowColormap");
    }
    /**
     * {@snippet :
     * int XSetWindowColormap(Display*, Window, Colormap);
     * }
     */
    public static int XSetWindowColormap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$2,"XStoreBuffer");
    }
    /**
     * {@snippet :
     * int XStoreBuffer(Display*, char*, int, int);
     * }
     */
    public static int XStoreBuffer(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XStoreBuffer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"XStoreBytes");
    }
    /**
     * {@snippet :
     * int XStoreBytes(Display*, char*, int);
     * }
     */
    public static int XStoreBytes(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XStoreBytes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreColor$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"XStoreColor");
    }
    /**
     * {@snippet :
     * int XStoreColor(Display*, Colormap, XColor*);
     * }
     */
    public static int XStoreColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XStoreColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreColors$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$5,"XStoreColors");
    }
    /**
     * {@snippet :
     * int XStoreColors(Display*, Colormap, XColor*, int);
     * }
     */
    public static int XStoreColors(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XStoreColors$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreName$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$0,"XStoreName");
    }
    /**
     * {@snippet :
     * int XStoreName(Display*, Window, char*);
     * }
     */
    public static int XStoreName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XStoreName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreNamedColor$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$2,"XStoreNamedColor");
    }
    /**
     * {@snippet :
     * int XStoreNamedColor(Display*, Colormap, char*, unsigned long, int);
     * }
     */
    public static int XStoreNamedColor(MemorySegment x0, long x1, MemorySegment x2, long x3, int x4) {
        var mh$ = XStoreNamedColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSync$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$3,"XSync");
    }
    /**
     * {@snippet :
     * int XSync(Display*, int);
     * }
     */
    public static int XSync(MemorySegment x0, int x1) {
        var mh$ = XSync$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$5,"XTextExtents");
    }
    /**
     * {@snippet :
     * int XTextExtents(XFontStruct*, char*, int, int*, int*, int*, XCharStruct*);
     * }
     */
    public static int XTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextExtents16$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$0,"XTextExtents16");
    }
    /**
     * {@snippet :
     * int XTextExtents16(XFontStruct*, const XChar2b*, int, int*, int*, int*, XCharStruct*);
     * }
     */
    public static int XTextExtents16(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XTextExtents16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$1,"XTextWidth");
    }
    /**
     * {@snippet :
     * int XTextWidth(XFontStruct*, char*, int);
     * }
     */
    public static int XTextWidth(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XTextWidth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextWidth16$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$2,"XTextWidth16");
    }
    /**
     * {@snippet :
     * int XTextWidth16(XFontStruct*, const XChar2b*, int);
     * }
     */
    public static int XTextWidth16(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XTextWidth16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTranslateCoordinates$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$4,"XTranslateCoordinates");
    }
    /**
     * {@snippet :
     * int XTranslateCoordinates(Display*, Window, Window, int, int, int*, int*, Window*);
     * }
     */
    public static int XTranslateCoordinates(MemorySegment x0, long x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XTranslateCoordinates$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUndefineCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$5,"XUndefineCursor");
    }
    /**
     * {@snippet :
     * int XUndefineCursor(Display*, Window);
     * }
     */
    public static int XUndefineCursor(MemorySegment x0, long x1) {
        var mh$ = XUndefineCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabButton$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$0,"XUngrabButton");
    }
    /**
     * {@snippet :
     * int XUngrabButton(Display*, unsigned int, unsigned int, Window);
     * }
     */
    public static int XUngrabButton(MemorySegment x0, int x1, int x2, long x3) {
        var mh$ = XUngrabButton$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabKey$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$1,"XUngrabKey");
    }
    /**
     * {@snippet :
     * int XUngrabKey(Display*, int, unsigned int, Window);
     * }
     */
    public static int XUngrabKey(MemorySegment x0, int x1, int x2, long x3) {
        var mh$ = XUngrabKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$2,"XUngrabKeyboard");
    }
    /**
     * {@snippet :
     * int XUngrabKeyboard(Display*, Time);
     * }
     */
    public static int XUngrabKeyboard(MemorySegment x0, long x1) {
        var mh$ = XUngrabKeyboard$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$3,"XUngrabPointer");
    }
    /**
     * {@snippet :
     * int XUngrabPointer(Display*, Time);
     * }
     */
    public static int XUngrabPointer(MemorySegment x0, long x1) {
        var mh$ = XUngrabPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabServer$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$4,"XUngrabServer");
    }
    /**
     * {@snippet :
     * int XUngrabServer(Display*);
     * }
     */
    public static int XUngrabServer(MemorySegment x0) {
        var mh$ = XUngrabServer$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUninstallColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$5,"XUninstallColormap");
    }
    /**
     * {@snippet :
     * int XUninstallColormap(Display*, Colormap);
     * }
     */
    public static int XUninstallColormap(MemorySegment x0, long x1) {
        var mh$ = XUninstallColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnloadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$0,"XUnloadFont");
    }
    /**
     * {@snippet :
     * int XUnloadFont(Display*, Font);
     * }
     */
    public static int XUnloadFont(MemorySegment x0, long x1) {
        var mh$ = XUnloadFont$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnmapSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$1,"XUnmapSubwindows");
    }
    /**
     * {@snippet :
     * int XUnmapSubwindows(Display*, Window);
     * }
     */
    public static int XUnmapSubwindows(MemorySegment x0, long x1) {
        var mh$ = XUnmapSubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnmapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$2,"XUnmapWindow");
    }
    /**
     * {@snippet :
     * int XUnmapWindow(Display*, Window);
     * }
     */
    public static int XUnmapWindow(MemorySegment x0, long x1) {
        var mh$ = XUnmapWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVendorRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$3,"XVendorRelease");
    }
    /**
     * {@snippet :
     * int XVendorRelease(Display*);
     * }
     */
    public static int XVendorRelease(MemorySegment x0) {
        var mh$ = XVendorRelease$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWarpPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$5,"XWarpPointer");
    }
    /**
     * {@snippet :
     * int XWarpPointer(Display*, Window, Window, int, int, unsigned int, unsigned int, int, int);
     * }
     */
    public static int XWarpPointer(MemorySegment x0, long x1, long x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XWarpPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWidthMMOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$0,"XWidthMMOfScreen");
    }
    /**
     * {@snippet :
     * int XWidthMMOfScreen(Screen*);
     * }
     */
    public static int XWidthMMOfScreen(MemorySegment x0) {
        var mh$ = XWidthMMOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWidthOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$1,"XWidthOfScreen");
    }
    /**
     * {@snippet :
     * int XWidthOfScreen(Screen*);
     * }
     */
    public static int XWidthOfScreen(MemorySegment x0) {
        var mh$ = XWidthOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$2,"XWindowEvent");
    }
    /**
     * {@snippet :
     * int XWindowEvent(Display*, Window, long, XEvent*);
     * }
     */
    public static int XWindowEvent(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XWindowEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWriteBitmapFile$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$4,"XWriteBitmapFile");
    }
    /**
     * {@snippet :
     * int XWriteBitmapFile(Display*, char*, Pixmap, unsigned int, unsigned int, int, int);
     * }
     */
    public static int XWriteBitmapFile(MemorySegment x0, MemorySegment x1, long x2, int x3, int x4, int x5, int x6) {
        var mh$ = XWriteBitmapFile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSupportsLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$5,"XSupportsLocale");
    }
    /**
     * {@snippet :
     * int XSupportsLocale();
     * }
     */
    public static int XSupportsLocale() {
        var mh$ = XSupportsLocale$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetLocaleModifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$0,"XSetLocaleModifiers");
    }
    /**
     * {@snippet :
     * char* XSetLocaleModifiers(char*);
     * }
     */
    public static MemorySegment XSetLocaleModifiers(MemorySegment x0) {
        var mh$ = XSetLocaleModifiers$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenOM$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$2,"XOpenOM");
    }
    /**
     * {@snippet :
     * XOM XOpenOM(Display*, struct _XrmHashBucketRec*, char*, char*);
     * }
     */
    public static MemorySegment XOpenOM(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XOpenOM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseOM$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$3,"XCloseOM");
    }
    /**
     * {@snippet :
     * int XCloseOM(XOM);
     * }
     */
    public static int XCloseOM(MemorySegment x0) {
        var mh$ = XCloseOM$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetOMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$4,"XSetOMValues");
    }
    /**
     * {@snippet :
     * char* XSetOMValues(XOM,...);
     * }
     */
    public static MemorySegment XSetOMValues(MemorySegment x0, Object... x1) {
        var mh$ = XSetOMValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetOMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$5,"XGetOMValues");
    }
    /**
     * {@snippet :
     * char* XGetOMValues(XOM,...);
     * }
     */
    public static MemorySegment XGetOMValues(MemorySegment x0, Object... x1) {
        var mh$ = XGetOMValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfOM$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$0,"XDisplayOfOM");
    }
    /**
     * {@snippet :
     * Display* XDisplayOfOM(XOM);
     * }
     */
    public static MemorySegment XDisplayOfOM(MemorySegment x0) {
        var mh$ = XDisplayOfOM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfOM$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$1,"XLocaleOfOM");
    }
    /**
     * {@snippet :
     * char* XLocaleOfOM(XOM);
     * }
     */
    public static MemorySegment XLocaleOfOM(MemorySegment x0) {
        var mh$ = XLocaleOfOM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateOC$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$2,"XCreateOC");
    }
    /**
     * {@snippet :
     * XOC XCreateOC(XOM,...);
     * }
     */
    public static MemorySegment XCreateOC(MemorySegment x0, Object... x1) {
        var mh$ = XCreateOC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyOC$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$3,"XDestroyOC");
    }
    /**
     * {@snippet :
     * void XDestroyOC(XOC);
     * }
     */
    public static void XDestroyOC(MemorySegment x0) {
        var mh$ = XDestroyOC$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOMOfOC$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$4,"XOMOfOC");
    }
    /**
     * {@snippet :
     * XOM XOMOfOC(XOC);
     * }
     */
    public static MemorySegment XOMOfOC(MemorySegment x0) {
        var mh$ = XOMOfOC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetOCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$5,"XSetOCValues");
    }
    /**
     * {@snippet :
     * char* XSetOCValues(XOC,...);
     * }
     */
    public static MemorySegment XSetOCValues(MemorySegment x0, Object... x1) {
        var mh$ = XSetOCValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetOCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$0,"XGetOCValues");
    }
    /**
     * {@snippet :
     * char* XGetOCValues(XOC,...);
     * }
     */
    public static MemorySegment XGetOCValues(MemorySegment x0, Object... x1) {
        var mh$ = XGetOCValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$2,"XCreateFontSet");
    }
    /**
     * {@snippet :
     * XFontSet XCreateFontSet(Display*, char*, char***, int*, char**);
     * }
     */
    public static MemorySegment XCreateFontSet(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XCreateFontSet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$3,"XFreeFontSet");
    }
    /**
     * {@snippet :
     * void XFreeFontSet(Display*, XFontSet);
     * }
     */
    public static void XFreeFontSet(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeFontSet$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFontsOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$4,"XFontsOfFontSet");
    }
    /**
     * {@snippet :
     * int XFontsOfFontSet(XFontSet, XFontStruct***, char***);
     * }
     */
    public static int XFontsOfFontSet(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XFontsOfFontSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBaseFontNameListOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$5,"XBaseFontNameListOfFontSet");
    }
    /**
     * {@snippet :
     * char* XBaseFontNameListOfFontSet(XFontSet);
     * }
     */
    public static MemorySegment XBaseFontNameListOfFontSet(MemorySegment x0) {
        var mh$ = XBaseFontNameListOfFontSet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$0,"XLocaleOfFontSet");
    }
    /**
     * {@snippet :
     * char* XLocaleOfFontSet(XFontSet);
     * }
     */
    public static MemorySegment XLocaleOfFontSet(MemorySegment x0) {
        var mh$ = XLocaleOfFontSet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XContextDependentDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$1,"XContextDependentDrawing");
    }
    /**
     * {@snippet :
     * int XContextDependentDrawing(XFontSet);
     * }
     */
    public static int XContextDependentDrawing(MemorySegment x0) {
        var mh$ = XContextDependentDrawing$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDirectionalDependentDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$2,"XDirectionalDependentDrawing");
    }
    /**
     * {@snippet :
     * int XDirectionalDependentDrawing(XFontSet);
     * }
     */
    public static int XDirectionalDependentDrawing(MemorySegment x0) {
        var mh$ = XDirectionalDependentDrawing$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XContextualDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$3,"XContextualDrawing");
    }
    /**
     * {@snippet :
     * int XContextualDrawing(XFontSet);
     * }
     */
    public static int XContextualDrawing(MemorySegment x0) {
        var mh$ = XContextualDrawing$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XExtentsOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$4,"XExtentsOfFontSet");
    }
    /**
     * {@snippet :
     * XFontSetExtents* XExtentsOfFontSet(XFontSet);
     * }
     */
    public static MemorySegment XExtentsOfFontSet(MemorySegment x0) {
        var mh$ = XExtentsOfFontSet$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$5,"XmbTextEscapement");
    }
    /**
     * {@snippet :
     * int XmbTextEscapement(XFontSet, char*, int);
     * }
     */
    public static int XmbTextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XmbTextEscapement$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$0,"XwcTextEscapement");
    }
    /**
     * {@snippet :
     * int XwcTextEscapement(XFontSet, const wchar_t*, int);
     * }
     */
    public static int XwcTextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XwcTextEscapement$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$1,"Xutf8TextEscapement");
    }
    /**
     * {@snippet :
     * int Xutf8TextEscapement(XFontSet, char*, int);
     * }
     */
    public static int Xutf8TextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Xutf8TextEscapement$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$3,"XmbTextExtents");
    }
    /**
     * {@snippet :
     * int XmbTextExtents(XFontSet, char*, int, XRectangle*, XRectangle*);
     * }
     */
    public static int XmbTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XmbTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$4,"XwcTextExtents");
    }
    /**
     * {@snippet :
     * int XwcTextExtents(XFontSet, const wchar_t*, int, XRectangle*, XRectangle*);
     * }
     */
    public static int XwcTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XwcTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$5,"Xutf8TextExtents");
    }
    /**
     * {@snippet :
     * int Xutf8TextExtents(XFontSet, char*, int, XRectangle*, XRectangle*);
     * }
     */
    public static int Xutf8TextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Xutf8TextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$1,"XmbTextPerCharExtents");
    }
    /**
     * {@snippet :
     * int XmbTextPerCharExtents(XFontSet, char*, int, XRectangle*, XRectangle*, int, int*, XRectangle*, XRectangle*);
     * }
     */
    public static int XmbTextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XmbTextPerCharExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$2,"XwcTextPerCharExtents");
    }
    /**
     * {@snippet :
     * int XwcTextPerCharExtents(XFontSet, const wchar_t*, int, XRectangle*, XRectangle*, int, int*, XRectangle*, XRectangle*);
     * }
     */
    public static int XwcTextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XwcTextPerCharExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$3,"Xutf8TextPerCharExtents");
    }
    /**
     * {@snippet :
     * int Xutf8TextPerCharExtents(XFontSet, char*, int, XRectangle*, XRectangle*, int, int*, XRectangle*, XRectangle*);
     * }
     */
    public static int Xutf8TextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = Xutf8TextPerCharExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$5,"XmbDrawText");
    }
    /**
     * {@snippet :
     * void XmbDrawText(Display*, Drawable, GC, int, int, XmbTextItem*, int);
     * }
     */
    public static void XmbDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XmbDrawText$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$0,"XwcDrawText");
    }
    /**
     * {@snippet :
     * void XwcDrawText(Display*, Drawable, GC, int, int, XwcTextItem*, int);
     * }
     */
    public static void XwcDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XwcDrawText$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$1,"Xutf8DrawText");
    }
    /**
     * {@snippet :
     * void Xutf8DrawText(Display*, Drawable, GC, int, int, XmbTextItem*, int);
     * }
     */
    public static void Xutf8DrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = Xutf8DrawText$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$3,"XmbDrawString");
    }
    /**
     * {@snippet :
     * void XmbDrawString(Display*, Drawable, XFontSet, GC, int, int, char*, int);
     * }
     */
    public static void XmbDrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XmbDrawString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$4,"XwcDrawString");
    }
    /**
     * {@snippet :
     * void XwcDrawString(Display*, Drawable, XFontSet, GC, int, int, const wchar_t*, int);
     * }
     */
    public static void XwcDrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XwcDrawString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$5,"Xutf8DrawString");
    }
    /**
     * {@snippet :
     * void Xutf8DrawString(Display*, Drawable, XFontSet, GC, int, int, char*, int);
     * }
     */
    public static void Xutf8DrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = Xutf8DrawString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$0,"XmbDrawImageString");
    }
    /**
     * {@snippet :
     * void XmbDrawImageString(Display*, Drawable, XFontSet, GC, int, int, char*, int);
     * }
     */
    public static void XmbDrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XmbDrawImageString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$1,"XwcDrawImageString");
    }
    /**
     * {@snippet :
     * void XwcDrawImageString(Display*, Drawable, XFontSet, GC, int, int, const wchar_t*, int);
     * }
     */
    public static void XwcDrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XwcDrawImageString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$2,"Xutf8DrawImageString");
    }
    /**
     * {@snippet :
     * void Xutf8DrawImageString(Display*, Drawable, XFontSet, GC, int, int, char*, int);
     * }
     */
    public static void Xutf8DrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = Xutf8DrawImageString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenIM$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$3,"XOpenIM");
    }
    /**
     * {@snippet :
     * XIM XOpenIM(Display*, struct _XrmHashBucketRec*, char*, char*);
     * }
     */
    public static MemorySegment XOpenIM(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XOpenIM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseIM$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$4,"XCloseIM");
    }
    /**
     * {@snippet :
     * int XCloseIM(XIM);
     * }
     */
    public static int XCloseIM(MemorySegment x0) {
        var mh$ = XCloseIM$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$5,"XGetIMValues");
    }
    /**
     * {@snippet :
     * char* XGetIMValues(XIM,...);
     * }
     */
    public static MemorySegment XGetIMValues(MemorySegment x0, Object... x1) {
        var mh$ = XGetIMValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$0,"XSetIMValues");
    }
    /**
     * {@snippet :
     * char* XSetIMValues(XIM,...);
     * }
     */
    public static MemorySegment XSetIMValues(MemorySegment x0, Object... x1) {
        var mh$ = XSetIMValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfIM$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$1,"XDisplayOfIM");
    }
    /**
     * {@snippet :
     * Display* XDisplayOfIM(XIM);
     * }
     */
    public static MemorySegment XDisplayOfIM(MemorySegment x0) {
        var mh$ = XDisplayOfIM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfIM$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$2,"XLocaleOfIM");
    }
    /**
     * {@snippet :
     * char* XLocaleOfIM(XIM);
     * }
     */
    public static MemorySegment XLocaleOfIM(MemorySegment x0) {
        var mh$ = XLocaleOfIM$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateIC$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$3,"XCreateIC");
    }
    /**
     * {@snippet :
     * XIC XCreateIC(XIM,...);
     * }
     */
    public static MemorySegment XCreateIC(MemorySegment x0, Object... x1) {
        var mh$ = XCreateIC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyIC$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$4,"XDestroyIC");
    }
    /**
     * {@snippet :
     * void XDestroyIC(XIC);
     * }
     */
    public static void XDestroyIC(MemorySegment x0) {
        var mh$ = XDestroyIC$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetICFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$5,"XSetICFocus");
    }
    /**
     * {@snippet :
     * void XSetICFocus(XIC);
     * }
     */
    public static void XSetICFocus(MemorySegment x0) {
        var mh$ = XSetICFocus$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnsetICFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$0,"XUnsetICFocus");
    }
    /**
     * {@snippet :
     * void XUnsetICFocus(XIC);
     * }
     */
    public static void XUnsetICFocus(MemorySegment x0) {
        var mh$ = XUnsetICFocus$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$1,"XwcResetIC");
    }
    /**
     * {@snippet :
     * wchar_t* XwcResetIC(XIC);
     * }
     */
    public static MemorySegment XwcResetIC(MemorySegment x0) {
        var mh$ = XwcResetIC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$2,"XmbResetIC");
    }
    /**
     * {@snippet :
     * char* XmbResetIC(XIC);
     * }
     */
    public static MemorySegment XmbResetIC(MemorySegment x0) {
        var mh$ = XmbResetIC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8ResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$3,"Xutf8ResetIC");
    }
    /**
     * {@snippet :
     * char* Xutf8ResetIC(XIC);
     * }
     */
    public static MemorySegment Xutf8ResetIC(MemorySegment x0) {
        var mh$ = Xutf8ResetIC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetICValues$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$4,"XSetICValues");
    }
    /**
     * {@snippet :
     * char* XSetICValues(XIC,...);
     * }
     */
    public static MemorySegment XSetICValues(MemorySegment x0, Object... x1) {
        var mh$ = XSetICValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetICValues$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$5,"XGetICValues");
    }
    /**
     * {@snippet :
     * char* XGetICValues(XIC,...);
     * }
     */
    public static MemorySegment XGetICValues(MemorySegment x0, Object... x1) {
        var mh$ = XGetICValues$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIMOfIC$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$0,"XIMOfIC");
    }
    /**
     * {@snippet :
     * XIM XIMOfIC(XIC);
     * }
     */
    public static MemorySegment XIMOfIC(MemorySegment x0) {
        var mh$ = XIMOfIC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFilterEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$1,"XFilterEvent");
    }
    /**
     * {@snippet :
     * int XFilterEvent(XEvent*, Window);
     * }
     */
    public static int XFilterEvent(MemorySegment x0, long x1) {
        var mh$ = XFilterEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$3,"XmbLookupString");
    }
    /**
     * {@snippet :
     * int XmbLookupString(XIC, XKeyPressedEvent*, char*, int, KeySym*, int*);
     * }
     */
    public static int XmbLookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XmbLookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$4,"XwcLookupString");
    }
    /**
     * {@snippet :
     * int XwcLookupString(XIC, XKeyPressedEvent*, wchar_t*, int, KeySym*, int*);
     * }
     */
    public static int XwcLookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XwcLookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8LookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$5,"Xutf8LookupString");
    }
    /**
     * {@snippet :
     * int Xutf8LookupString(XIC, XKeyPressedEvent*, char*, int, KeySym*, int*);
     * }
     */
    public static int Xutf8LookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Xutf8LookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVaCreateNestedList$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$0,"XVaCreateNestedList");
    }
    /**
     * {@snippet :
     * XVaNestedList XVaCreateNestedList(int,...);
     * }
     */
    public static MemorySegment XVaCreateNestedList(int x0, Object... x1) {
        var mh$ = XVaCreateNestedList$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRegisterIMInstantiateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$1,"XRegisterIMInstantiateCallback");
    }
    /**
     * {@snippet :
     * int XRegisterIMInstantiateCallback(Display*, struct _XrmHashBucketRec*, char*, char*, XIDProc, XPointer);
     * }
     */
    public static int XRegisterIMInstantiateCallback(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XRegisterIMInstantiateCallback$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnregisterIMInstantiateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$2,"XUnregisterIMInstantiateCallback");
    }
    /**
     * {@snippet :
     * int XUnregisterIMInstantiateCallback(Display*, struct _XrmHashBucketRec*, char*, char*, XIDProc, XPointer);
     * }
     */
    public static int XUnregisterIMInstantiateCallback(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XUnregisterIMInstantiateCallback$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternalConnectionNumbers$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$0,"XInternalConnectionNumbers");
    }
    /**
     * {@snippet :
     * int XInternalConnectionNumbers(Display*, int**, int*);
     * }
     */
    public static int XInternalConnectionNumbers(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XInternalConnectionNumbers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProcessInternalConnection$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$2,"XProcessInternalConnection");
    }
    /**
     * {@snippet :
     * void XProcessInternalConnection(Display*, int);
     * }
     */
    public static void XProcessInternalConnection(MemorySegment x0, int x1) {
        var mh$ = XProcessInternalConnection$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddConnectionWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$3,"XAddConnectionWatch");
    }
    /**
     * {@snippet :
     * int XAddConnectionWatch(Display*, XConnectionWatchProc, XPointer);
     * }
     */
    public static int XAddConnectionWatch(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XAddConnectionWatch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveConnectionWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$4,"XRemoveConnectionWatch");
    }
    /**
     * {@snippet :
     * void XRemoveConnectionWatch(Display*, XConnectionWatchProc, XPointer);
     * }
     */
    public static void XRemoveConnectionWatch(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XRemoveConnectionWatch$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAuthorization$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$6,"XSetAuthorization");
    }
    /**
     * {@snippet :
     * void XSetAuthorization(char*, int, char*, int);
     * }
     */
    public static void XSetAuthorization(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = XSetAuthorization$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Xmbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$0,"_Xmbtowc");
    }
    /**
     * {@snippet :
     * int _Xmbtowc(wchar_t*, char*, int);
     * }
     */
    public static int _Xmbtowc(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = _Xmbtowc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Xwctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$1,"_Xwctomb");
    }
    /**
     * {@snippet :
     * int _Xwctomb(char*, wchar_t);
     * }
     */
    public static int _Xwctomb(MemorySegment x0, int x1) {
        var mh$ = _Xwctomb$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetEventData$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$2,"XGetEventData");
    }
    /**
     * {@snippet :
     * int XGetEventData(Display*, XGenericEventCookie*);
     * }
     */
    public static int XGetEventData(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetEventData$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeEventData$MH() {
        return RuntimeHelper.requireNonNull(constants$210.const$3,"XFreeEventData");
    }
    /**
     * {@snippet :
     * void XFreeEventData(Display*, XGenericEventCookie*);
     * }
     */
    public static void XFreeEventData(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeEventData$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .XStringStyle = 0;
     * }
     */
    public static int XStringStyle() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .XCompoundTextStyle = 1;
     * }
     */
    public static int XCompoundTextStyle() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .XTextStyle = 2;
     * }
     */
    public static int XTextStyle() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .XStdICCTextStyle = 3;
     * }
     */
    public static int XStdICCTextStyle() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .XUTF8StringStyle = 4;
     * }
     */
    public static int XUTF8StringStyle() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef struct _XRegion* Region;
     * }
     */
    public static final AddressLayout Region = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int XContext;
     * }
     */
    public static final OfInt XContext = JAVA_INT;
    public static MethodHandle XAllocClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$3,"XAllocClassHint");
    }
    /**
     * {@snippet :
     * XClassHint* XAllocClassHint();
     * }
     */
    public static MemorySegment XAllocClassHint() {
        var mh$ = XAllocClassHint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocIconSize$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$4,"XAllocIconSize");
    }
    /**
     * {@snippet :
     * XIconSize* XAllocIconSize();
     * }
     */
    public static MemorySegment XAllocIconSize() {
        var mh$ = XAllocIconSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$222.const$5,"XAllocSizeHints");
    }
    /**
     * {@snippet :
     * XSizeHints* XAllocSizeHints();
     * }
     */
    public static MemorySegment XAllocSizeHints() {
        var mh$ = XAllocSizeHints$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$0,"XAllocStandardColormap");
    }
    /**
     * {@snippet :
     * XStandardColormap* XAllocStandardColormap();
     * }
     */
    public static MemorySegment XAllocStandardColormap() {
        var mh$ = XAllocStandardColormap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$1,"XAllocWMHints");
    }
    /**
     * {@snippet :
     * XWMHints* XAllocWMHints();
     * }
     */
    public static MemorySegment XAllocWMHints() {
        var mh$ = XAllocWMHints$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClipBox$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$2,"XClipBox");
    }
    /**
     * {@snippet :
     * int XClipBox(Region, XRectangle*);
     * }
     */
    public static int XClipBox(MemorySegment x0, MemorySegment x1) {
        var mh$ = XClipBox$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$3,"XCreateRegion");
    }
    /**
     * {@snippet :
     * Region XCreateRegion();
     * }
     */
    public static MemorySegment XCreateRegion() {
        var mh$ = XCreateRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultString$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$4,"XDefaultString");
    }
    /**
     * {@snippet :
     * char* XDefaultString();
     * }
     */
    public static MemorySegment XDefaultString() {
        var mh$ = XDefaultString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$223.const$5,"XDeleteContext");
    }
    /**
     * {@snippet :
     * int XDeleteContext(Display*, XID, XContext);
     * }
     */
    public static int XDeleteContext(MemorySegment x0, long x1, int x2) {
        var mh$ = XDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$0,"XDestroyRegion");
    }
    /**
     * {@snippet :
     * int XDestroyRegion(Region);
     * }
     */
    public static int XDestroyRegion(MemorySegment x0) {
        var mh$ = XDestroyRegion$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEmptyRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$1,"XEmptyRegion");
    }
    /**
     * {@snippet :
     * int XEmptyRegion(Region);
     * }
     */
    public static int XEmptyRegion(MemorySegment x0) {
        var mh$ = XEmptyRegion$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEqualRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$2,"XEqualRegion");
    }
    /**
     * {@snippet :
     * int XEqualRegion(Region, Region);
     * }
     */
    public static int XEqualRegion(MemorySegment x0, MemorySegment x1) {
        var mh$ = XEqualRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFindContext$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$3,"XFindContext");
    }
    /**
     * {@snippet :
     * int XFindContext(Display*, XID, XContext, XPointer*);
     * }
     */
    public static int XFindContext(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XFindContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$4,"XGetClassHint");
    }
    /**
     * {@snippet :
     * int XGetClassHint(Display*, Window, XClassHint*);
     * }
     */
    public static int XGetClassHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetClassHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIconSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$224.const$5,"XGetIconSizes");
    }
    /**
     * {@snippet :
     * int XGetIconSizes(Display*, Window, XIconSize**, int*);
     * }
     */
    public static int XGetIconSizes(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetIconSizes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$0,"XGetNormalHints");
    }
    /**
     * {@snippet :
     * int XGetNormalHints(Display*, Window, XSizeHints*);
     * }
     */
    public static int XGetNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetNormalHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetRGBColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$2,"XGetRGBColormaps");
    }
    /**
     * {@snippet :
     * int XGetRGBColormaps(Display*, Window, XStandardColormap**, int*, Atom);
     * }
     */
    public static int XGetRGBColormaps(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4) {
        var mh$ = XGetRGBColormaps$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$4,"XGetSizeHints");
    }
    /**
     * {@snippet :
     * int XGetSizeHints(Display*, Window, XSizeHints*, Atom);
     * }
     */
    public static int XGetSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetSizeHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$225.const$5,"XGetStandardColormap");
    }
    /**
     * {@snippet :
     * int XGetStandardColormap(Display*, Window, XStandardColormap*, Atom);
     * }
     */
    public static int XGetStandardColormap(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetStandardColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$0,"XGetTextProperty");
    }
    /**
     * {@snippet :
     * int XGetTextProperty(Display*, Window, XTextProperty*, Atom);
     * }
     */
    public static int XGetTextProperty(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetTextProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetVisualInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$2,"XGetVisualInfo");
    }
    /**
     * {@snippet :
     * XVisualInfo* XGetVisualInfo(Display*, long, XVisualInfo*, int*);
     * }
     */
    public static MemorySegment XGetVisualInfo(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetVisualInfo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMClientMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$3,"XGetWMClientMachine");
    }
    /**
     * {@snippet :
     * int XGetWMClientMachine(Display*, Window, XTextProperty*);
     * }
     */
    public static int XGetWMClientMachine(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMClientMachine$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$4,"XGetWMHints");
    }
    /**
     * {@snippet :
     * XWMHints* XGetWMHints(Display*, Window);
     * }
     */
    public static MemorySegment XGetWMHints(MemorySegment x0, long x1) {
        var mh$ = XGetWMHints$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$226.const$5,"XGetWMIconName");
    }
    /**
     * {@snippet :
     * int XGetWMIconName(Display*, Window, XTextProperty*);
     * }
     */
    public static int XGetWMIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMIconName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMName$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$0,"XGetWMName");
    }
    /**
     * {@snippet :
     * int XGetWMName(Display*, Window, XTextProperty*);
     * }
     */
    public static int XGetWMName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$1,"XGetWMNormalHints");
    }
    /**
     * {@snippet :
     * int XGetWMNormalHints(Display*, Window, XSizeHints*, long*);
     * }
     */
    public static int XGetWMNormalHints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMNormalHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$2,"XGetWMSizeHints");
    }
    /**
     * {@snippet :
     * int XGetWMSizeHints(Display*, Window, XSizeHints*, long*, Atom);
     * }
     */
    public static int XGetWMSizeHints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4) {
        var mh$ = XGetWMSizeHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetZoomHints$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$3,"XGetZoomHints");
    }
    /**
     * {@snippet :
     * int XGetZoomHints(Display*, Window, XSizeHints*);
     * }
     */
    public static int XGetZoomHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetZoomHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIntersectRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$4,"XIntersectRegion");
    }
    /**
     * {@snippet :
     * int XIntersectRegion(Region, Region, Region);
     * }
     */
    public static int XIntersectRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XIntersectRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConvertCase$MH() {
        return RuntimeHelper.requireNonNull(constants$227.const$6,"XConvertCase");
    }
    /**
     * {@snippet :
     * void XConvertCase(KeySym, KeySym*, KeySym*);
     * }
     */
    public static void XConvertCase(long x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XConvertCase$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$0,"XLookupString");
    }
    /**
     * {@snippet :
     * int XLookupString(XKeyEvent*, char*, int, KeySym*, XComposeStatus*);
     * }
     */
    public static int XLookupString(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XLookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMatchVisualInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$2,"XMatchVisualInfo");
    }
    /**
     * {@snippet :
     * int XMatchVisualInfo(Display*, int, int, int, XVisualInfo*);
     * }
     */
    public static int XMatchVisualInfo(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XMatchVisualInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOffsetRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$4,"XOffsetRegion");
    }
    /**
     * {@snippet :
     * int XOffsetRegion(Region, int, int);
     * }
     */
    public static int XOffsetRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XOffsetRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPointInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$228.const$5,"XPointInRegion");
    }
    /**
     * {@snippet :
     * int XPointInRegion(Region, int, int);
     * }
     */
    public static int XPointInRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XPointInRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPolygonRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$1,"XPolygonRegion");
    }
    /**
     * {@snippet :
     * Region XPolygonRegion(XPoint*, int, int);
     * }
     */
    public static MemorySegment XPolygonRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XPolygonRegion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRectInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$2,"XRectInRegion");
    }
    /**
     * {@snippet :
     * int XRectInRegion(Region, int, int, unsigned int, unsigned int);
     * }
     */
    public static int XRectInRegion(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = XRectInRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSaveContext$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$3,"XSaveContext");
    }
    /**
     * {@snippet :
     * int XSaveContext(Display*, XID, XContext, char*);
     * }
     */
    public static int XSaveContext(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XSaveContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$4,"XSetClassHint");
    }
    /**
     * {@snippet :
     * int XSetClassHint(Display*, Window, XClassHint*);
     * }
     */
    public static int XSetClassHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetClassHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIconSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$229.const$5,"XSetIconSizes");
    }
    /**
     * {@snippet :
     * int XSetIconSizes(Display*, Window, XIconSize*, int);
     * }
     */
    public static int XSetIconSizes(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetIconSizes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$0,"XSetNormalHints");
    }
    /**
     * {@snippet :
     * int XSetNormalHints(Display*, Window, XSizeHints*);
     * }
     */
    public static int XSetNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetNormalHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetRGBColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$2,"XSetRGBColormaps");
    }
    /**
     * {@snippet :
     * void XSetRGBColormaps(Display*, Window, XStandardColormap*, int, Atom);
     * }
     */
    public static void XSetRGBColormaps(MemorySegment x0, long x1, MemorySegment x2, int x3, long x4) {
        var mh$ = XSetRGBColormaps$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$3,"XSetSizeHints");
    }
    /**
     * {@snippet :
     * int XSetSizeHints(Display*, Window, XSizeHints*, Atom);
     * }
     */
    public static int XSetSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetSizeHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStandardProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$230.const$5,"XSetStandardProperties");
    }
    /**
     * {@snippet :
     * int XSetStandardProperties(Display*, Window, char*, char*, Pixmap, char**, int, XSizeHints*);
     * }
     */
    public static int XSetStandardProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = XSetStandardProperties$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$1,"XSetTextProperty");
    }
    /**
     * {@snippet :
     * void XSetTextProperty(Display*, Window, XTextProperty*, Atom);
     * }
     */
    public static void XSetTextProperty(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetTextProperty$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMClientMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$3,"XSetWMClientMachine");
    }
    /**
     * {@snippet :
     * void XSetWMClientMachine(Display*, Window, XTextProperty*);
     * }
     */
    public static void XSetWMClientMachine(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMClientMachine$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$4,"XSetWMHints");
    }
    /**
     * {@snippet :
     * int XSetWMHints(Display*, Window, XWMHints*);
     * }
     */
    public static int XSetWMHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$231.const$5,"XSetWMIconName");
    }
    /**
     * {@snippet :
     * void XSetWMIconName(Display*, Window, XTextProperty*);
     * }
     */
    public static void XSetWMIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMIconName$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMName$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$0,"XSetWMName");
    }
    /**
     * {@snippet :
     * void XSetWMName(Display*, Window, XTextProperty*);
     * }
     */
    public static void XSetWMName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMName$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$1,"XSetWMNormalHints");
    }
    /**
     * {@snippet :
     * void XSetWMNormalHints(Display*, Window, XSizeHints*);
     * }
     */
    public static void XSetWMNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMNormalHints$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$3,"XSetWMProperties");
    }
    /**
     * {@snippet :
     * void XSetWMProperties(Display*, Window, XTextProperty*, XTextProperty*, char**, int, XSizeHints*, XWMHints*, XClassHint*);
     * }
     */
    public static void XSetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XSetWMProperties$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbSetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$4,"XmbSetWMProperties");
    }
    /**
     * {@snippet :
     * void XmbSetWMProperties(Display*, Window, char*, char*, char**, int, XSizeHints*, XWMHints*, XClassHint*);
     * }
     */
    public static void XmbSetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XmbSetWMProperties$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8SetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$232.const$5,"Xutf8SetWMProperties");
    }
    /**
     * {@snippet :
     * void Xutf8SetWMProperties(Display*, Window, char*, char*, char**, int, XSizeHints*, XWMHints*, XClassHint*);
     * }
     */
    public static void Xutf8SetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = Xutf8SetWMProperties$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$0,"XSetWMSizeHints");
    }
    /**
     * {@snippet :
     * void XSetWMSizeHints(Display*, Window, XSizeHints*, Atom);
     * }
     */
    public static void XSetWMSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetWMSizeHints$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$1,"XSetRegion");
    }
    /**
     * {@snippet :
     * int XSetRegion(Display*, GC, Region);
     * }
     */
    public static int XSetRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSetRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$2,"XSetStandardColormap");
    }
    /**
     * {@snippet :
     * void XSetStandardColormap(Display*, Window, XStandardColormap*, Atom);
     * }
     */
    public static void XSetStandardColormap(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetStandardColormap$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetZoomHints$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$3,"XSetZoomHints");
    }
    /**
     * {@snippet :
     * int XSetZoomHints(Display*, Window, XSizeHints*);
     * }
     */
    public static int XSetZoomHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetZoomHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XShrinkRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$4,"XShrinkRegion");
    }
    /**
     * {@snippet :
     * int XShrinkRegion(Region, int, int);
     * }
     */
    public static int XShrinkRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XShrinkRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStringListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$233.const$5,"XStringListToTextProperty");
    }
    /**
     * {@snippet :
     * int XStringListToTextProperty(char**, int, XTextProperty*);
     * }
     */
    public static int XStringListToTextProperty(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XStringListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSubtractRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$0,"XSubtractRegion");
    }
    /**
     * {@snippet :
     * int XSubtractRegion(Region, Region, Region);
     * }
     */
    public static int XSubtractRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSubtractRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$1,"XmbTextListToTextProperty");
    }
    /**
     * {@snippet :
     * int XmbTextListToTextProperty(Display* display, char** list, int count, XICCEncodingStyle style, XTextProperty* text_prop_return);
     * }
     */
    public static int XmbTextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = XmbTextListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$2,"XwcTextListToTextProperty");
    }
    /**
     * {@snippet :
     * int XwcTextListToTextProperty(Display* display, wchar_t** list, int count, XICCEncodingStyle style, XTextProperty* text_prop_return);
     * }
     */
    public static int XwcTextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = XwcTextListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$3,"Xutf8TextListToTextProperty");
    }
    /**
     * {@snippet :
     * int Xutf8TextListToTextProperty(Display* display, char** list, int count, XICCEncodingStyle style, XTextProperty* text_prop_return);
     * }
     */
    public static int Xutf8TextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = Xutf8TextListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcFreeStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$4,"XwcFreeStringList");
    }
    /**
     * {@snippet :
     * void XwcFreeStringList(wchar_t** list);
     * }
     */
    public static void XwcFreeStringList(MemorySegment list) {
        var mh$ = XwcFreeStringList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextPropertyToStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$234.const$5,"XTextPropertyToStringList");
    }
    /**
     * {@snippet :
     * int XTextPropertyToStringList(XTextProperty*, char***, int*);
     * }
     */
    public static int XTextPropertyToStringList(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XTextPropertyToStringList$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$235.const$0,"XmbTextPropertyToTextList");
    }
    /**
     * {@snippet :
     * int XmbTextPropertyToTextList(Display* display, const XTextProperty* text_prop, char*** list_return, int* count_return);
     * }
     */
    public static int XmbTextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = XmbTextPropertyToTextList$MH();
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$235.const$1,"XwcTextPropertyToTextList");
    }
    /**
     * {@snippet :
     * int XwcTextPropertyToTextList(Display* display, const XTextProperty* text_prop, wchar_t*** list_return, int* count_return);
     * }
     */
    public static int XwcTextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = XwcTextPropertyToTextList$MH();
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$235.const$2,"Xutf8TextPropertyToTextList");
    }
    /**
     * {@snippet :
     * int Xutf8TextPropertyToTextList(Display* display, const XTextProperty* text_prop, char*** list_return, int* count_return);
     * }
     */
    public static int Xutf8TextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = Xutf8TextPropertyToTextList$MH();
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnionRectWithRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$235.const$3,"XUnionRectWithRegion");
    }
    /**
     * {@snippet :
     * int XUnionRectWithRegion(XRectangle*, Region, Region);
     * }
     */
    public static int XUnionRectWithRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XUnionRectWithRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnionRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$235.const$4,"XUnionRegion");
    }
    /**
     * {@snippet :
     * int XUnionRegion(Region, Region, Region);
     * }
     */
    public static int XUnionRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XUnionRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWMGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$235.const$6,"XWMGeometry");
    }
    /**
     * {@snippet :
     * int XWMGeometry(Display*, int, char*, char*, unsigned int, XSizeHints*, int*, int*, int*, int*, int*);
     * }
     */
    public static int XWMGeometry(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, int x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8, MemorySegment x9, MemorySegment x10) {
        var mh$ = XWMGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XXorRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$236.const$0,"XXorRegion");
    }
    /**
     * {@snippet :
     * int XXorRegion(Region, Region, Region);
     * }
     */
    public static int XXorRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XXorRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define None 0
     * }
     */
    public static long None() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define ParentRelative 1
     * }
     */
    public static long ParentRelative() {
        return 1L;
    }
    /**
     * {@snippet :
     * #define CopyFromParent 0
     * }
     */
    public static long CopyFromParent() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define PointerWindow 0
     * }
     */
    public static long PointerWindow() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define InputFocus 1
     * }
     */
    public static long InputFocus() {
        return 1L;
    }
    /**
     * {@snippet :
     * #define PointerRoot 1
     * }
     */
    public static long PointerRoot() {
        return 1L;
    }
    /**
     * {@snippet :
     * #define AnyPropertyType 0
     * }
     */
    public static long AnyPropertyType() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define AnyKey 0
     * }
     */
    public static long AnyKey() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define AnyButton 0
     * }
     */
    public static long AnyButton() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define AllTemporary 0
     * }
     */
    public static long AllTemporary() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define CurrentTime 0
     * }
     */
    public static long CurrentTime() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define NoSymbol 0
     * }
     */
    public static long NoSymbol() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define NoEventMask 0
     * }
     */
    public static long NoEventMask() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define KeyPressMask 1
     * }
     */
    public static long KeyPressMask() {
        return 1L;
    }
    /**
     * {@snippet :
     * #define KeyReleaseMask 2
     * }
     */
    public static long KeyReleaseMask() {
        return 2L;
    }
    /**
     * {@snippet :
     * #define ButtonPressMask 4
     * }
     */
    public static long ButtonPressMask() {
        return 4L;
    }
    /**
     * {@snippet :
     * #define ButtonReleaseMask 8
     * }
     */
    public static long ButtonReleaseMask() {
        return 8L;
    }
    /**
     * {@snippet :
     * #define EnterWindowMask 16
     * }
     */
    public static long EnterWindowMask() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define LeaveWindowMask 32
     * }
     */
    public static long LeaveWindowMask() {
        return 32L;
    }
    /**
     * {@snippet :
     * #define PointerMotionMask 64
     * }
     */
    public static long PointerMotionMask() {
        return 64L;
    }
    /**
     * {@snippet :
     * #define PointerMotionHintMask 128
     * }
     */
    public static long PointerMotionHintMask() {
        return 128L;
    }
    /**
     * {@snippet :
     * #define Button1MotionMask 256
     * }
     */
    public static long Button1MotionMask() {
        return 256L;
    }
    /**
     * {@snippet :
     * #define Button2MotionMask 512
     * }
     */
    public static long Button2MotionMask() {
        return 512L;
    }
    /**
     * {@snippet :
     * #define Button3MotionMask 1024
     * }
     */
    public static long Button3MotionMask() {
        return 1024L;
    }
    /**
     * {@snippet :
     * #define Button4MotionMask 2048
     * }
     */
    public static long Button4MotionMask() {
        return 2048L;
    }
    /**
     * {@snippet :
     * #define Button5MotionMask 4096
     * }
     */
    public static long Button5MotionMask() {
        return 4096L;
    }
    /**
     * {@snippet :
     * #define ButtonMotionMask 8192
     * }
     */
    public static long ButtonMotionMask() {
        return 8192L;
    }
    /**
     * {@snippet :
     * #define KeymapStateMask 16384
     * }
     */
    public static long KeymapStateMask() {
        return 16384L;
    }
    /**
     * {@snippet :
     * #define ExposureMask 32768
     * }
     */
    public static long ExposureMask() {
        return 32768L;
    }
    /**
     * {@snippet :
     * #define VisibilityChangeMask 65536
     * }
     */
    public static long VisibilityChangeMask() {
        return 65536L;
    }
    /**
     * {@snippet :
     * #define StructureNotifyMask 131072
     * }
     */
    public static long StructureNotifyMask() {
        return 131072L;
    }
    /**
     * {@snippet :
     * #define ResizeRedirectMask 262144
     * }
     */
    public static long ResizeRedirectMask() {
        return 262144L;
    }
    /**
     * {@snippet :
     * #define SubstructureNotifyMask 524288
     * }
     */
    public static long SubstructureNotifyMask() {
        return 524288L;
    }
    /**
     * {@snippet :
     * #define SubstructureRedirectMask 1048576
     * }
     */
    public static long SubstructureRedirectMask() {
        return 1048576L;
    }
    /**
     * {@snippet :
     * #define FocusChangeMask 2097152
     * }
     */
    public static long FocusChangeMask() {
        return 2097152L;
    }
    /**
     * {@snippet :
     * #define PropertyChangeMask 4194304
     * }
     */
    public static long PropertyChangeMask() {
        return 4194304L;
    }
    /**
     * {@snippet :
     * #define ColormapChangeMask 8388608
     * }
     */
    public static long ColormapChangeMask() {
        return 8388608L;
    }
    /**
     * {@snippet :
     * #define OwnerGrabButtonMask 16777216
     * }
     */
    public static long OwnerGrabButtonMask() {
        return 16777216L;
    }
    /**
     * {@snippet :
     * #define ShiftMask 1
     * }
     */
    public static int ShiftMask() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define LockMask 2
     * }
     */
    public static int LockMask() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ControlMask 4
     * }
     */
    public static int ControlMask() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define Mod1Mask 8
     * }
     */
    public static int Mod1Mask() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define Mod2Mask 16
     * }
     */
    public static int Mod2Mask() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define Mod3Mask 32
     * }
     */
    public static int Mod3Mask() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define Mod4Mask 64
     * }
     */
    public static int Mod4Mask() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define Mod5Mask 128
     * }
     */
    public static int Mod5Mask() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define Button1Mask 256
     * }
     */
    public static int Button1Mask() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define Button2Mask 512
     * }
     */
    public static int Button2Mask() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define Button3Mask 1024
     * }
     */
    public static int Button3Mask() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define Button4Mask 2048
     * }
     */
    public static int Button4Mask() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define Button5Mask 4096
     * }
     */
    public static int Button5Mask() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define AnyModifier 32768
     * }
     */
    public static int AnyModifier() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define RevertToNone 0
     * }
     */
    public static int RevertToNone() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RevertToPointerRoot 1
     * }
     */
    public static int RevertToPointerRoot() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CWBackPixmap 1
     * }
     */
    public static long CWBackPixmap() {
        return 1L;
    }
    /**
     * {@snippet :
     * #define CWBackPixel 2
     * }
     */
    public static long CWBackPixel() {
        return 2L;
    }
    /**
     * {@snippet :
     * #define CWBorderPixmap 4
     * }
     */
    public static long CWBorderPixmap() {
        return 4L;
    }
    /**
     * {@snippet :
     * #define CWBorderPixel 8
     * }
     */
    public static long CWBorderPixel() {
        return 8L;
    }
    /**
     * {@snippet :
     * #define CWBitGravity 16
     * }
     */
    public static long CWBitGravity() {
        return 16L;
    }
}


