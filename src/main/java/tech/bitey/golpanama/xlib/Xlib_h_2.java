// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class Xlib_h_2 extends Xlib_h_1 {

    public static int XK_braille_dots_2567() {
        return (int)16787570L;
    }
    public static int XK_braille_dots_12567() {
        return (int)16787571L;
    }
    public static int XK_braille_dots_3567() {
        return (int)16787572L;
    }
    public static int XK_braille_dots_13567() {
        return (int)16787573L;
    }
    public static int XK_braille_dots_23567() {
        return (int)16787574L;
    }
    public static int XK_braille_dots_123567() {
        return (int)16787575L;
    }
    public static int XK_braille_dots_4567() {
        return (int)16787576L;
    }
    public static int XK_braille_dots_14567() {
        return (int)16787577L;
    }
    public static int XK_braille_dots_24567() {
        return (int)16787578L;
    }
    public static int XK_braille_dots_124567() {
        return (int)16787579L;
    }
    public static int XK_braille_dots_34567() {
        return (int)16787580L;
    }
    public static int XK_braille_dots_134567() {
        return (int)16787581L;
    }
    public static int XK_braille_dots_234567() {
        return (int)16787582L;
    }
    public static int XK_braille_dots_1234567() {
        return (int)16787583L;
    }
    public static int XK_braille_dots_8() {
        return (int)16787584L;
    }
    public static int XK_braille_dots_18() {
        return (int)16787585L;
    }
    public static int XK_braille_dots_28() {
        return (int)16787586L;
    }
    public static int XK_braille_dots_128() {
        return (int)16787587L;
    }
    public static int XK_braille_dots_38() {
        return (int)16787588L;
    }
    public static int XK_braille_dots_138() {
        return (int)16787589L;
    }
    public static int XK_braille_dots_238() {
        return (int)16787590L;
    }
    public static int XK_braille_dots_1238() {
        return (int)16787591L;
    }
    public static int XK_braille_dots_48() {
        return (int)16787592L;
    }
    public static int XK_braille_dots_148() {
        return (int)16787593L;
    }
    public static int XK_braille_dots_248() {
        return (int)16787594L;
    }
    public static int XK_braille_dots_1248() {
        return (int)16787595L;
    }
    public static int XK_braille_dots_348() {
        return (int)16787596L;
    }
    public static int XK_braille_dots_1348() {
        return (int)16787597L;
    }
    public static int XK_braille_dots_2348() {
        return (int)16787598L;
    }
    public static int XK_braille_dots_12348() {
        return (int)16787599L;
    }
    public static int XK_braille_dots_58() {
        return (int)16787600L;
    }
    public static int XK_braille_dots_158() {
        return (int)16787601L;
    }
    public static int XK_braille_dots_258() {
        return (int)16787602L;
    }
    public static int XK_braille_dots_1258() {
        return (int)16787603L;
    }
    public static int XK_braille_dots_358() {
        return (int)16787604L;
    }
    public static int XK_braille_dots_1358() {
        return (int)16787605L;
    }
    public static int XK_braille_dots_2358() {
        return (int)16787606L;
    }
    public static int XK_braille_dots_12358() {
        return (int)16787607L;
    }
    public static int XK_braille_dots_458() {
        return (int)16787608L;
    }
    public static int XK_braille_dots_1458() {
        return (int)16787609L;
    }
    public static int XK_braille_dots_2458() {
        return (int)16787610L;
    }
    public static int XK_braille_dots_12458() {
        return (int)16787611L;
    }
    public static int XK_braille_dots_3458() {
        return (int)16787612L;
    }
    public static int XK_braille_dots_13458() {
        return (int)16787613L;
    }
    public static int XK_braille_dots_23458() {
        return (int)16787614L;
    }
    public static int XK_braille_dots_123458() {
        return (int)16787615L;
    }
    public static int XK_braille_dots_68() {
        return (int)16787616L;
    }
    public static int XK_braille_dots_168() {
        return (int)16787617L;
    }
    public static int XK_braille_dots_268() {
        return (int)16787618L;
    }
    public static int XK_braille_dots_1268() {
        return (int)16787619L;
    }
    public static int XK_braille_dots_368() {
        return (int)16787620L;
    }
    public static int XK_braille_dots_1368() {
        return (int)16787621L;
    }
    public static int XK_braille_dots_2368() {
        return (int)16787622L;
    }
    public static int XK_braille_dots_12368() {
        return (int)16787623L;
    }
    public static int XK_braille_dots_468() {
        return (int)16787624L;
    }
    public static int XK_braille_dots_1468() {
        return (int)16787625L;
    }
    public static int XK_braille_dots_2468() {
        return (int)16787626L;
    }
    public static int XK_braille_dots_12468() {
        return (int)16787627L;
    }
    public static int XK_braille_dots_3468() {
        return (int)16787628L;
    }
    public static int XK_braille_dots_13468() {
        return (int)16787629L;
    }
    public static int XK_braille_dots_23468() {
        return (int)16787630L;
    }
    public static int XK_braille_dots_123468() {
        return (int)16787631L;
    }
    public static int XK_braille_dots_568() {
        return (int)16787632L;
    }
    public static int XK_braille_dots_1568() {
        return (int)16787633L;
    }
    public static int XK_braille_dots_2568() {
        return (int)16787634L;
    }
    public static int XK_braille_dots_12568() {
        return (int)16787635L;
    }
    public static int XK_braille_dots_3568() {
        return (int)16787636L;
    }
    public static int XK_braille_dots_13568() {
        return (int)16787637L;
    }
    public static int XK_braille_dots_23568() {
        return (int)16787638L;
    }
    public static int XK_braille_dots_123568() {
        return (int)16787639L;
    }
    public static int XK_braille_dots_4568() {
        return (int)16787640L;
    }
    public static int XK_braille_dots_14568() {
        return (int)16787641L;
    }
    public static int XK_braille_dots_24568() {
        return (int)16787642L;
    }
    public static int XK_braille_dots_124568() {
        return (int)16787643L;
    }
    public static int XK_braille_dots_34568() {
        return (int)16787644L;
    }
    public static int XK_braille_dots_134568() {
        return (int)16787645L;
    }
    public static int XK_braille_dots_234568() {
        return (int)16787646L;
    }
    public static int XK_braille_dots_1234568() {
        return (int)16787647L;
    }
    public static int XK_braille_dots_78() {
        return (int)16787648L;
    }
    public static int XK_braille_dots_178() {
        return (int)16787649L;
    }
    public static int XK_braille_dots_278() {
        return (int)16787650L;
    }
    public static int XK_braille_dots_1278() {
        return (int)16787651L;
    }
    public static int XK_braille_dots_378() {
        return (int)16787652L;
    }
    public static int XK_braille_dots_1378() {
        return (int)16787653L;
    }
    public static int XK_braille_dots_2378() {
        return (int)16787654L;
    }
    public static int XK_braille_dots_12378() {
        return (int)16787655L;
    }
    public static int XK_braille_dots_478() {
        return (int)16787656L;
    }
    public static int XK_braille_dots_1478() {
        return (int)16787657L;
    }
    public static int XK_braille_dots_2478() {
        return (int)16787658L;
    }
    public static int XK_braille_dots_12478() {
        return (int)16787659L;
    }
    public static int XK_braille_dots_3478() {
        return (int)16787660L;
    }
    public static int XK_braille_dots_13478() {
        return (int)16787661L;
    }
    public static int XK_braille_dots_23478() {
        return (int)16787662L;
    }
    public static int XK_braille_dots_123478() {
        return (int)16787663L;
    }
    public static int XK_braille_dots_578() {
        return (int)16787664L;
    }
    public static int XK_braille_dots_1578() {
        return (int)16787665L;
    }
    public static int XK_braille_dots_2578() {
        return (int)16787666L;
    }
    public static int XK_braille_dots_12578() {
        return (int)16787667L;
    }
    public static int XK_braille_dots_3578() {
        return (int)16787668L;
    }
    public static int XK_braille_dots_13578() {
        return (int)16787669L;
    }
    public static int XK_braille_dots_23578() {
        return (int)16787670L;
    }
    public static int XK_braille_dots_123578() {
        return (int)16787671L;
    }
    public static int XK_braille_dots_4578() {
        return (int)16787672L;
    }
    public static int XK_braille_dots_14578() {
        return (int)16787673L;
    }
    public static int XK_braille_dots_24578() {
        return (int)16787674L;
    }
    public static int XK_braille_dots_124578() {
        return (int)16787675L;
    }
    public static int XK_braille_dots_34578() {
        return (int)16787676L;
    }
    public static int XK_braille_dots_134578() {
        return (int)16787677L;
    }
    public static int XK_braille_dots_234578() {
        return (int)16787678L;
    }
    public static int XK_braille_dots_1234578() {
        return (int)16787679L;
    }
    public static int XK_braille_dots_678() {
        return (int)16787680L;
    }
    public static int XK_braille_dots_1678() {
        return (int)16787681L;
    }
    public static int XK_braille_dots_2678() {
        return (int)16787682L;
    }
    public static int XK_braille_dots_12678() {
        return (int)16787683L;
    }
    public static int XK_braille_dots_3678() {
        return (int)16787684L;
    }
    public static int XK_braille_dots_13678() {
        return (int)16787685L;
    }
    public static int XK_braille_dots_23678() {
        return (int)16787686L;
    }
    public static int XK_braille_dots_123678() {
        return (int)16787687L;
    }
    public static int XK_braille_dots_4678() {
        return (int)16787688L;
    }
    public static int XK_braille_dots_14678() {
        return (int)16787689L;
    }
    public static int XK_braille_dots_24678() {
        return (int)16787690L;
    }
    public static int XK_braille_dots_124678() {
        return (int)16787691L;
    }
    public static int XK_braille_dots_34678() {
        return (int)16787692L;
    }
    public static int XK_braille_dots_134678() {
        return (int)16787693L;
    }
    public static int XK_braille_dots_234678() {
        return (int)16787694L;
    }
    public static int XK_braille_dots_1234678() {
        return (int)16787695L;
    }
    public static int XK_braille_dots_5678() {
        return (int)16787696L;
    }
    public static int XK_braille_dots_15678() {
        return (int)16787697L;
    }
    public static int XK_braille_dots_25678() {
        return (int)16787698L;
    }
    public static int XK_braille_dots_125678() {
        return (int)16787699L;
    }
    public static int XK_braille_dots_35678() {
        return (int)16787700L;
    }
    public static int XK_braille_dots_135678() {
        return (int)16787701L;
    }
    public static int XK_braille_dots_235678() {
        return (int)16787702L;
    }
    public static int XK_braille_dots_1235678() {
        return (int)16787703L;
    }
    public static int XK_braille_dots_45678() {
        return (int)16787704L;
    }
    public static int XK_braille_dots_145678() {
        return (int)16787705L;
    }
    public static int XK_braille_dots_245678() {
        return (int)16787706L;
    }
    public static int XK_braille_dots_1245678() {
        return (int)16787707L;
    }
    public static int XK_braille_dots_345678() {
        return (int)16787708L;
    }
    public static int XK_braille_dots_1345678() {
        return (int)16787709L;
    }
    public static int XK_braille_dots_2345678() {
        return (int)16787710L;
    }
    public static int XK_braille_dots_12345678() {
        return (int)16787711L;
    }
    public static int XK_Sinh_ng() {
        return (int)16780674L;
    }
    public static int XK_Sinh_h2() {
        return (int)16780675L;
    }
    public static int XK_Sinh_a() {
        return (int)16780677L;
    }
    public static int XK_Sinh_aa() {
        return (int)16780678L;
    }
    public static int XK_Sinh_ae() {
        return (int)16780679L;
    }
    public static int XK_Sinh_aee() {
        return (int)16780680L;
    }
    public static int XK_Sinh_i() {
        return (int)16780681L;
    }
    public static int XK_Sinh_ii() {
        return (int)16780682L;
    }
    public static int XK_Sinh_u() {
        return (int)16780683L;
    }
    public static int XK_Sinh_uu() {
        return (int)16780684L;
    }
    public static int XK_Sinh_ri() {
        return (int)16780685L;
    }
    public static int XK_Sinh_rii() {
        return (int)16780686L;
    }
    public static int XK_Sinh_lu() {
        return (int)16780687L;
    }
    public static int XK_Sinh_luu() {
        return (int)16780688L;
    }
    public static int XK_Sinh_e() {
        return (int)16780689L;
    }
    public static int XK_Sinh_ee() {
        return (int)16780690L;
    }
    public static int XK_Sinh_ai() {
        return (int)16780691L;
    }
    public static int XK_Sinh_o() {
        return (int)16780692L;
    }
    public static int XK_Sinh_oo() {
        return (int)16780693L;
    }
    public static int XK_Sinh_au() {
        return (int)16780694L;
    }
    public static int XK_Sinh_ka() {
        return (int)16780698L;
    }
    public static int XK_Sinh_kha() {
        return (int)16780699L;
    }
    public static int XK_Sinh_ga() {
        return (int)16780700L;
    }
    public static int XK_Sinh_gha() {
        return (int)16780701L;
    }
    public static int XK_Sinh_ng2() {
        return (int)16780702L;
    }
    public static int XK_Sinh_nga() {
        return (int)16780703L;
    }
    public static int XK_Sinh_ca() {
        return (int)16780704L;
    }
    public static int XK_Sinh_cha() {
        return (int)16780705L;
    }
    public static int XK_Sinh_ja() {
        return (int)16780706L;
    }
    public static int XK_Sinh_jha() {
        return (int)16780707L;
    }
    public static int XK_Sinh_nya() {
        return (int)16780708L;
    }
    public static int XK_Sinh_jnya() {
        return (int)16780709L;
    }
    public static int XK_Sinh_nja() {
        return (int)16780710L;
    }
    public static int XK_Sinh_tta() {
        return (int)16780711L;
    }
    public static int XK_Sinh_ttha() {
        return (int)16780712L;
    }
    public static int XK_Sinh_dda() {
        return (int)16780713L;
    }
    public static int XK_Sinh_ddha() {
        return (int)16780714L;
    }
    public static int XK_Sinh_nna() {
        return (int)16780715L;
    }
    public static int XK_Sinh_ndda() {
        return (int)16780716L;
    }
    public static int XK_Sinh_tha() {
        return (int)16780717L;
    }
    public static int XK_Sinh_thha() {
        return (int)16780718L;
    }
    public static int XK_Sinh_dha() {
        return (int)16780719L;
    }
    public static int XK_Sinh_dhha() {
        return (int)16780720L;
    }
    public static int XK_Sinh_na() {
        return (int)16780721L;
    }
    public static int XK_Sinh_ndha() {
        return (int)16780723L;
    }
    public static int XK_Sinh_pa() {
        return (int)16780724L;
    }
    public static int XK_Sinh_pha() {
        return (int)16780725L;
    }
    public static int XK_Sinh_ba() {
        return (int)16780726L;
    }
    public static int XK_Sinh_bha() {
        return (int)16780727L;
    }
    public static int XK_Sinh_ma() {
        return (int)16780728L;
    }
    public static int XK_Sinh_mba() {
        return (int)16780729L;
    }
    public static int XK_Sinh_ya() {
        return (int)16780730L;
    }
    public static int XK_Sinh_ra() {
        return (int)16780731L;
    }
    public static int XK_Sinh_la() {
        return (int)16780733L;
    }
    public static int XK_Sinh_va() {
        return (int)16780736L;
    }
    public static int XK_Sinh_sha() {
        return (int)16780737L;
    }
    public static int XK_Sinh_ssha() {
        return (int)16780738L;
    }
    public static int XK_Sinh_sa() {
        return (int)16780739L;
    }
    public static int XK_Sinh_ha() {
        return (int)16780740L;
    }
    public static int XK_Sinh_lla() {
        return (int)16780741L;
    }
    public static int XK_Sinh_fa() {
        return (int)16780742L;
    }
    public static int XK_Sinh_al() {
        return (int)16780746L;
    }
    public static int XK_Sinh_aa2() {
        return (int)16780751L;
    }
    public static int XK_Sinh_ae2() {
        return (int)16780752L;
    }
    public static int XK_Sinh_aee2() {
        return (int)16780753L;
    }
    public static int XK_Sinh_i2() {
        return (int)16780754L;
    }
    public static int XK_Sinh_ii2() {
        return (int)16780755L;
    }
    public static int XK_Sinh_u2() {
        return (int)16780756L;
    }
    public static int XK_Sinh_uu2() {
        return (int)16780758L;
    }
    public static int XK_Sinh_ru2() {
        return (int)16780760L;
    }
    public static int XK_Sinh_e2() {
        return (int)16780761L;
    }
    public static int XK_Sinh_ee2() {
        return (int)16780762L;
    }
    public static int XK_Sinh_ai2() {
        return (int)16780763L;
    }
    public static int XK_Sinh_o2() {
        return (int)16780764L;
    }
    public static int XK_Sinh_oo2() {
        return (int)16780765L;
    }
    public static int XK_Sinh_au2() {
        return (int)16780766L;
    }
    public static int XK_Sinh_lu2() {
        return (int)16780767L;
    }
    public static int XK_Sinh_ruu2() {
        return (int)16780786L;
    }
    public static int XK_Sinh_luu2() {
        return (int)16780787L;
    }
    public static int XK_Sinh_kunddaliya() {
        return (int)16780788L;
    }
    public static int NoValue() {
        return (int)0L;
    }
    public static int XValue() {
        return (int)1L;
    }
    public static int YValue() {
        return (int)2L;
    }
    public static int WidthValue() {
        return (int)4L;
    }
    public static int HeightValue() {
        return (int)8L;
    }
    public static int AllValues() {
        return (int)15L;
    }
    public static int XNegative() {
        return (int)16L;
    }
    public static int YNegative() {
        return (int)32L;
    }
    public static int WithdrawnState() {
        return (int)0L;
    }
    public static int NormalState() {
        return (int)1L;
    }
    public static int IconicState() {
        return (int)3L;
    }
    public static int DontCareState() {
        return (int)0L;
    }
    public static int ZoomState() {
        return (int)2L;
    }
    public static int InactiveState() {
        return (int)4L;
    }
    public static int RectangleOut() {
        return (int)0L;
    }
    public static int RectangleIn() {
        return (int)1L;
    }
    public static int RectanglePart() {
        return (int)2L;
    }
    public static int VisualNoMask() {
        return (int)0L;
    }
    public static int VisualIDMask() {
        return (int)1L;
    }
    public static int VisualScreenMask() {
        return (int)2L;
    }
    public static int VisualDepthMask() {
        return (int)4L;
    }
    public static int VisualClassMask() {
        return (int)8L;
    }
    public static int VisualRedMaskMask() {
        return (int)16L;
    }
    public static int VisualGreenMaskMask() {
        return (int)32L;
    }
    public static int VisualBlueMaskMask() {
        return (int)64L;
    }
    public static int VisualColormapSizeMask() {
        return (int)128L;
    }
    public static int VisualBitsPerRGBMask() {
        return (int)256L;
    }
    public static int VisualAllMask() {
        return (int)511L;
    }
    public static int BitmapSuccess() {
        return (int)0L;
    }
    public static int BitmapOpenFailed() {
        return (int)1L;
    }
    public static int BitmapFileInvalid() {
        return (int)2L;
    }
    public static int BitmapNoMemory() {
        return (int)3L;
    }
    public static int XCSUCCESS() {
        return (int)0L;
    }
    public static int XCNOMEM() {
        return (int)1L;
    }
    public static int XCNOENT() {
        return (int)2L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__bswap_16$MH, "__bswap_16");
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__bswap_32$MH, "__bswap_32");
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__bswap_64$MH, "__bswap_64");
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__uint16_identity$MH, "__uint16_identity");
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__uint32_identity$MH, "__uint32_identity");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__uint64_identity$MH, "__uint64_identity");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.select$MH, "select");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$1.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.pselect$MH, "pselect");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle _Xmblen$MH() {
        return RuntimeHelper.requireNonNull(constants$1._Xmblen$MH,"_Xmblen");
    }
    public static int _Xmblen ( Addressable str,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1._Xmblen$MH, "_Xmblen");
        try {
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress XPointer = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress _XPrivDisplay = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XOM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XOC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XFontSet = Constants$root.C_POINTER$LAYOUT;
    public static int XOMOrientation_LTR_TTB() {
        return (int)0L;
    }
    public static int XOMOrientation_RTL_TTB() {
        return (int)1L;
    }
    public static int XOMOrientation_TTB_LTR() {
        return (int)2L;
    }
    public static int XOMOrientation_TTB_RTL() {
        return (int)3L;
    }
    public static int XOMOrientation_Context() {
        return (int)4L;
    }
    public static OfAddress XIM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XVaNestedList = Constants$root.C_POINTER$LAYOUT;
    public static int XIMForwardChar() {
        return (int)0L;
    }
    public static int XIMBackwardChar() {
        return (int)1L;
    }
    public static int XIMForwardWord() {
        return (int)2L;
    }
    public static int XIMBackwardWord() {
        return (int)3L;
    }
    public static int XIMCaretUp() {
        return (int)4L;
    }
    public static int XIMCaretDown() {
        return (int)5L;
    }
    public static int XIMNextLine() {
        return (int)6L;
    }
    public static int XIMPreviousLine() {
        return (int)7L;
    }
    public static int XIMLineStart() {
        return (int)8L;
    }
    public static int XIMLineEnd() {
        return (int)9L;
    }
    public static int XIMAbsolutePosition() {
        return (int)10L;
    }
    public static int XIMDontChange() {
        return (int)11L;
    }
    public static int XIMIsInvisible() {
        return (int)0L;
    }
    public static int XIMIsPrimary() {
        return (int)1L;
    }
    public static int XIMIsSecondary() {
        return (int)2L;
    }
    public static int XIMTextType() {
        return (int)0L;
    }
    public static int XIMBitmapType() {
        return (int)1L;
    }
    public static MemoryLayout _Xdebug$LAYOUT() {
        return constants$2._Xdebug$LAYOUT;
    }
    public static VarHandle _Xdebug$VH() {
        return constants$2._Xdebug$VH;
    }
    public static MemorySegment _Xdebug$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2._Xdebug$SEGMENT,"_Xdebug");
    }
    public static int _Xdebug$get() {
        return (int) constants$2._Xdebug$VH.get(RuntimeHelper.requireNonNull(constants$2._Xdebug$SEGMENT, "_Xdebug"));
    }
    public static void _Xdebug$set( int x) {
        constants$2._Xdebug$VH.set(RuntimeHelper.requireNonNull(constants$2._Xdebug$SEGMENT, "_Xdebug"), x);
    }
    public static MethodHandle XLoadQueryFont$MH() {
        return RuntimeHelper.requireNonNull(constants$2.XLoadQueryFont$MH,"XLoadQueryFont");
    }
    public static MemoryAddress XLoadQueryFont ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.XLoadQueryFont$MH, "XLoadQueryFont");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryFont$MH() {
        return RuntimeHelper.requireNonNull(constants$2.XQueryFont$MH,"XQueryFont");
    }
    public static MemoryAddress XQueryFont ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.XQueryFont$MH, "XQueryFont");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetMotionEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XGetMotionEvents$MH,"XGetMotionEvents");
    }
    public static MemoryAddress XGetMotionEvents ( Addressable x0,  long x1,  long x2,  long x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.XGetMotionEvents$MH, "XGetMotionEvents");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteModifiermapEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XDeleteModifiermapEntry$MH,"XDeleteModifiermapEntry");
    }
    public static MemoryAddress XDeleteModifiermapEntry ( Addressable x0,  byte x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.XDeleteModifiermapEntry$MH, "XDeleteModifiermapEntry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetModifierMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XGetModifierMapping$MH,"XGetModifierMapping");
    }
    public static MemoryAddress XGetModifierMapping ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.XGetModifierMapping$MH, "XGetModifierMapping");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInsertModifiermapEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XInsertModifiermapEntry$MH,"XInsertModifiermapEntry");
    }
    public static MemoryAddress XInsertModifiermapEntry ( Addressable x0,  byte x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.XInsertModifiermapEntry$MH, "XInsertModifiermapEntry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNewModifiermap$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XNewModifiermap$MH,"XNewModifiermap");
    }
    public static MemoryAddress XNewModifiermap ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.XNewModifiermap$MH, "XNewModifiermap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateImage$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XCreateImage$MH,"XCreateImage");
    }
    public static MemoryAddress XCreateImage ( Addressable x0,  Addressable x1,  int x2,  int x3,  int x4,  Addressable x5,  int x6,  int x7,  int x8,  int x9) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.XCreateImage$MH, "XCreateImage");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitImage$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XInitImage$MH,"XInitImage");
    }
    public static int XInitImage ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.XInitImage$MH, "XInitImage");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetImage$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XGetImage$MH,"XGetImage");
    }
    public static MemoryAddress XGetImage ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  long x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.XGetImage$MH, "XGetImage");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSubImage$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XGetSubImage$MH,"XGetSubImage");
    }
    public static MemoryAddress XGetSubImage ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  long x6,  int x7,  Addressable x8,  int x9,  int x10) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.XGetSubImage$MH, "XGetSubImage");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XOpenDisplay$MH,"XOpenDisplay");
    }
    public static MemoryAddress XOpenDisplay ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.XOpenDisplay$MH, "XOpenDisplay");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XrmInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XrmInitialize$MH,"XrmInitialize");
    }
    public static void XrmInitialize () {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.XrmInitialize$MH, "XrmInitialize");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XFetchBytes$MH,"XFetchBytes");
    }
    public static MemoryAddress XFetchBytes ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.XFetchBytes$MH, "XFetchBytes");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XFetchBuffer$MH,"XFetchBuffer");
    }
    public static MemoryAddress XFetchBuffer ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.XFetchBuffer$MH, "XFetchBuffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetAtomName$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XGetAtomName$MH,"XGetAtomName");
    }
    public static MemoryAddress XGetAtomName ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.XGetAtomName$MH, "XGetAtomName");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetAtomNames$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XGetAtomNames$MH,"XGetAtomNames");
    }
    public static int XGetAtomNames ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.XGetAtomNames$MH, "XGetAtomNames");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XGetDefault$MH,"XGetDefault");
    }
    public static MemoryAddress XGetDefault ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.XGetDefault$MH, "XGetDefault");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayName$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XDisplayName$MH,"XDisplayName");
    }
    public static MemoryAddress XDisplayName ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.XDisplayName$MH, "XDisplayName");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeysymToString$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XKeysymToString$MH,"XKeysymToString");
    }
    public static MemoryAddress XKeysymToString ( long x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.XKeysymToString$MH, "XKeysymToString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSynchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XSynchronize$MH,"XSynchronize");
    }
    public static MemoryAddress XSynchronize ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.XSynchronize$MH, "XSynchronize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAfterFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XSetAfterFunction$MH,"XSetAfterFunction");
    }
    public static MemoryAddress XSetAfterFunction ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.XSetAfterFunction$MH, "XSetAfterFunction");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternAtom$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XInternAtom$MH,"XInternAtom");
    }
    public static long XInternAtom ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.XInternAtom$MH, "XInternAtom");
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternAtoms$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XInternAtoms$MH,"XInternAtoms");
    }
    public static int XInternAtoms ( Addressable x0,  Addressable x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.XInternAtoms$MH, "XInternAtoms");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyColormapAndFree$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCopyColormapAndFree$MH,"XCopyColormapAndFree");
    }
    public static long XCopyColormapAndFree ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.XCopyColormapAndFree$MH, "XCopyColormapAndFree");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreateColormap$MH,"XCreateColormap");
    }
    public static long XCreateColormap ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.XCreateColormap$MH, "XCreateColormap");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmapCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreatePixmapCursor$MH,"XCreatePixmapCursor");
    }
    public static long XCreatePixmapCursor ( Addressable x0,  long x1,  long x2,  Addressable x3,  Addressable x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.XCreatePixmapCursor$MH, "XCreatePixmapCursor");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateGlyphCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreateGlyphCursor$MH,"XCreateGlyphCursor");
    }
    public static long XCreateGlyphCursor ( Addressable x0,  long x1,  long x2,  int x3,  int x4,  Addressable x5,  Addressable x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.XCreateGlyphCursor$MH, "XCreateGlyphCursor");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateFontCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreateFontCursor$MH,"XCreateFontCursor");
    }
    public static long XCreateFontCursor ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.XCreateFontCursor$MH, "XCreateFontCursor");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLoadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XLoadFont$MH,"XLoadFont");
    }
    public static long XLoadFont ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.XLoadFont$MH, "XLoadFont");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateGC$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreateGC$MH,"XCreateGC");
    }
    public static MemoryAddress XCreateGC ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.XCreateGC$MH, "XCreateGC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGContextFromGC$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XGContextFromGC$MH,"XGContextFromGC");
    }
    public static long XGContextFromGC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.XGContextFromGC$MH, "XGContextFromGC");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFlushGC$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XFlushGC$MH,"XFlushGC");
    }
    public static void XFlushGC ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.XFlushGC$MH, "XFlushGC");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreatePixmap$MH,"XCreatePixmap");
    }
    public static long XCreatePixmap ( Addressable x0,  long x1,  int x2,  int x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.XCreatePixmap$MH, "XCreatePixmap");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateBitmapFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreateBitmapFromData$MH,"XCreateBitmapFromData");
    }
    public static long XCreateBitmapFromData ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.XCreateBitmapFromData$MH, "XCreateBitmapFromData");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmapFromBitmapData$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreatePixmapFromBitmapData$MH,"XCreatePixmapFromBitmapData");
    }
    public static long XCreatePixmapFromBitmapData ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  long x5,  long x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.XCreatePixmapFromBitmapData$MH, "XCreatePixmapFromBitmapData");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateSimpleWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XCreateSimpleWindow$MH,"XCreateSimpleWindow");
    }
    public static long XCreateSimpleWindow ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  int x6,  long x7,  long x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.XCreateSimpleWindow$MH, "XCreateSimpleWindow");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSelectionOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XGetSelectionOwner$MH,"XGetSelectionOwner");
    }
    public static long XGetSelectionOwner ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.XGetSelectionOwner$MH, "XGetSelectionOwner");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XCreateWindow$MH,"XCreateWindow");
    }
    public static long XCreateWindow ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8,  Addressable x9,  long x10,  Addressable x11) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.XCreateWindow$MH, "XCreateWindow");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListInstalledColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XListInstalledColormaps$MH,"XListInstalledColormaps");
    }
    public static MemoryAddress XListInstalledColormaps ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.XListInstalledColormaps$MH, "XListInstalledColormaps");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListFonts$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XListFonts$MH,"XListFonts");
    }
    public static MemoryAddress XListFonts ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.XListFonts$MH, "XListFonts");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListFontsWithInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XListFontsWithInfo$MH,"XListFontsWithInfo");
    }
    public static MemoryAddress XListFontsWithInfo ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.XListFontsWithInfo$MH, "XListFontsWithInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XGetFontPath$MH,"XGetFontPath");
    }
    public static MemoryAddress XGetFontPath ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.XGetFontPath$MH, "XGetFontPath");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListExtensions$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XListExtensions$MH,"XListExtensions");
    }
    public static MemoryAddress XListExtensions ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.XListExtensions$MH, "XListExtensions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XListProperties$MH,"XListProperties");
    }
    public static MemoryAddress XListProperties ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.XListProperties$MH, "XListProperties");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XListHosts$MH,"XListHosts");
    }
    public static MemoryAddress XListHosts ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.XListHosts$MH, "XListHosts");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeycodeToKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XKeycodeToKeysym$MH,"XKeycodeToKeysym");
    }
    public static long XKeycodeToKeysym ( Addressable x0,  byte x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.XKeycodeToKeysym$MH, "XKeycodeToKeysym");
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XLookupKeysym$MH,"XLookupKeysym");
    }
    public static long XLookupKeysym ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.XLookupKeysym$MH, "XLookupKeysym");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XGetKeyboardMapping$MH,"XGetKeyboardMapping");
    }
    public static MemoryAddress XGetKeyboardMapping ( Addressable x0,  byte x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.XGetKeyboardMapping$MH, "XGetKeyboardMapping");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStringToKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XStringToKeysym$MH,"XStringToKeysym");
    }
    public static long XStringToKeysym ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.XStringToKeysym$MH, "XStringToKeysym");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaxRequestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XMaxRequestSize$MH,"XMaxRequestSize");
    }
    public static long XMaxRequestSize ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.XMaxRequestSize$MH, "XMaxRequestSize");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XExtendedMaxRequestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XExtendedMaxRequestSize$MH,"XExtendedMaxRequestSize");
    }
    public static long XExtendedMaxRequestSize ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.XExtendedMaxRequestSize$MH, "XExtendedMaxRequestSize");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResourceManagerString$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XResourceManagerString$MH,"XResourceManagerString");
    }
    public static MemoryAddress XResourceManagerString ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.XResourceManagerString$MH, "XResourceManagerString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenResourceString$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XScreenResourceString$MH,"XScreenResourceString");
    }
    public static MemoryAddress XScreenResourceString ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.XScreenResourceString$MH, "XScreenResourceString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayMotionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XDisplayMotionBufferSize$MH,"XDisplayMotionBufferSize");
    }
    public static long XDisplayMotionBufferSize ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.XDisplayMotionBufferSize$MH, "XDisplayMotionBufferSize");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVisualIDFromVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XVisualIDFromVisual$MH,"XVisualIDFromVisual");
    }
    public static long XVisualIDFromVisual ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.XVisualIDFromVisual$MH, "XVisualIDFromVisual");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitThreads$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XInitThreads$MH,"XInitThreads");
    }
    public static int XInitThreads () {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.XInitThreads$MH, "XInitThreads");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLockDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XLockDisplay$MH,"XLockDisplay");
    }
    public static void XLockDisplay ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.XLockDisplay$MH, "XLockDisplay");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnlockDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XUnlockDisplay$MH,"XUnlockDisplay");
    }
    public static void XUnlockDisplay ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.XUnlockDisplay$MH, "XUnlockDisplay");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XInitExtension$MH,"XInitExtension");
    }
    public static MemoryAddress XInitExtension ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.XInitExtension$MH, "XInitExtension");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XAddExtension$MH,"XAddExtension");
    }
    public static MemoryAddress XAddExtension ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.XAddExtension$MH, "XAddExtension");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFindOnExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XFindOnExtensionList$MH,"XFindOnExtensionList");
    }
    public static MemoryAddress XFindOnExtensionList ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.XFindOnExtensionList$MH, "XFindOnExtensionList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEHeadOfExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XEHeadOfExtensionList$MH,"XEHeadOfExtensionList");
    }
    public static MemoryAddress XEHeadOfExtensionList ( MemorySegment x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.XEHeadOfExtensionList$MH, "XEHeadOfExtensionList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRootWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XRootWindow$MH,"XRootWindow");
    }
    public static long XRootWindow ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.XRootWindow$MH, "XRootWindow");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultRootWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XDefaultRootWindow$MH,"XDefaultRootWindow");
    }
    public static long XDefaultRootWindow ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.XDefaultRootWindow$MH, "XDefaultRootWindow");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRootWindowOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XRootWindowOfScreen$MH,"XRootWindowOfScreen");
    }
    public static long XRootWindowOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.XRootWindowOfScreen$MH, "XRootWindowOfScreen");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultVisual$MH,"XDefaultVisual");
    }
    public static MemoryAddress XDefaultVisual ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.XDefaultVisual$MH, "XDefaultVisual");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultVisualOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultVisualOfScreen$MH,"XDefaultVisualOfScreen");
    }
    public static MemoryAddress XDefaultVisualOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.XDefaultVisualOfScreen$MH, "XDefaultVisualOfScreen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultGC$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultGC$MH,"XDefaultGC");
    }
    public static MemoryAddress XDefaultGC ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.XDefaultGC$MH, "XDefaultGC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultGCOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultGCOfScreen$MH,"XDefaultGCOfScreen");
    }
    public static MemoryAddress XDefaultGCOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.XDefaultGCOfScreen$MH, "XDefaultGCOfScreen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBlackPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XBlackPixel$MH,"XBlackPixel");
    }
    public static long XBlackPixel ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.XBlackPixel$MH, "XBlackPixel");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWhitePixel$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XWhitePixel$MH,"XWhitePixel");
    }
    public static long XWhitePixel ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.XWhitePixel$MH, "XWhitePixel");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XAllPlanes$MH,"XAllPlanes");
    }
    public static long XAllPlanes () {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.XAllPlanes$MH, "XAllPlanes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBlackPixelOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XBlackPixelOfScreen$MH,"XBlackPixelOfScreen");
    }
    public static long XBlackPixelOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.XBlackPixelOfScreen$MH, "XBlackPixelOfScreen");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWhitePixelOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XWhitePixelOfScreen$MH,"XWhitePixelOfScreen");
    }
    public static long XWhitePixelOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.XWhitePixelOfScreen$MH, "XWhitePixelOfScreen");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNextRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XNextRequest$MH,"XNextRequest");
    }
    public static long XNextRequest ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.XNextRequest$MH, "XNextRequest");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLastKnownRequestProcessed$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XLastKnownRequestProcessed$MH,"XLastKnownRequestProcessed");
    }
    public static long XLastKnownRequestProcessed ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.XLastKnownRequestProcessed$MH, "XLastKnownRequestProcessed");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XServerVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XServerVendor$MH,"XServerVendor");
    }
    public static MemoryAddress XServerVendor ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.XServerVendor$MH, "XServerVendor");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayString$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDisplayString$MH,"XDisplayString");
    }
    public static MemoryAddress XDisplayString ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.XDisplayString$MH, "XDisplayString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDefaultColormap$MH,"XDefaultColormap");
    }
    public static long XDefaultColormap ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.XDefaultColormap$MH, "XDefaultColormap");
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultColormapOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDefaultColormapOfScreen$MH,"XDefaultColormapOfScreen");
    }
    public static long XDefaultColormapOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.XDefaultColormapOfScreen$MH, "XDefaultColormapOfScreen");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDisplayOfScreen$MH,"XDisplayOfScreen");
    }
    public static MemoryAddress XDisplayOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.XDisplayOfScreen$MH, "XDisplayOfScreen");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenOfDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XScreenOfDisplay$MH,"XScreenOfDisplay");
    }
    public static MemoryAddress XScreenOfDisplay ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.XScreenOfDisplay$MH, "XScreenOfDisplay");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultScreenOfDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDefaultScreenOfDisplay$MH,"XDefaultScreenOfDisplay");
    }
    public static MemoryAddress XDefaultScreenOfDisplay ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.XDefaultScreenOfDisplay$MH, "XDefaultScreenOfDisplay");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEventMaskOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$17.XEventMaskOfScreen$MH,"XEventMaskOfScreen");
    }
    public static long XEventMaskOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.XEventMaskOfScreen$MH, "XEventMaskOfScreen");
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenNumberOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$17.XScreenNumberOfScreen$MH,"XScreenNumberOfScreen");
    }
    public static int XScreenNumberOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.XScreenNumberOfScreen$MH, "XScreenNumberOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$17.XSetErrorHandler$MH,"XSetErrorHandler");
    }
    public static MemoryAddress XSetErrorHandler ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.XSetErrorHandler$MH, "XSetErrorHandler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIOErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XSetIOErrorHandler$MH,"XSetIOErrorHandler");
    }
    public static MemoryAddress XSetIOErrorHandler ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.XSetIOErrorHandler$MH, "XSetIOErrorHandler");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListPixmapFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XListPixmapFormats$MH,"XListPixmapFormats");
    }
    public static MemoryAddress XListPixmapFormats ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.XListPixmapFormats$MH, "XListPixmapFormats");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListDepths$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XListDepths$MH,"XListDepths");
    }
    public static MemoryAddress XListDepths ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.XListDepths$MH, "XListDepths");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReconfigureWMWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XReconfigureWMWindow$MH,"XReconfigureWMWindow");
    }
    public static int XReconfigureWMWindow ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.XReconfigureWMWindow$MH, "XReconfigureWMWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMProtocols$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XGetWMProtocols$MH,"XGetWMProtocols");
    }
    public static int XGetWMProtocols ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.XGetWMProtocols$MH, "XGetWMProtocols");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMProtocols$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XSetWMProtocols$MH,"XSetWMProtocols");
    }
    public static int XSetWMProtocols ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.XSetWMProtocols$MH, "XSetWMProtocols");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIconifyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XIconifyWindow$MH,"XIconifyWindow");
    }
    public static int XIconifyWindow ( Addressable x0,  long x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.XIconifyWindow$MH, "XIconifyWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWithdrawWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XWithdrawWindow$MH,"XWithdrawWindow");
    }
    public static int XWithdrawWindow ( Addressable x0,  long x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.XWithdrawWindow$MH, "XWithdrawWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetCommand$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XGetCommand$MH,"XGetCommand");
    }
    public static int XGetCommand ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.XGetCommand$MH, "XGetCommand");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMColormapWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XGetWMColormapWindows$MH,"XGetWMColormapWindows");
    }
    public static int XGetWMColormapWindows ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.XGetWMColormapWindows$MH, "XGetWMColormapWindows");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMColormapWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XSetWMColormapWindows$MH,"XSetWMColormapWindows");
    }
    public static int XSetWMColormapWindows ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.XSetWMColormapWindows$MH, "XSetWMColormapWindows");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XFreeStringList$MH,"XFreeStringList");
    }
    public static void XFreeStringList ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.XFreeStringList$MH, "XFreeStringList");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTransientForHint$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XSetTransientForHint$MH,"XSetTransientForHint");
    }
    public static int XSetTransientForHint ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.XSetTransientForHint$MH, "XSetTransientForHint");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XActivateScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XActivateScreenSaver$MH,"XActivateScreenSaver");
    }
    public static int XActivateScreenSaver ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.XActivateScreenSaver$MH, "XActivateScreenSaver");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddHost$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XAddHost$MH,"XAddHost");
    }
    public static int XAddHost ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.XAddHost$MH, "XAddHost");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XAddHosts$MH,"XAddHosts");
    }
    public static int XAddHosts ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.XAddHosts$MH, "XAddHosts");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddToExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XAddToExtensionList$MH,"XAddToExtensionList");
    }
    public static int XAddToExtensionList ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.XAddToExtensionList$MH, "XAddToExtensionList");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddToSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAddToSaveSet$MH,"XAddToSaveSet");
    }
    public static int XAddToSaveSet ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.XAddToSaveSet$MH, "XAddToSaveSet");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocColor$MH,"XAllocColor");
    }
    public static int XAllocColor ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.XAllocColor$MH, "XAllocColor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColorCells$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocColorCells$MH,"XAllocColorCells");
    }
    public static int XAllocColorCells ( Addressable x0,  long x1,  int x2,  Addressable x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.XAllocColorCells$MH, "XAllocColorCells");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColorPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocColorPlanes$MH,"XAllocColorPlanes");
    }
    public static int XAllocColorPlanes ( Addressable x0,  long x1,  int x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  Addressable x8,  Addressable x9,  Addressable x10) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.XAllocColorPlanes$MH, "XAllocColorPlanes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocNamedColor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocNamedColor$MH,"XAllocNamedColor");
    }
    public static int XAllocNamedColor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.XAllocNamedColor$MH, "XAllocNamedColor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllowEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllowEvents$MH,"XAllowEvents");
    }
    public static int XAllowEvents ( Addressable x0,  int x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.XAllowEvents$MH, "XAllowEvents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAutoRepeatOff$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XAutoRepeatOff$MH,"XAutoRepeatOff");
    }
    public static int XAutoRepeatOff ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.XAutoRepeatOff$MH, "XAutoRepeatOff");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAutoRepeatOn$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XAutoRepeatOn$MH,"XAutoRepeatOn");
    }
    public static int XAutoRepeatOn ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.XAutoRepeatOn$MH, "XAutoRepeatOn");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBell$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBell$MH,"XBell");
    }
    public static int XBell ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.XBell$MH, "XBell");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapBitOrder$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBitmapBitOrder$MH,"XBitmapBitOrder");
    }
    public static int XBitmapBitOrder ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.XBitmapBitOrder$MH, "XBitmapBitOrder");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapPad$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBitmapPad$MH,"XBitmapPad");
    }
    public static int XBitmapPad ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.XBitmapPad$MH, "XBitmapPad");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBitmapUnit$MH,"XBitmapUnit");
    }
    public static int XBitmapUnit ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.XBitmapUnit$MH, "XBitmapUnit");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCellsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XCellsOfScreen$MH,"XCellsOfScreen");
    }
    public static int XCellsOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.XCellsOfScreen$MH, "XCellsOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeActivePointerGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeActivePointerGrab$MH,"XChangeActivePointerGrab");
    }
    public static int XChangeActivePointerGrab ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.XChangeActivePointerGrab$MH, "XChangeActivePointerGrab");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeGC$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeGC$MH,"XChangeGC");
    }
    public static int XChangeGC ( Addressable x0,  Addressable x1,  long x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.XChangeGC$MH, "XChangeGC");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeKeyboardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeKeyboardControl$MH,"XChangeKeyboardControl");
    }
    public static int XChangeKeyboardControl ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.XChangeKeyboardControl$MH, "XChangeKeyboardControl");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeKeyboardMapping$MH,"XChangeKeyboardMapping");
    }
    public static int XChangeKeyboardMapping ( Addressable x0,  int x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.XChangeKeyboardMapping$MH, "XChangeKeyboardMapping");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangePointerControl$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangePointerControl$MH,"XChangePointerControl");
    }
    public static int XChangePointerControl ( Addressable x0,  int x1,  int x2,  int x3,  int x4,  int x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.XChangePointerControl$MH, "XChangePointerControl");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XChangeProperty$MH,"XChangeProperty");
    }
    public static int XChangeProperty ( Addressable x0,  long x1,  long x2,  long x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.XChangeProperty$MH, "XChangeProperty");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XChangeSaveSet$MH,"XChangeSaveSet");
    }
    public static int XChangeSaveSet ( Addressable x0,  long x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.XChangeSaveSet$MH, "XChangeSaveSet");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XChangeWindowAttributes$MH,"XChangeWindowAttributes");
    }
    public static int XChangeWindowAttributes ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.XChangeWindowAttributes$MH, "XChangeWindowAttributes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XCheckIfEvent$MH,"XCheckIfEvent");
    }
    public static int XCheckIfEvent ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.XCheckIfEvent$MH, "XCheckIfEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckMaskEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckMaskEvent$MH,"XCheckMaskEvent");
    }
    public static int XCheckMaskEvent ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.XCheckMaskEvent$MH, "XCheckMaskEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckTypedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckTypedEvent$MH,"XCheckTypedEvent");
    }
    public static int XCheckTypedEvent ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.XCheckTypedEvent$MH, "XCheckTypedEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckTypedWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckTypedWindowEvent$MH,"XCheckTypedWindowEvent");
    }
    public static int XCheckTypedWindowEvent ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.XCheckTypedWindowEvent$MH, "XCheckTypedWindowEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckWindowEvent$MH,"XCheckWindowEvent");
    }
    public static int XCheckWindowEvent ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.XCheckWindowEvent$MH, "XCheckWindowEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCirculateSubwindows$MH,"XCirculateSubwindows");
    }
    public static int XCirculateSubwindows ( Addressable x0,  long x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.XCirculateSubwindows$MH, "XCirculateSubwindows");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindowsDown$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCirculateSubwindowsDown$MH,"XCirculateSubwindowsDown");
    }
    public static int XCirculateSubwindowsDown ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.XCirculateSubwindowsDown$MH, "XCirculateSubwindowsDown");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindowsUp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XCirculateSubwindowsUp$MH,"XCirculateSubwindowsUp");
    }
    public static int XCirculateSubwindowsUp ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.XCirculateSubwindowsUp$MH, "XCirculateSubwindowsUp");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClearArea$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XClearArea$MH,"XClearArea");
    }
    public static int XClearArea ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.XClearArea$MH, "XClearArea");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClearWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XClearWindow$MH,"XClearWindow");
    }
    public static int XClearWindow ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.XClearWindow$MH, "XClearWindow");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XCloseDisplay$MH,"XCloseDisplay");
    }
    public static int XCloseDisplay ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.XCloseDisplay$MH, "XCloseDisplay");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConfigureWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XConfigureWindow$MH,"XConfigureWindow");
    }
    public static int XConfigureWindow ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.XConfigureWindow$MH, "XConfigureWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConnectionNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XConnectionNumber$MH,"XConnectionNumber");
    }
    public static int XConnectionNumber ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.XConnectionNumber$MH, "XConnectionNumber");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConvertSelection$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XConvertSelection$MH,"XConvertSelection");
    }
    public static int XConvertSelection ( Addressable x0,  long x1,  long x2,  long x3,  long x4,  long x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.XConvertSelection$MH, "XConvertSelection");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyArea$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XCopyArea$MH,"XCopyArea");
    }
    public static int XCopyArea ( Addressable x0,  long x1,  long x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  int x9) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.XCopyArea$MH, "XCopyArea");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyGC$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XCopyGC$MH,"XCopyGC");
    }
    public static int XCopyGC ( Addressable x0,  Addressable x1,  long x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.XCopyGC$MH, "XCopyGC");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XCopyPlane$MH,"XCopyPlane");
    }
    public static int XCopyPlane ( Addressable x0,  long x1,  long x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  int x9,  long x10) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.XCopyPlane$MH, "XCopyPlane");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XDefaultDepth$MH,"XDefaultDepth");
    }
    public static int XDefaultDepth ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.XDefaultDepth$MH, "XDefaultDepth");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultDepthOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XDefaultDepthOfScreen$MH,"XDefaultDepthOfScreen");
    }
    public static int XDefaultDepthOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.XDefaultDepthOfScreen$MH, "XDefaultDepthOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDefaultScreen$MH,"XDefaultScreen");
    }
    public static int XDefaultScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.XDefaultScreen$MH, "XDefaultScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefineCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDefineCursor$MH,"XDefineCursor");
    }
    public static int XDefineCursor ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.XDefineCursor$MH, "XDefineCursor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDeleteProperty$MH,"XDeleteProperty");
    }
    public static int XDeleteProperty ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.XDeleteProperty$MH, "XDeleteProperty");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDestroyWindow$MH,"XDestroyWindow");
    }
    public static int XDestroyWindow ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.XDestroyWindow$MH, "XDestroyWindow");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroySubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDestroySubwindows$MH,"XDestroySubwindows");
    }
    public static int XDestroySubwindows ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.XDestroySubwindows$MH, "XDestroySubwindows");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDoesBackingStore$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDoesBackingStore$MH,"XDoesBackingStore");
    }
    public static int XDoesBackingStore ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.XDoesBackingStore$MH, "XDoesBackingStore");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDoesSaveUnders$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDoesSaveUnders$MH,"XDoesSaveUnders");
    }
    public static int XDoesSaveUnders ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.XDoesSaveUnders$MH, "XDoesSaveUnders");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisableAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisableAccessControl$MH,"XDisableAccessControl");
    }
    public static int XDisableAccessControl ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.XDisableAccessControl$MH, "XDisableAccessControl");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayCells$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayCells$MH,"XDisplayCells");
    }
    public static int XDisplayCells ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.XDisplayCells$MH, "XDisplayCells");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayHeight$MH,"XDisplayHeight");
    }
    public static int XDisplayHeight ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.XDisplayHeight$MH, "XDisplayHeight");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayHeightMM$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayHeightMM$MH,"XDisplayHeightMM");
    }
    public static int XDisplayHeightMM ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.XDisplayHeightMM$MH, "XDisplayHeightMM");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayKeycodes$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayKeycodes$MH,"XDisplayKeycodes");
    }
    public static int XDisplayKeycodes ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.XDisplayKeycodes$MH, "XDisplayKeycodes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDisplayPlanes$MH,"XDisplayPlanes");
    }
    public static int XDisplayPlanes ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.XDisplayPlanes$MH, "XDisplayPlanes");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDisplayWidth$MH,"XDisplayWidth");
    }
    public static int XDisplayWidth ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.XDisplayWidth$MH, "XDisplayWidth");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayWidthMM$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDisplayWidthMM$MH,"XDisplayWidthMM");
    }
    public static int XDisplayWidthMM ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.XDisplayWidthMM$MH, "XDisplayWidthMM");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawArc$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDrawArc$MH,"XDrawArc");
    }
    public static int XDrawArc ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.XDrawArc$MH, "XDrawArc");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawArcs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDrawArcs$MH,"XDrawArcs");
    }
    public static int XDrawArcs ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.XDrawArcs$MH, "XDrawArcs");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDrawImageString$MH,"XDrawImageString");
    }
    public static int XDrawImageString ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.XDrawImageString$MH, "XDrawImageString");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawImageString16$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawImageString16$MH,"XDrawImageString16");
    }
    public static int XDrawImageString16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.XDrawImageString16$MH, "XDrawImageString16");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawLine$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawLine$MH,"XDrawLine");
    }
    public static int XDrawLine ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.XDrawLine$MH, "XDrawLine");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawLines$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawLines$MH,"XDrawLines");
    }
    public static int XDrawLines ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.XDrawLines$MH, "XDrawLines");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawPoint$MH,"XDrawPoint");
    }
    public static int XDrawPoint ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.XDrawPoint$MH, "XDrawPoint");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawPoints$MH,"XDrawPoints");
    }
    public static int XDrawPoints ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.XDrawPoints$MH, "XDrawPoints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawRectangle$MH,"XDrawRectangle");
    }
    public static int XDrawRectangle ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.XDrawRectangle$MH, "XDrawRectangle");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawRectangles$MH,"XDrawRectangles");
    }
    public static int XDrawRectangles ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.XDrawRectangles$MH, "XDrawRectangles");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawSegments$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawSegments$MH,"XDrawSegments");
    }
    public static int XDrawSegments ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.XDrawSegments$MH, "XDrawSegments");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawString$MH,"XDrawString");
    }
    public static int XDrawString ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.XDrawString$MH, "XDrawString");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawString16$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawString16$MH,"XDrawString16");
    }
    public static int XDrawString16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.XDrawString16$MH, "XDrawString16");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawText$MH,"XDrawText");
    }
    public static int XDrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.XDrawText$MH, "XDrawText");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawText16$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawText16$MH,"XDrawText16");
    }
    public static int XDrawText16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.XDrawText16$MH, "XDrawText16");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEnableAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XEnableAccessControl$MH,"XEnableAccessControl");
    }
    public static int XEnableAccessControl ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.XEnableAccessControl$MH, "XEnableAccessControl");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEventsQueued$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XEventsQueued$MH,"XEventsQueued");
    }
    public static int XEventsQueued ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.XEventsQueued$MH, "XEventsQueued");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchName$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFetchName$MH,"XFetchName");
    }
    public static int XFetchName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.XFetchName$MH, "XFetchName");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillArc$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFillArc$MH,"XFillArc");
    }
    public static int XFillArc ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.XFillArc$MH, "XFillArc");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillArcs$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFillArcs$MH,"XFillArcs");
    }
    public static int XFillArcs ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.XFillArcs$MH, "XFillArcs");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFillPolygon$MH,"XFillPolygon");
    }
    public static int XFillPolygon ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.XFillPolygon$MH, "XFillPolygon");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFillRectangle$MH,"XFillRectangle");
    }
    public static int XFillRectangle ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.XFillRectangle$MH, "XFillRectangle");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFillRectangles$MH,"XFillRectangles");
    }
    public static int XFillRectangles ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.XFillRectangles$MH, "XFillRectangles");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFlush$MH,"XFlush");
    }
    public static int XFlush ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.XFlush$MH, "XFlush");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XForceScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XForceScreenSaver$MH,"XForceScreenSaver");
    }
    public static int XForceScreenSaver ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.XForceScreenSaver$MH, "XForceScreenSaver");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFree$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFree$MH,"XFree");
    }
    public static int XFree ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.XFree$MH, "XFree");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFreeColormap$MH,"XFreeColormap");
    }
    public static int XFreeColormap ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.XFreeColormap$MH, "XFreeColormap");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeColors$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeColors$MH,"XFreeColors");
    }
    public static int XFreeColors ( Addressable x0,  long x1,  Addressable x2,  int x3,  long x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.XFreeColors$MH, "XFreeColors");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeCursor$MH,"XFreeCursor");
    }
    public static int XFreeCursor ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.XFreeCursor$MH, "XFreeCursor");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeExtensionList$MH,"XFreeExtensionList");
    }
    public static int XFreeExtensionList ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.XFreeExtensionList$MH, "XFreeExtensionList");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFont$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeFont$MH,"XFreeFont");
    }
    public static int XFreeFont ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.XFreeFont$MH, "XFreeFont");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeFontInfo$MH,"XFreeFontInfo");
    }
    public static int XFreeFontInfo ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.XFreeFontInfo$MH, "XFreeFontInfo");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontNames$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeFontNames$MH,"XFreeFontNames");
    }
    public static int XFreeFontNames ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.XFreeFontNames$MH, "XFreeFontNames");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreeFontPath$MH,"XFreeFontPath");
    }
    public static int XFreeFontPath ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.XFreeFontPath$MH, "XFreeFontPath");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeGC$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreeGC$MH,"XFreeGC");
    }
    public static int XFreeGC ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.XFreeGC$MH, "XFreeGC");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeModifiermap$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreeModifiermap$MH,"XFreeModifiermap");
    }
    public static int XFreeModifiermap ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.XFreeModifiermap$MH, "XFreeModifiermap");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreePixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreePixmap$MH,"XFreePixmap");
    }
    public static int XFreePixmap ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.XFreePixmap$MH, "XFreePixmap");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XGeometry$MH,"XGeometry");
    }
    public static int XGeometry ( Addressable x0,  int x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  Addressable x9,  Addressable x10,  Addressable x11,  Addressable x12) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.XGeometry$MH, "XGeometry");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetErrorDatabaseText$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XGetErrorDatabaseText$MH,"XGetErrorDatabaseText");
    }
    public static int XGetErrorDatabaseText ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.XGetErrorDatabaseText$MH, "XGetErrorDatabaseText");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetErrorText$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetErrorText$MH,"XGetErrorText");
    }
    public static int XGetErrorText ( Addressable x0,  int x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.XGetErrorText$MH, "XGetErrorText");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetFontProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetFontProperty$MH,"XGetFontProperty");
    }
    public static int XGetFontProperty ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.XGetFontProperty$MH, "XGetFontProperty");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetGCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetGCValues$MH,"XGetGCValues");
    }
    public static int XGetGCValues ( Addressable x0,  Addressable x1,  long x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.XGetGCValues$MH, "XGetGCValues");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetGeometry$MH,"XGetGeometry");
    }
    public static int XGetGeometry ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.XGetGeometry$MH, "XGetGeometry");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetIconName$MH,"XGetIconName");
    }
    public static int XGetIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.XGetIconName$MH, "XGetIconName");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetInputFocus$MH,"XGetInputFocus");
    }
    public static int XGetInputFocus ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.XGetInputFocus$MH, "XGetInputFocus");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetKeyboardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetKeyboardControl$MH,"XGetKeyboardControl");
    }
    public static int XGetKeyboardControl ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.XGetKeyboardControl$MH, "XGetKeyboardControl");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetPointerControl$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetPointerControl$MH,"XGetPointerControl");
    }
    public static int XGetPointerControl ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.XGetPointerControl$MH, "XGetPointerControl");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetPointerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetPointerMapping$MH,"XGetPointerMapping");
    }
    public static int XGetPointerMapping ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.XGetPointerMapping$MH, "XGetPointerMapping");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetScreenSaver$MH,"XGetScreenSaver");
    }
    public static int XGetScreenSaver ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.XGetScreenSaver$MH, "XGetScreenSaver");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetTransientForHint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetTransientForHint$MH,"XGetTransientForHint");
    }
    public static int XGetTransientForHint ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.XGetTransientForHint$MH, "XGetTransientForHint");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWindowProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetWindowProperty$MH,"XGetWindowProperty");
    }
    public static int XGetWindowProperty ( Addressable x0,  long x1,  long x2,  long x3,  long x4,  int x5,  long x6,  Addressable x7,  Addressable x8,  Addressable x9,  Addressable x10,  Addressable x11) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.XGetWindowProperty$MH, "XGetWindowProperty");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGetWindowAttributes$MH,"XGetWindowAttributes");
    }
    public static int XGetWindowAttributes ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.XGetWindowAttributes$MH, "XGetWindowAttributes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabButton$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabButton$MH,"XGrabButton");
    }
    public static int XGrabButton ( Addressable x0,  int x1,  int x2,  long x3,  int x4,  int x5,  int x6,  int x7,  long x8,  long x9) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.XGrabButton$MH, "XGrabButton");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabKey$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabKey$MH,"XGrabKey");
    }
    public static int XGrabKey ( Addressable x0,  int x1,  int x2,  long x3,  int x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.XGrabKey$MH, "XGrabKey");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabKeyboard$MH,"XGrabKeyboard");
    }
    public static int XGrabKeyboard ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  long x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.XGrabKeyboard$MH, "XGrabKeyboard");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabPointer$MH,"XGrabPointer");
    }
    public static int XGrabPointer ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  long x6,  long x7,  long x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.XGrabPointer$MH, "XGrabPointer");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabServer$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabServer$MH,"XGrabServer");
    }
    public static int XGrabServer ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.XGrabServer$MH, "XGrabServer");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XHeightMMOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XHeightMMOfScreen$MH,"XHeightMMOfScreen");
    }
    public static int XHeightMMOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.XHeightMMOfScreen$MH, "XHeightMMOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XHeightOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XHeightOfScreen$MH,"XHeightOfScreen");
    }
    public static int XHeightOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.XHeightOfScreen$MH, "XHeightOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XIfEvent$MH,"XIfEvent");
    }
    public static int XIfEvent ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.XIfEvent$MH, "XIfEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XImageByteOrder$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XImageByteOrder$MH,"XImageByteOrder");
    }
    public static int XImageByteOrder ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.XImageByteOrder$MH, "XImageByteOrder");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInstallColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XInstallColormap$MH,"XInstallColormap");
    }
    public static int XInstallColormap ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.XInstallColormap$MH, "XInstallColormap");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeysymToKeycode$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XKeysymToKeycode$MH,"XKeysymToKeycode");
    }
    public static byte XKeysymToKeycode ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.XKeysymToKeycode$MH, "XKeysymToKeycode");
        try {
            return (byte)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKillClient$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XKillClient$MH,"XKillClient");
    }
    public static int XKillClient ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.XKillClient$MH, "XKillClient");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupColor$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XLookupColor$MH,"XLookupColor");
    }
    public static int XLookupColor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.XLookupColor$MH, "XLookupColor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLowerWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XLowerWindow$MH,"XLowerWindow");
    }
    public static int XLowerWindow ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.XLowerWindow$MH, "XLowerWindow");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapRaised$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XMapRaised$MH,"XMapRaised");
    }
    public static int XMapRaised ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.XMapRaised$MH, "XMapRaised");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMapSubwindows$MH,"XMapSubwindows");
    }
    public static int XMapSubwindows ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.XMapSubwindows$MH, "XMapSubwindows");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMapWindow$MH,"XMapWindow");
    }
    public static int XMapWindow ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.XMapWindow$MH, "XMapWindow");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaskEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMaskEvent$MH,"XMaskEvent");
    }
    public static int XMaskEvent ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.XMaskEvent$MH, "XMaskEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaxCmapsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMaxCmapsOfScreen$MH,"XMaxCmapsOfScreen");
    }
    public static int XMaxCmapsOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.XMaxCmapsOfScreen$MH, "XMaxCmapsOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMinCmapsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMinCmapsOfScreen$MH,"XMinCmapsOfScreen");
    }
    public static int XMinCmapsOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.XMinCmapsOfScreen$MH, "XMinCmapsOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMoveResizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMoveResizeWindow$MH,"XMoveResizeWindow");
    }
    public static int XMoveResizeWindow ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.XMoveResizeWindow$MH, "XMoveResizeWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMoveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XMoveWindow$MH,"XMoveWindow");
    }
    public static int XMoveWindow ( Addressable x0,  long x1,  int x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.XMoveWindow$MH, "XMoveWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNextEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XNextEvent$MH,"XNextEvent");
    }
    public static int XNextEvent ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.XNextEvent$MH, "XNextEvent");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNoOp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XNoOp$MH,"XNoOp");
    }
    public static int XNoOp ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.XNoOp$MH, "XNoOp");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XParseColor$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XParseColor$MH,"XParseColor");
    }
    public static int XParseColor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.XParseColor$MH, "XParseColor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XParseGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XParseGeometry$MH,"XParseGeometry");
    }
    public static int XParseGeometry ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.XParseGeometry$MH, "XParseGeometry");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPeekEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XPeekEvent$MH,"XPeekEvent");
    }
    public static int XPeekEvent ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.XPeekEvent$MH, "XPeekEvent");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPeekIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XPeekIfEvent$MH,"XPeekIfEvent");
    }
    public static int XPeekIfEvent ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.XPeekIfEvent$MH, "XPeekIfEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPending$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XPending$MH,"XPending");
    }
    public static int XPending ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.XPending$MH, "XPending");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPlanesOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XPlanesOfScreen$MH,"XPlanesOfScreen");
    }
    public static int XPlanesOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.XPlanesOfScreen$MH, "XPlanesOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProtocolRevision$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XProtocolRevision$MH,"XProtocolRevision");
    }
    public static int XProtocolRevision ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.XProtocolRevision$MH, "XProtocolRevision");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProtocolVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XProtocolVersion$MH,"XProtocolVersion");
    }
    public static int XProtocolVersion ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.XProtocolVersion$MH, "XProtocolVersion");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPutBackEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XPutBackEvent$MH,"XPutBackEvent");
    }
    public static int XPutBackEvent ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.XPutBackEvent$MH, "XPutBackEvent");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPutImage$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XPutImage$MH,"XPutImage");
    }
    public static int XPutImage ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  int x9) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.XPutImage$MH, "XPutImage");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQLength$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XQLength$MH,"XQLength");
    }
    public static int XQLength ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.XQLength$MH, "XQLength");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XQueryBestCursor$MH,"XQueryBestCursor");
    }
    public static int XQueryBestCursor ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.XQueryBestCursor$MH, "XQueryBestCursor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XQueryBestSize$MH,"XQueryBestSize");
    }
    public static int XQueryBestSize ( Addressable x0,  int x1,  long x2,  int x3,  int x4,  Addressable x5,  Addressable x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.XQueryBestSize$MH, "XQueryBestSize");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryBestStipple$MH,"XQueryBestStipple");
    }
    public static int XQueryBestStipple ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.XQueryBestStipple$MH, "XQueryBestStipple");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestTile$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryBestTile$MH,"XQueryBestTile");
    }
    public static int XQueryBestTile ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.XQueryBestTile$MH, "XQueryBestTile");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryColor$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryColor$MH,"XQueryColor");
    }
    public static int XQueryColor ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.XQueryColor$MH, "XQueryColor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryColors$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryColors$MH,"XQueryColors");
    }
    public static int XQueryColors ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.XQueryColors$MH, "XQueryColors");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryExtension$MH,"XQueryExtension");
    }
    public static int XQueryExtension ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.XQueryExtension$MH, "XQueryExtension");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryKeymap$MH,"XQueryKeymap");
    }
    public static int XQueryKeymap ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.XQueryKeymap$MH, "XQueryKeymap");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryPointer$MH,"XQueryPointer");
    }
    public static int XQueryPointer ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.XQueryPointer$MH, "XQueryPointer");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryTextExtents$MH,"XQueryTextExtents");
    }
    public static int XQueryTextExtents ( Addressable x0,  long x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.XQueryTextExtents$MH, "XQueryTextExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTextExtents16$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryTextExtents16$MH,"XQueryTextExtents16");
    }
    public static int XQueryTextExtents16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.XQueryTextExtents16$MH, "XQueryTextExtents16");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTree$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryTree$MH,"XQueryTree");
    }
    public static int XQueryTree ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.XQueryTree$MH, "XQueryTree");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRaiseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XRaiseWindow$MH,"XRaiseWindow");
    }
    public static int XRaiseWindow ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.XRaiseWindow$MH, "XRaiseWindow");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReadBitmapFile$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XReadBitmapFile$MH,"XReadBitmapFile");
    }
    public static int XReadBitmapFile ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.XReadBitmapFile$MH, "XReadBitmapFile");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReadBitmapFileData$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XReadBitmapFileData$MH,"XReadBitmapFileData");
    }
    public static int XReadBitmapFileData ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.XReadBitmapFileData$MH, "XReadBitmapFileData");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRebindKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRebindKeysym$MH,"XRebindKeysym");
    }
    public static int XRebindKeysym ( Addressable x0,  long x1,  Addressable x2,  int x3,  Addressable x4,  int x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.XRebindKeysym$MH, "XRebindKeysym");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRecolorCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRecolorCursor$MH,"XRecolorCursor");
    }
    public static int XRecolorCursor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.XRecolorCursor$MH, "XRecolorCursor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRefreshKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRefreshKeyboardMapping$MH,"XRefreshKeyboardMapping");
    }
    public static int XRefreshKeyboardMapping ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.XRefreshKeyboardMapping$MH, "XRefreshKeyboardMapping");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveFromSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRemoveFromSaveSet$MH,"XRemoveFromSaveSet");
    }
    public static int XRemoveFromSaveSet ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.XRemoveFromSaveSet$MH, "XRemoveFromSaveSet");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveHost$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRemoveHost$MH,"XRemoveHost");
    }
    public static int XRemoveHost ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.XRemoveHost$MH, "XRemoveHost");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XRemoveHosts$MH,"XRemoveHosts");
    }
    public static int XRemoveHosts ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.XRemoveHosts$MH, "XRemoveHosts");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReparentWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XReparentWindow$MH,"XReparentWindow");
    }
    public static int XReparentWindow ( Addressable x0,  long x1,  long x2,  int x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.XReparentWindow$MH, "XReparentWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XResetScreenSaver$MH,"XResetScreenSaver");
    }
    public static int XResetScreenSaver ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.XResetScreenSaver$MH, "XResetScreenSaver");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XResizeWindow$MH,"XResizeWindow");
    }
    public static int XResizeWindow ( Addressable x0,  long x1,  int x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.XResizeWindow$MH, "XResizeWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRestackWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XRestackWindows$MH,"XRestackWindows");
    }
    public static int XRestackWindows ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.XRestackWindows$MH, "XRestackWindows");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRotateBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XRotateBuffers$MH,"XRotateBuffers");
    }
    public static int XRotateBuffers ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.XRotateBuffers$MH, "XRotateBuffers");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRotateWindowProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XRotateWindowProperties$MH,"XRotateWindowProperties");
    }
    public static int XRotateWindowProperties ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.XRotateWindowProperties$MH, "XRotateWindowProperties");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenCount$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XScreenCount$MH,"XScreenCount");
    }
    public static int XScreenCount ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.XScreenCount$MH, "XScreenCount");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSelectInput$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSelectInput$MH,"XSelectInput");
    }
    public static int XSelectInput ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.XSelectInput$MH, "XSelectInput");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSendEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSendEvent$MH,"XSendEvent");
    }
    public static int XSendEvent ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.XSendEvent$MH, "XSendEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSetAccessControl$MH,"XSetAccessControl");
    }
    public static int XSetAccessControl ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.XSetAccessControl$MH, "XSetAccessControl");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetArcMode$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSetArcMode$MH,"XSetArcMode");
    }
    public static int XSetArcMode ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.XSetArcMode$MH, "XSetArcMode");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetBackground$MH,"XSetBackground");
    }
    public static int XSetBackground ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.XSetBackground$MH, "XSetBackground");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipMask$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetClipMask$MH,"XSetClipMask");
    }
    public static int XSetClipMask ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.XSetClipMask$MH, "XSetClipMask");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipOrigin$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetClipOrigin$MH,"XSetClipOrigin");
    }
    public static int XSetClipOrigin ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.XSetClipOrigin$MH, "XSetClipOrigin");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetClipRectangles$MH,"XSetClipRectangles");
    }
    public static int XSetClipRectangles ( Addressable x0,  Addressable x1,  int x2,  int x3,  Addressable x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.XSetClipRectangles$MH, "XSetClipRectangles");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetCloseDownMode$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetCloseDownMode$MH,"XSetCloseDownMode");
    }
    public static int XSetCloseDownMode ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.XSetCloseDownMode$MH, "XSetCloseDownMode");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetCommand$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetCommand$MH,"XSetCommand");
    }
    public static int XSetCommand ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.XSetCommand$MH, "XSetCommand");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetDashes$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetDashes$MH,"XSetDashes");
    }
    public static int XSetDashes ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.XSetDashes$MH, "XSetDashes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFillRule$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFillRule$MH,"XSetFillRule");
    }
    public static int XSetFillRule ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.XSetFillRule$MH, "XSetFillRule");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFillStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFillStyle$MH,"XSetFillStyle");
    }
    public static int XSetFillStyle ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.XSetFillStyle$MH, "XSetFillStyle");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFont$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFont$MH,"XSetFont");
    }
    public static int XSetFont ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.XSetFont$MH, "XSetFont");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFontPath$MH,"XSetFontPath");
    }
    public static int XSetFontPath ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.XSetFontPath$MH, "XSetFontPath");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetForeground$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetForeground$MH,"XSetForeground");
    }
    public static int XSetForeground ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.XSetForeground$MH, "XSetForeground");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetFunction$MH,"XSetFunction");
    }
    public static int XSetFunction ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.XSetFunction$MH, "XSetFunction");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetGraphicsExposures$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetGraphicsExposures$MH,"XSetGraphicsExposures");
    }
    public static int XSetGraphicsExposures ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.XSetGraphicsExposures$MH, "XSetGraphicsExposures");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetIconName$MH,"XSetIconName");
    }
    public static int XSetIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.XSetIconName$MH, "XSetIconName");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetInputFocus$MH,"XSetInputFocus");
    }
    public static int XSetInputFocus ( Addressable x0,  long x1,  int x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.XSetInputFocus$MH, "XSetInputFocus");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetLineAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetLineAttributes$MH,"XSetLineAttributes");
    }
    public static int XSetLineAttributes ( Addressable x0,  Addressable x1,  int x2,  int x3,  int x4,  int x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.XSetLineAttributes$MH, "XSetLineAttributes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetModifierMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetModifierMapping$MH,"XSetModifierMapping");
    }
    public static int XSetModifierMapping ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.XSetModifierMapping$MH, "XSetModifierMapping");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetPlaneMask$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetPlaneMask$MH,"XSetPlaneMask");
    }
    public static int XSetPlaneMask ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.XSetPlaneMask$MH, "XSetPlaneMask");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetPointerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetPointerMapping$MH,"XSetPointerMapping");
    }
    public static int XSetPointerMapping ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.XSetPointerMapping$MH, "XSetPointerMapping");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetScreenSaver$MH,"XSetScreenSaver");
    }
    public static int XSetScreenSaver ( Addressable x0,  int x1,  int x2,  int x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.XSetScreenSaver$MH, "XSetScreenSaver");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSelectionOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetSelectionOwner$MH,"XSetSelectionOwner");
    }
    public static int XSetSelectionOwner ( Addressable x0,  long x1,  long x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.XSetSelectionOwner$MH, "XSetSelectionOwner");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetState$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetState$MH,"XSetState");
    }
    public static int XSetState ( Addressable x0,  Addressable x1,  long x2,  long x3,  int x4,  long x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.XSetState$MH, "XSetState");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetStipple$MH,"XSetStipple");
    }
    public static int XSetStipple ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.XSetStipple$MH, "XSetStipple");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSubwindowMode$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetSubwindowMode$MH,"XSetSubwindowMode");
    }
    public static int XSetSubwindowMode ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.XSetSubwindowMode$MH, "XSetSubwindowMode");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTSOrigin$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetTSOrigin$MH,"XSetTSOrigin");
    }
    public static int XSetTSOrigin ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.XSetTSOrigin$MH, "XSetTSOrigin");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTile$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetTile$MH,"XSetTile");
    }
    public static int XSetTile ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.XSetTile$MH, "XSetTile");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetWindowBackground$MH,"XSetWindowBackground");
    }
    public static int XSetWindowBackground ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.XSetWindowBackground$MH, "XSetWindowBackground");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBackgroundPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetWindowBackgroundPixmap$MH,"XSetWindowBackgroundPixmap");
    }
    public static int XSetWindowBackgroundPixmap ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.XSetWindowBackgroundPixmap$MH, "XSetWindowBackgroundPixmap");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetWindowBorder$MH,"XSetWindowBorder");
    }
    public static int XSetWindowBorder ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.XSetWindowBorder$MH, "XSetWindowBorder");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorderPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XSetWindowBorderPixmap$MH,"XSetWindowBorderPixmap");
    }
    public static int XSetWindowBorderPixmap ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.XSetWindowBorderPixmap$MH, "XSetWindowBorderPixmap");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorderWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XSetWindowBorderWidth$MH,"XSetWindowBorderWidth");
    }
    public static int XSetWindowBorderWidth ( Addressable x0,  long x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.XSetWindowBorderWidth$MH, "XSetWindowBorderWidth");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XSetWindowColormap$MH,"XSetWindowColormap");
    }
    public static int XSetWindowColormap ( Addressable x0,  long x1,  long x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.XSetWindowColormap$MH, "XSetWindowColormap");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XStoreBuffer$MH,"XStoreBuffer");
    }
    public static int XStoreBuffer ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.XStoreBuffer$MH, "XStoreBuffer");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XStoreBytes$MH,"XStoreBytes");
    }
    public static int XStoreBytes ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.XStoreBytes$MH, "XStoreBytes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreColor$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XStoreColor$MH,"XStoreColor");
    }
    public static int XStoreColor ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.XStoreColor$MH, "XStoreColor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreColors$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XStoreColors$MH,"XStoreColors");
    }
    public static int XStoreColors ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.XStoreColors$MH, "XStoreColors");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreName$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XStoreName$MH,"XStoreName");
    }
    public static int XStoreName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.XStoreName$MH, "XStoreName");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreNamedColor$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XStoreNamedColor$MH,"XStoreNamedColor");
    }
    public static int XStoreNamedColor ( Addressable x0,  long x1,  Addressable x2,  long x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.XStoreNamedColor$MH, "XStoreNamedColor");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSync$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XSync$MH,"XSync");
    }
    public static int XSync ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.XSync$MH, "XSync");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XTextExtents$MH,"XTextExtents");
    }
    public static int XTextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.XTextExtents$MH, "XTextExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextExtents16$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XTextExtents16$MH,"XTextExtents16");
    }
    public static int XTextExtents16 ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.XTextExtents16$MH, "XTextExtents16");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XTextWidth$MH,"XTextWidth");
    }
    public static int XTextWidth ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.XTextWidth$MH, "XTextWidth");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextWidth16$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XTextWidth16$MH,"XTextWidth16");
    }
    public static int XTextWidth16 ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.XTextWidth16$MH, "XTextWidth16");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTranslateCoordinates$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XTranslateCoordinates$MH,"XTranslateCoordinates");
    }
    public static int XTranslateCoordinates ( Addressable x0,  long x1,  long x2,  int x3,  int x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.XTranslateCoordinates$MH, "XTranslateCoordinates");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUndefineCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XUndefineCursor$MH,"XUndefineCursor");
    }
    public static int XUndefineCursor ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.XUndefineCursor$MH, "XUndefineCursor");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabButton$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XUngrabButton$MH,"XUngrabButton");
    }
    public static int XUngrabButton ( Addressable x0,  int x1,  int x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.XUngrabButton$MH, "XUngrabButton");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabKey$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XUngrabKey$MH,"XUngrabKey");
    }
    public static int XUngrabKey ( Addressable x0,  int x1,  int x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.XUngrabKey$MH, "XUngrabKey");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUngrabKeyboard$MH,"XUngrabKeyboard");
    }
    public static int XUngrabKeyboard ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.XUngrabKeyboard$MH, "XUngrabKeyboard");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUngrabPointer$MH,"XUngrabPointer");
    }
    public static int XUngrabPointer ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.XUngrabPointer$MH, "XUngrabPointer");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabServer$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUngrabServer$MH,"XUngrabServer");
    }
    public static int XUngrabServer ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.XUngrabServer$MH, "XUngrabServer");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUninstallColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUninstallColormap$MH,"XUninstallColormap");
    }
    public static int XUninstallColormap ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.XUninstallColormap$MH, "XUninstallColormap");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnloadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUnloadFont$MH,"XUnloadFont");
    }
    public static int XUnloadFont ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.XUnloadFont$MH, "XUnloadFont");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnmapSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUnmapSubwindows$MH,"XUnmapSubwindows");
    }
    public static int XUnmapSubwindows ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.XUnmapSubwindows$MH, "XUnmapSubwindows");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnmapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XUnmapWindow$MH,"XUnmapWindow");
    }
    public static int XUnmapWindow ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.XUnmapWindow$MH, "XUnmapWindow");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVendorRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XVendorRelease$MH,"XVendorRelease");
    }
    public static int XVendorRelease ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.XVendorRelease$MH, "XVendorRelease");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWarpPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWarpPointer$MH,"XWarpPointer");
    }
    public static int XWarpPointer ( Addressable x0,  long x1,  long x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.XWarpPointer$MH, "XWarpPointer");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWidthMMOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWidthMMOfScreen$MH,"XWidthMMOfScreen");
    }
    public static int XWidthMMOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.XWidthMMOfScreen$MH, "XWidthMMOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWidthOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWidthOfScreen$MH,"XWidthOfScreen");
    }
    public static int XWidthOfScreen ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.XWidthOfScreen$MH, "XWidthOfScreen");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWindowEvent$MH,"XWindowEvent");
    }
    public static int XWindowEvent ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.XWindowEvent$MH, "XWindowEvent");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWriteBitmapFile$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XWriteBitmapFile$MH,"XWriteBitmapFile");
    }
    public static int XWriteBitmapFile ( Addressable x0,  Addressable x1,  long x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.XWriteBitmapFile$MH, "XWriteBitmapFile");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSupportsLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XSupportsLocale$MH,"XSupportsLocale");
    }
    public static int XSupportsLocale () {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.XSupportsLocale$MH, "XSupportsLocale");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetLocaleModifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XSetLocaleModifiers$MH,"XSetLocaleModifiers");
    }
    public static MemoryAddress XSetLocaleModifiers ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.XSetLocaleModifiers$MH, "XSetLocaleModifiers");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenOM$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XOpenOM$MH,"XOpenOM");
    }
    public static MemoryAddress XOpenOM ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.XOpenOM$MH, "XOpenOM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseOM$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XCloseOM$MH,"XCloseOM");
    }
    public static int XCloseOM ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.XCloseOM$MH, "XCloseOM");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetOMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XSetOMValues$MH,"XSetOMValues");
    }
    public static MemoryAddress XSetOMValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.XSetOMValues$MH, "XSetOMValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetOMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XGetOMValues$MH,"XGetOMValues");
    }
    public static MemoryAddress XGetOMValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.XGetOMValues$MH, "XGetOMValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfOM$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XDisplayOfOM$MH,"XDisplayOfOM");
    }
    public static MemoryAddress XDisplayOfOM ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.XDisplayOfOM$MH, "XDisplayOfOM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfOM$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XLocaleOfOM$MH,"XLocaleOfOM");
    }
    public static MemoryAddress XLocaleOfOM ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.XLocaleOfOM$MH, "XLocaleOfOM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateOC$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XCreateOC$MH,"XCreateOC");
    }
    public static MemoryAddress XCreateOC ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.XCreateOC$MH, "XCreateOC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyOC$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XDestroyOC$MH,"XDestroyOC");
    }
    public static void XDestroyOC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.XDestroyOC$MH, "XDestroyOC");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOMOfOC$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XOMOfOC$MH,"XOMOfOC");
    }
    public static MemoryAddress XOMOfOC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.XOMOfOC$MH, "XOMOfOC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetOCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XSetOCValues$MH,"XSetOCValues");
    }
    public static MemoryAddress XSetOCValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.XSetOCValues$MH, "XSetOCValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetOCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XGetOCValues$MH,"XGetOCValues");
    }
    public static MemoryAddress XGetOCValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.XGetOCValues$MH, "XGetOCValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XCreateFontSet$MH,"XCreateFontSet");
    }
    public static MemoryAddress XCreateFontSet ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.XCreateFontSet$MH, "XCreateFontSet");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XFreeFontSet$MH,"XFreeFontSet");
    }
    public static void XFreeFontSet ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.XFreeFontSet$MH, "XFreeFontSet");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFontsOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XFontsOfFontSet$MH,"XFontsOfFontSet");
    }
    public static int XFontsOfFontSet ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.XFontsOfFontSet$MH, "XFontsOfFontSet");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBaseFontNameListOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XBaseFontNameListOfFontSet$MH,"XBaseFontNameListOfFontSet");
    }
    public static MemoryAddress XBaseFontNameListOfFontSet ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.XBaseFontNameListOfFontSet$MH, "XBaseFontNameListOfFontSet");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XLocaleOfFontSet$MH,"XLocaleOfFontSet");
    }
    public static MemoryAddress XLocaleOfFontSet ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.XLocaleOfFontSet$MH, "XLocaleOfFontSet");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XContextDependentDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XContextDependentDrawing$MH,"XContextDependentDrawing");
    }
    public static int XContextDependentDrawing ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.XContextDependentDrawing$MH, "XContextDependentDrawing");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDirectionalDependentDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XDirectionalDependentDrawing$MH,"XDirectionalDependentDrawing");
    }
    public static int XDirectionalDependentDrawing ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.XDirectionalDependentDrawing$MH, "XDirectionalDependentDrawing");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XContextualDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XContextualDrawing$MH,"XContextualDrawing");
    }
    public static int XContextualDrawing ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.XContextualDrawing$MH, "XContextualDrawing");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XExtentsOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XExtentsOfFontSet$MH,"XExtentsOfFontSet");
    }
    public static MemoryAddress XExtentsOfFontSet ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.XExtentsOfFontSet$MH, "XExtentsOfFontSet");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XmbTextEscapement$MH,"XmbTextEscapement");
    }
    public static int XmbTextEscapement ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.XmbTextEscapement$MH, "XmbTextEscapement");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XwcTextEscapement$MH,"XwcTextEscapement");
    }
    public static int XwcTextEscapement ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.XwcTextEscapement$MH, "XwcTextEscapement");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$65.Xutf8TextEscapement$MH,"Xutf8TextEscapement");
    }
    public static int Xutf8TextEscapement ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.Xutf8TextEscapement$MH, "Xutf8TextEscapement");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XmbTextExtents$MH,"XmbTextExtents");
    }
    public static int XmbTextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.XmbTextExtents$MH, "XmbTextExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XwcTextExtents$MH,"XwcTextExtents");
    }
    public static int XwcTextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.XwcTextExtents$MH, "XwcTextExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.Xutf8TextExtents$MH,"Xutf8TextExtents");
    }
    public static int Xutf8TextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.Xutf8TextExtents$MH, "Xutf8TextExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XmbTextPerCharExtents$MH,"XmbTextPerCharExtents");
    }
    public static int XmbTextPerCharExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.XmbTextPerCharExtents$MH, "XmbTextPerCharExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XwcTextPerCharExtents$MH,"XwcTextPerCharExtents");
    }
    public static int XwcTextPerCharExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.XwcTextPerCharExtents$MH, "XwcTextPerCharExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$66.Xutf8TextPerCharExtents$MH,"Xutf8TextPerCharExtents");
    }
    public static int Xutf8TextPerCharExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.Xutf8TextPerCharExtents$MH, "Xutf8TextPerCharExtents");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XmbDrawText$MH,"XmbDrawText");
    }
    public static void XmbDrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.XmbDrawText$MH, "XmbDrawText");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XwcDrawText$MH,"XwcDrawText");
    }
    public static void XwcDrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.XwcDrawText$MH, "XwcDrawText");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$66.Xutf8DrawText$MH,"Xutf8DrawText");
    }
    public static void Xutf8DrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.Xutf8DrawText$MH, "Xutf8DrawText");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XmbDrawString$MH,"XmbDrawString");
    }
    public static void XmbDrawString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.XmbDrawString$MH, "XmbDrawString");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XwcDrawString$MH,"XwcDrawString");
    }
    public static void XwcDrawString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.XwcDrawString$MH, "XwcDrawString");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.Xutf8DrawString$MH,"Xutf8DrawString");
    }
    public static void Xutf8DrawString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.Xutf8DrawString$MH, "Xutf8DrawString");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XmbDrawImageString$MH,"XmbDrawImageString");
    }
    public static void XmbDrawImageString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.XmbDrawImageString$MH, "XmbDrawImageString");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XwcDrawImageString$MH,"XwcDrawImageString");
    }
    public static void XwcDrawImageString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.XwcDrawImageString$MH, "XwcDrawImageString");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.Xutf8DrawImageString$MH,"Xutf8DrawImageString");
    }
    public static void Xutf8DrawImageString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.Xutf8DrawImageString$MH, "Xutf8DrawImageString");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenIM$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XOpenIM$MH,"XOpenIM");
    }
    public static MemoryAddress XOpenIM ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.XOpenIM$MH, "XOpenIM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseIM$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XCloseIM$MH,"XCloseIM");
    }
    public static int XCloseIM ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.XCloseIM$MH, "XCloseIM");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XGetIMValues$MH,"XGetIMValues");
    }
    public static MemoryAddress XGetIMValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.XGetIMValues$MH, "XGetIMValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XSetIMValues$MH,"XSetIMValues");
    }
    public static MemoryAddress XSetIMValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.XSetIMValues$MH, "XSetIMValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfIM$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XDisplayOfIM$MH,"XDisplayOfIM");
    }
    public static MemoryAddress XDisplayOfIM ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.XDisplayOfIM$MH, "XDisplayOfIM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfIM$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XLocaleOfIM$MH,"XLocaleOfIM");
    }
    public static MemoryAddress XLocaleOfIM ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.XLocaleOfIM$MH, "XLocaleOfIM");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateIC$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XCreateIC$MH,"XCreateIC");
    }
    public static MemoryAddress XCreateIC ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.XCreateIC$MH, "XCreateIC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XDestroyIC$MH,"XDestroyIC");
    }
    public static void XDestroyIC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.XDestroyIC$MH, "XDestroyIC");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetICFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XSetICFocus$MH,"XSetICFocus");
    }
    public static void XSetICFocus ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.XSetICFocus$MH, "XSetICFocus");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnsetICFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XUnsetICFocus$MH,"XUnsetICFocus");
    }
    public static void XUnsetICFocus ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.XUnsetICFocus$MH, "XUnsetICFocus");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XwcResetIC$MH,"XwcResetIC");
    }
    public static MemoryAddress XwcResetIC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.XwcResetIC$MH, "XwcResetIC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XmbResetIC$MH,"XmbResetIC");
    }
    public static MemoryAddress XmbResetIC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.XmbResetIC$MH, "XmbResetIC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8ResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.Xutf8ResetIC$MH,"Xutf8ResetIC");
    }
    public static MemoryAddress Xutf8ResetIC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.Xutf8ResetIC$MH, "Xutf8ResetIC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetICValues$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XSetICValues$MH,"XSetICValues");
    }
    public static MemoryAddress XSetICValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.XSetICValues$MH, "XSetICValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetICValues$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XGetICValues$MH,"XGetICValues");
    }
    public static MemoryAddress XGetICValues ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.XGetICValues$MH, "XGetICValues");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIMOfIC$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XIMOfIC$MH,"XIMOfIC");
    }
    public static MemoryAddress XIMOfIC ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.XIMOfIC$MH, "XIMOfIC");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFilterEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XFilterEvent$MH,"XFilterEvent");
    }
    public static int XFilterEvent ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.XFilterEvent$MH, "XFilterEvent");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XmbLookupString$MH,"XmbLookupString");
    }
    public static int XmbLookupString ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.XmbLookupString$MH, "XmbLookupString");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XwcLookupString$MH,"XwcLookupString");
    }
    public static int XwcLookupString ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.XwcLookupString$MH, "XwcLookupString");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8LookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$71.Xutf8LookupString$MH,"Xutf8LookupString");
    }
    public static int Xutf8LookupString ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.Xutf8LookupString$MH, "Xutf8LookupString");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVaCreateNestedList$MH() {
        return RuntimeHelper.requireNonNull(constants$71.XVaCreateNestedList$MH,"XVaCreateNestedList");
    }
    public static MemoryAddress XVaCreateNestedList ( int x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.XVaCreateNestedList$MH, "XVaCreateNestedList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRegisterIMInstantiateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$71.XRegisterIMInstantiateCallback$MH,"XRegisterIMInstantiateCallback");
    }
    public static int XRegisterIMInstantiateCallback ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.XRegisterIMInstantiateCallback$MH, "XRegisterIMInstantiateCallback");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnregisterIMInstantiateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$71.XUnregisterIMInstantiateCallback$MH,"XUnregisterIMInstantiateCallback");
    }
    public static int XUnregisterIMInstantiateCallback ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.XUnregisterIMInstantiateCallback$MH, "XUnregisterIMInstantiateCallback");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternalConnectionNumbers$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XInternalConnectionNumbers$MH,"XInternalConnectionNumbers");
    }
    public static int XInternalConnectionNumbers ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.XInternalConnectionNumbers$MH, "XInternalConnectionNumbers");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProcessInternalConnection$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XProcessInternalConnection$MH,"XProcessInternalConnection");
    }
    public static void XProcessInternalConnection ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.XProcessInternalConnection$MH, "XProcessInternalConnection");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddConnectionWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XAddConnectionWatch$MH,"XAddConnectionWatch");
    }
    public static int XAddConnectionWatch ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.XAddConnectionWatch$MH, "XAddConnectionWatch");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveConnectionWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XRemoveConnectionWatch$MH,"XRemoveConnectionWatch");
    }
    public static void XRemoveConnectionWatch ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.XRemoveConnectionWatch$MH, "XRemoveConnectionWatch");
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAuthorization$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XSetAuthorization$MH,"XSetAuthorization");
    }
    public static void XSetAuthorization ( Addressable x0,  int x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.XSetAuthorization$MH, "XSetAuthorization");
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Xmbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$72._Xmbtowc$MH,"_Xmbtowc");
    }
    public static int _Xmbtowc ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72._Xmbtowc$MH, "_Xmbtowc");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Xwctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$73._Xwctomb$MH,"_Xwctomb");
    }
    public static int _Xwctomb ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73._Xwctomb$MH, "_Xwctomb");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetEventData$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XGetEventData$MH,"XGetEventData");
    }
    public static int XGetEventData ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.XGetEventData$MH, "XGetEventData");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeEventData$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XFreeEventData$MH,"XFreeEventData");
    }
    public static void XFreeEventData ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.XFreeEventData$MH, "XFreeEventData");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int XStringStyle() {
        return (int)0L;
    }
    public static int XCompoundTextStyle() {
        return (int)1L;
    }
    public static int XTextStyle() {
        return (int)2L;
    }
    public static int XStdICCTextStyle() {
        return (int)3L;
    }
    public static int XUTF8StringStyle() {
        return (int)4L;
    }
    public static OfAddress Region = Constants$root.C_POINTER$LAYOUT;
    public static OfInt XContext = Constants$root.C_INT$LAYOUT;
    public static MethodHandle XAllocClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XAllocClassHint$MH,"XAllocClassHint");
    }
    public static MemoryAddress XAllocClassHint () {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.XAllocClassHint$MH, "XAllocClassHint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocIconSize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XAllocIconSize$MH,"XAllocIconSize");
    }
    public static MemoryAddress XAllocIconSize () {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.XAllocIconSize$MH, "XAllocIconSize");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XAllocSizeHints$MH,"XAllocSizeHints");
    }
    public static MemoryAddress XAllocSizeHints () {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.XAllocSizeHints$MH, "XAllocSizeHints");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XAllocStandardColormap$MH,"XAllocStandardColormap");
    }
    public static MemoryAddress XAllocStandardColormap () {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.XAllocStandardColormap$MH, "XAllocStandardColormap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XAllocWMHints$MH,"XAllocWMHints");
    }
    public static MemoryAddress XAllocWMHints () {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.XAllocWMHints$MH, "XAllocWMHints");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClipBox$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XClipBox$MH,"XClipBox");
    }
    public static int XClipBox ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.XClipBox$MH, "XClipBox");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XCreateRegion$MH,"XCreateRegion");
    }
    public static MemoryAddress XCreateRegion () {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.XCreateRegion$MH, "XCreateRegion");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultString$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XDefaultString$MH,"XDefaultString");
    }
    public static MemoryAddress XDefaultString () {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.XDefaultString$MH, "XDefaultString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XDeleteContext$MH,"XDeleteContext");
    }
    public static int XDeleteContext ( Addressable x0,  long x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.XDeleteContext$MH, "XDeleteContext");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XDestroyRegion$MH,"XDestroyRegion");
    }
    public static int XDestroyRegion ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.XDestroyRegion$MH, "XDestroyRegion");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEmptyRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XEmptyRegion$MH,"XEmptyRegion");
    }
    public static int XEmptyRegion ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.XEmptyRegion$MH, "XEmptyRegion");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEqualRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XEqualRegion$MH,"XEqualRegion");
    }
    public static int XEqualRegion ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.XEqualRegion$MH, "XEqualRegion");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFindContext$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XFindContext$MH,"XFindContext");
    }
    public static int XFindContext ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.XFindContext$MH, "XFindContext");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XGetClassHint$MH,"XGetClassHint");
    }
    public static int XGetClassHint ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.XGetClassHint$MH, "XGetClassHint");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIconSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XGetIconSizes$MH,"XGetIconSizes");
    }
    public static int XGetIconSizes ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.XGetIconSizes$MH, "XGetIconSizes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetNormalHints$MH,"XGetNormalHints");
    }
    public static int XGetNormalHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.XGetNormalHints$MH, "XGetNormalHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetRGBColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetRGBColormaps$MH,"XGetRGBColormaps");
    }
    public static int XGetRGBColormaps ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  long x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.XGetRGBColormaps$MH, "XGetRGBColormaps");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetSizeHints$MH,"XGetSizeHints");
    }
    public static int XGetSizeHints ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.XGetSizeHints$MH, "XGetSizeHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetStandardColormap$MH,"XGetStandardColormap");
    }
    public static int XGetStandardColormap ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.XGetStandardColormap$MH, "XGetStandardColormap");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetTextProperty$MH,"XGetTextProperty");
    }
    public static int XGetTextProperty ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.XGetTextProperty$MH, "XGetTextProperty");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetVisualInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetVisualInfo$MH,"XGetVisualInfo");
    }
    public static MemoryAddress XGetVisualInfo ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.XGetVisualInfo$MH, "XGetVisualInfo");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMClientMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMClientMachine$MH,"XGetWMClientMachine");
    }
    public static int XGetWMClientMachine ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.XGetWMClientMachine$MH, "XGetWMClientMachine");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMHints$MH,"XGetWMHints");
    }
    public static MemoryAddress XGetWMHints ( Addressable x0,  long x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.XGetWMHints$MH, "XGetWMHints");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMIconName$MH,"XGetWMIconName");
    }
    public static int XGetWMIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.XGetWMIconName$MH, "XGetWMIconName");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMName$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMName$MH,"XGetWMName");
    }
    public static int XGetWMName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.XGetWMName$MH, "XGetWMName");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMNormalHints$MH,"XGetWMNormalHints");
    }
    public static int XGetWMNormalHints ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.XGetWMNormalHints$MH, "XGetWMNormalHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMSizeHints$MH,"XGetWMSizeHints");
    }
    public static int XGetWMSizeHints ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  long x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.XGetWMSizeHints$MH, "XGetWMSizeHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetZoomHints$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XGetZoomHints$MH,"XGetZoomHints");
    }
    public static int XGetZoomHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.XGetZoomHints$MH, "XGetZoomHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIntersectRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XIntersectRegion$MH,"XIntersectRegion");
    }
    public static int XIntersectRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.XIntersectRegion$MH, "XIntersectRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConvertCase$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XConvertCase$MH,"XConvertCase");
    }
    public static void XConvertCase ( long x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.XConvertCase$MH, "XConvertCase");
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XLookupString$MH,"XLookupString");
    }
    public static int XLookupString ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.XLookupString$MH, "XLookupString");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMatchVisualInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XMatchVisualInfo$MH,"XMatchVisualInfo");
    }
    public static int XMatchVisualInfo ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.XMatchVisualInfo$MH, "XMatchVisualInfo");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOffsetRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XOffsetRegion$MH,"XOffsetRegion");
    }
    public static int XOffsetRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.XOffsetRegion$MH, "XOffsetRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPointInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XPointInRegion$MH,"XPointInRegion");
    }
    public static int XPointInRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.XPointInRegion$MH, "XPointInRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPolygonRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XPolygonRegion$MH,"XPolygonRegion");
    }
    public static MemoryAddress XPolygonRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.XPolygonRegion$MH, "XPolygonRegion");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRectInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XRectInRegion$MH,"XRectInRegion");
    }
    public static int XRectInRegion ( Addressable x0,  int x1,  int x2,  int x3,  int x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.XRectInRegion$MH, "XRectInRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSaveContext$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XSaveContext$MH,"XSaveContext");
    }
    public static int XSaveContext ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.XSaveContext$MH, "XSaveContext");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XSetClassHint$MH,"XSetClassHint");
    }
    public static int XSetClassHint ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.XSetClassHint$MH, "XSetClassHint");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIconSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XSetIconSizes$MH,"XSetIconSizes");
    }
    public static int XSetIconSizes ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.XSetIconSizes$MH, "XSetIconSizes");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetNormalHints$MH,"XSetNormalHints");
    }
    public static int XSetNormalHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.XSetNormalHints$MH, "XSetNormalHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetRGBColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetRGBColormaps$MH,"XSetRGBColormaps");
    }
    public static void XSetRGBColormaps ( Addressable x0,  long x1,  Addressable x2,  int x3,  long x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.XSetRGBColormaps$MH, "XSetRGBColormaps");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetSizeHints$MH,"XSetSizeHints");
    }
    public static int XSetSizeHints ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.XSetSizeHints$MH, "XSetSizeHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStandardProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetStandardProperties$MH,"XSetStandardProperties");
    }
    public static int XSetStandardProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  long x4,  Addressable x5,  int x6,  Addressable x7) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.XSetStandardProperties$MH, "XSetStandardProperties");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetTextProperty$MH,"XSetTextProperty");
    }
    public static void XSetTextProperty ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.XSetTextProperty$MH, "XSetTextProperty");
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMClientMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetWMClientMachine$MH,"XSetWMClientMachine");
    }
    public static void XSetWMClientMachine ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.XSetWMClientMachine$MH, "XSetWMClientMachine");
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMHints$MH,"XSetWMHints");
    }
    public static int XSetWMHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.XSetWMHints$MH, "XSetWMHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMIconName$MH,"XSetWMIconName");
    }
    public static void XSetWMIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.XSetWMIconName$MH, "XSetWMIconName");
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMName$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMName$MH,"XSetWMName");
    }
    public static void XSetWMName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.XSetWMName$MH, "XSetWMName");
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMNormalHints$MH,"XSetWMNormalHints");
    }
    public static void XSetWMNormalHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.XSetWMNormalHints$MH, "XSetWMNormalHints");
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMProperties$MH,"XSetWMProperties");
    }
    public static void XSetWMProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.XSetWMProperties$MH, "XSetWMProperties");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbSetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XmbSetWMProperties$MH,"XmbSetWMProperties");
    }
    public static void XmbSetWMProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.XmbSetWMProperties$MH, "XmbSetWMProperties");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8SetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$82.Xutf8SetWMProperties$MH,"Xutf8SetWMProperties");
    }
    public static void Xutf8SetWMProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.Xutf8SetWMProperties$MH, "Xutf8SetWMProperties");
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetWMSizeHints$MH,"XSetWMSizeHints");
    }
    public static void XSetWMSizeHints ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.XSetWMSizeHints$MH, "XSetWMSizeHints");
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetRegion$MH,"XSetRegion");
    }
    public static int XSetRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.XSetRegion$MH, "XSetRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetStandardColormap$MH,"XSetStandardColormap");
    }
    public static void XSetStandardColormap ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.XSetStandardColormap$MH, "XSetStandardColormap");
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetZoomHints$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetZoomHints$MH,"XSetZoomHints");
    }
    public static int XSetZoomHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.XSetZoomHints$MH, "XSetZoomHints");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XShrinkRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XShrinkRegion$MH,"XShrinkRegion");
    }
    public static int XShrinkRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.XShrinkRegion$MH, "XShrinkRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStringListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XStringListToTextProperty$MH,"XStringListToTextProperty");
    }
    public static int XStringListToTextProperty ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.XStringListToTextProperty$MH, "XStringListToTextProperty");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSubtractRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XSubtractRegion$MH,"XSubtractRegion");
    }
    public static int XSubtractRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.XSubtractRegion$MH, "XSubtractRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XmbTextListToTextProperty$MH,"XmbTextListToTextProperty");
    }
    public static int XmbTextListToTextProperty ( Addressable display,  Addressable list,  int count,  int style,  Addressable text_prop_return) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.XmbTextListToTextProperty$MH, "XmbTextListToTextProperty");
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XwcTextListToTextProperty$MH,"XwcTextListToTextProperty");
    }
    public static int XwcTextListToTextProperty ( Addressable display,  Addressable list,  int count,  int style,  Addressable text_prop_return) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.XwcTextListToTextProperty$MH, "XwcTextListToTextProperty");
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.Xutf8TextListToTextProperty$MH,"Xutf8TextListToTextProperty");
    }
    public static int Xutf8TextListToTextProperty ( Addressable display,  Addressable list,  int count,  int style,  Addressable text_prop_return) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.Xutf8TextListToTextProperty$MH, "Xutf8TextListToTextProperty");
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcFreeStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XwcFreeStringList$MH,"XwcFreeStringList");
    }
    public static void XwcFreeStringList ( Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.XwcFreeStringList$MH, "XwcFreeStringList");
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextPropertyToStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XTextPropertyToStringList$MH,"XTextPropertyToStringList");
    }
    public static int XTextPropertyToStringList ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.XTextPropertyToStringList$MH, "XTextPropertyToStringList");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XmbTextPropertyToTextList$MH,"XmbTextPropertyToTextList");
    }
    public static int XmbTextPropertyToTextList ( Addressable display,  Addressable text_prop,  Addressable list_return,  Addressable count_return) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.XmbTextPropertyToTextList$MH, "XmbTextPropertyToTextList");
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XwcTextPropertyToTextList$MH,"XwcTextPropertyToTextList");
    }
    public static int XwcTextPropertyToTextList ( Addressable display,  Addressable text_prop,  Addressable list_return,  Addressable count_return) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.XwcTextPropertyToTextList$MH, "XwcTextPropertyToTextList");
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.Xutf8TextPropertyToTextList$MH,"Xutf8TextPropertyToTextList");
    }
    public static int Xutf8TextPropertyToTextList ( Addressable display,  Addressable text_prop,  Addressable list_return,  Addressable count_return) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.Xutf8TextPropertyToTextList$MH, "Xutf8TextPropertyToTextList");
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnionRectWithRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XUnionRectWithRegion$MH,"XUnionRectWithRegion");
    }
    public static int XUnionRectWithRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.XUnionRectWithRegion$MH, "XUnionRectWithRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnionRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XUnionRegion$MH,"XUnionRegion");
    }
    public static int XUnionRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.XUnionRegion$MH, "XUnionRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWMGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$85.XWMGeometry$MH,"XWMGeometry");
    }
    public static int XWMGeometry ( Addressable x0,  int x1,  Addressable x2,  Addressable x3,  int x4,  Addressable x5,  Addressable x6,  Addressable x7,  Addressable x8,  Addressable x9,  Addressable x10) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.XWMGeometry$MH, "XWMGeometry");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XXorRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$85.XXorRegion$MH,"XXorRegion");
    }
    public static int XXorRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.XXorRegion$MH, "XXorRegion");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment __FD_ZERO_STOS() {
        return constants$85.__FD_ZERO_STOS$SEGMENT;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static long None() {
        return 0L;
    }
    public static long ParentRelative() {
        return 1L;
    }
    public static long CopyFromParent() {
        return 0L;
    }
    public static long PointerWindow() {
        return 0L;
    }
    public static long InputFocus() {
        return 1L;
    }
    public static long PointerRoot() {
        return 1L;
    }
    public static long AnyPropertyType() {
        return 0L;
    }
    public static long AnyKey() {
        return 0L;
    }
    public static long AnyButton() {
        return 0L;
    }
    public static long AllTemporary() {
        return 0L;
    }
    public static long CurrentTime() {
        return 0L;
    }
    public static long NoSymbol() {
        return 0L;
    }
    public static long NoEventMask() {
        return 0L;
    }
    public static long KeyPressMask() {
        return 1L;
    }
    public static long KeyReleaseMask() {
        return 2L;
    }
    public static long ButtonPressMask() {
        return 4L;
    }
    public static long ButtonReleaseMask() {
        return 8L;
    }
    public static long EnterWindowMask() {
        return 16L;
    }
    public static long LeaveWindowMask() {
        return 32L;
    }
    public static long PointerMotionMask() {
        return 64L;
    }
    public static long PointerMotionHintMask() {
        return 128L;
    }
    public static long Button1MotionMask() {
        return 256L;
    }
    public static long Button2MotionMask() {
        return 512L;
    }
    public static long Button3MotionMask() {
        return 1024L;
    }
    public static long Button4MotionMask() {
        return 2048L;
    }
    public static long Button5MotionMask() {
        return 4096L;
    }
    public static long ButtonMotionMask() {
        return 8192L;
    }
    public static long KeymapStateMask() {
        return 16384L;
    }
    public static long ExposureMask() {
        return 32768L;
    }
    public static long VisibilityChangeMask() {
        return 65536L;
    }
    public static long StructureNotifyMask() {
        return 131072L;
    }
    public static long ResizeRedirectMask() {
        return 262144L;
    }
    public static long SubstructureNotifyMask() {
        return 524288L;
    }
    public static long SubstructureRedirectMask() {
        return 1048576L;
    }
    public static long FocusChangeMask() {
        return 2097152L;
    }
    public static long PropertyChangeMask() {
        return 4194304L;
    }
    public static long ColormapChangeMask() {
        return 8388608L;
    }
    public static long OwnerGrabButtonMask() {
        return 16777216L;
    }
    public static int ShiftMask() {
        return (int)1L;
    }
    public static int LockMask() {
        return (int)2L;
    }
    public static int ControlMask() {
        return (int)4L;
    }
    public static int Mod1Mask() {
        return (int)8L;
    }
    public static int Mod2Mask() {
        return (int)16L;
    }
    public static int Mod3Mask() {
        return (int)32L;
    }
    public static int Mod4Mask() {
        return (int)64L;
    }
    public static int Mod5Mask() {
        return (int)128L;
    }
    public static int Button1Mask() {
        return (int)256L;
    }
    public static int Button2Mask() {
        return (int)512L;
    }
    public static int Button3Mask() {
        return (int)1024L;
    }
    public static int Button4Mask() {
        return (int)2048L;
    }
    public static int Button5Mask() {
        return (int)4096L;
    }
    public static int AnyModifier() {
        return (int)32768L;
    }
    public static int RevertToNone() {
        return (int)0L;
    }
    public static int RevertToPointerRoot() {
        return (int)1L;
    }
    public static long CWBackPixmap() {
        return 1L;
    }
    public static long CWBackPixel() {
        return 2L;
    }
    public static long CWBorderPixmap() {
        return 4L;
    }
    public static long CWBorderPixel() {
        return 8L;
    }
    public static long CWBitGravity() {
        return 16L;
    }
    public static long CWWinGravity() {
        return 32L;
    }
    public static long CWBackingStore() {
        return 64L;
    }
    public static long CWBackingPlanes() {
        return 128L;
    }
    public static long CWBackingPixel() {
        return 256L;
    }
    public static long CWOverrideRedirect() {
        return 512L;
    }
    public static long CWSaveUnder() {
        return 1024L;
    }
    public static long CWEventMask() {
        return 2048L;
    }
    public static long CWDontPropagate() {
        return 4096L;
    }
    public static long CWColormap() {
        return 8192L;
    }
    public static long CWCursor() {
        return 16384L;
    }
    public static int CWX() {
        return (int)1L;
    }
    public static int CWY() {
        return (int)2L;
    }
    public static int CWWidth() {
        return (int)4L;
    }
    public static int CWHeight() {
        return (int)8L;
    }
    public static int CWBorderWidth() {
        return (int)16L;
    }
    public static int CWSibling() {
        return (int)32L;
    }
    public static int CWStackMode() {
        return (int)64L;
    }
    public static long GCFunction() {
        return 1L;
    }
    public static long GCPlaneMask() {
        return 2L;
    }
    public static long GCForeground() {
        return 4L;
    }
    public static long GCBackground() {
        return 8L;
    }
    public static long GCLineWidth() {
        return 16L;
    }
    public static long GCLineStyle() {
        return 32L;
    }
    public static long GCCapStyle() {
        return 64L;
    }
    public static long GCJoinStyle() {
        return 128L;
    }
    public static long GCFillStyle() {
        return 256L;
    }
    public static long GCFillRule() {
        return 512L;
    }
    public static long GCTile() {
        return 1024L;
    }
    public static long GCStipple() {
        return 2048L;
    }
    public static long GCTileStipXOrigin() {
        return 4096L;
    }
    public static long GCTileStipYOrigin() {
        return 8192L;
    }
    public static long GCFont() {
        return 16384L;
    }
    public static long GCSubwindowMode() {
        return 32768L;
    }
    public static long GCGraphicsExposures() {
        return 65536L;
    }
    public static long GCClipXOrigin() {
        return 131072L;
    }
    public static long GCClipYOrigin() {
        return 262144L;
    }
    public static long GCClipMask() {
        return 524288L;
    }
    public static long GCDashOffset() {
        return 1048576L;
    }
    public static long GCDashList() {
        return 2097152L;
    }
    public static long GCArcMode() {
        return 4194304L;
    }
    public static int DoRed() {
        return (int)1L;
    }
    public static int DoGreen() {
        return (int)2L;
    }
    public static int DoBlue() {
        return (int)4L;
    }
    public static long KBKeyClickPercent() {
        return 1L;
    }
    public static long KBBellPercent() {
        return 2L;
    }
    public static long KBBellPitch() {
        return 4L;
    }
    public static long KBBellDuration() {
        return 8L;
    }
    public static long KBLed() {
        return 16L;
    }
    public static long KBLedMode() {
        return 32L;
    }
    public static long KBKey() {
        return 64L;
    }
    public static long KBAutoRepeatMode() {
        return 128L;
    }
    public static MemoryAddress NULL() {
        return constants$85.NULL$ADDR;
    }
    public static long AllPlanes() {
        return -1L;
    }
    public static MemorySegment XNRequiredCharSet() {
        return constants$85.XNRequiredCharSet$SEGMENT;
    }
    public static MemorySegment XNQueryOrientation() {
        return constants$85.XNQueryOrientation$SEGMENT;
    }
    public static MemorySegment XNBaseFontName() {
        return constants$86.XNBaseFontName$SEGMENT;
    }
    public static MemorySegment XNOMAutomatic() {
        return constants$86.XNOMAutomatic$SEGMENT;
    }
    public static MemorySegment XNMissingCharSet() {
        return constants$86.XNMissingCharSet$SEGMENT;
    }
    public static MemorySegment XNDefaultString() {
        return constants$86.XNDefaultString$SEGMENT;
    }
    public static MemorySegment XNOrientation() {
        return constants$86.XNOrientation$SEGMENT;
    }
    public static MemorySegment XNDirectionalDependentDrawing() {
        return constants$86.XNDirectionalDependentDrawing$SEGMENT;
    }
    public static MemorySegment XNContextualDrawing() {
        return constants$87.XNContextualDrawing$SEGMENT;
    }
    public static MemorySegment XNFontInfo() {
        return constants$87.XNFontInfo$SEGMENT;
    }
    public static long XIMPreeditArea() {
        return 1L;
    }
    public static long XIMPreeditCallbacks() {
        return 2L;
    }
    public static long XIMPreeditPosition() {
        return 4L;
    }
    public static long XIMPreeditNothing() {
        return 8L;
    }
    public static long XIMPreeditNone() {
        return 16L;
    }
    public static long XIMStatusArea() {
        return 256L;
    }
    public static long XIMStatusCallbacks() {
        return 512L;
    }
    public static long XIMStatusNothing() {
        return 1024L;
    }
    public static long XIMStatusNone() {
        return 2048L;
    }
    public static MemorySegment XNVaNestedList() {
        return constants$87.XNVaNestedList$SEGMENT;
    }
    public static MemorySegment XNQueryInputStyle() {
        return constants$87.XNQueryInputStyle$SEGMENT;
    }
    public static MemorySegment XNClientWindow() {
        return constants$87.XNClientWindow$SEGMENT;
    }
    public static MemorySegment XNInputStyle() {
        return constants$87.XNInputStyle$SEGMENT;
    }
    public static MemorySegment XNFocusWindow() {
        return constants$88.XNFocusWindow$SEGMENT;
    }
    public static MemorySegment XNResourceName() {
        return constants$88.XNResourceName$SEGMENT;
    }
    public static MemorySegment XNResourceClass() {
        return constants$88.XNResourceClass$SEGMENT;
    }
    public static MemorySegment XNGeometryCallback() {
        return constants$88.XNGeometryCallback$SEGMENT;
    }
    public static MemorySegment XNDestroyCallback() {
        return constants$88.XNDestroyCallback$SEGMENT;
    }
    public static MemorySegment XNFilterEvents() {
        return constants$88.XNFilterEvents$SEGMENT;
    }
    public static MemorySegment XNPreeditStartCallback() {
        return constants$89.XNPreeditStartCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditDoneCallback() {
        return constants$89.XNPreeditDoneCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditDrawCallback() {
        return constants$89.XNPreeditDrawCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditCaretCallback() {
        return constants$89.XNPreeditCaretCallback$SEGMENT;
    }
}


