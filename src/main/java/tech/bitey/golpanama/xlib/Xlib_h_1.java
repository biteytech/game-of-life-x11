// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class Xlib_h_1 extends Xlib_h_2 {

    Xlib_h_1() {
        // Should not be called directly
    }
    private static final int XK_braille_dots_3467 = (int)16787564L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3467 16787564
     * }
     */
    public static int XK_braille_dots_3467() {
        return XK_braille_dots_3467;
    }
    private static final int XK_braille_dots_13467 = (int)16787565L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13467 16787565
     * }
     */
    public static int XK_braille_dots_13467() {
        return XK_braille_dots_13467;
    }
    private static final int XK_braille_dots_23467 = (int)16787566L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23467 16787566
     * }
     */
    public static int XK_braille_dots_23467() {
        return XK_braille_dots_23467;
    }
    private static final int XK_braille_dots_123467 = (int)16787567L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123467 16787567
     * }
     */
    public static int XK_braille_dots_123467() {
        return XK_braille_dots_123467;
    }
    private static final int XK_braille_dots_567 = (int)16787568L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_567 16787568
     * }
     */
    public static int XK_braille_dots_567() {
        return XK_braille_dots_567;
    }
    private static final int XK_braille_dots_1567 = (int)16787569L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1567 16787569
     * }
     */
    public static int XK_braille_dots_1567() {
        return XK_braille_dots_1567;
    }
    private static final int XK_braille_dots_2567 = (int)16787570L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2567 16787570
     * }
     */
    public static int XK_braille_dots_2567() {
        return XK_braille_dots_2567;
    }
    private static final int XK_braille_dots_12567 = (int)16787571L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12567 16787571
     * }
     */
    public static int XK_braille_dots_12567() {
        return XK_braille_dots_12567;
    }
    private static final int XK_braille_dots_3567 = (int)16787572L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3567 16787572
     * }
     */
    public static int XK_braille_dots_3567() {
        return XK_braille_dots_3567;
    }
    private static final int XK_braille_dots_13567 = (int)16787573L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13567 16787573
     * }
     */
    public static int XK_braille_dots_13567() {
        return XK_braille_dots_13567;
    }
    private static final int XK_braille_dots_23567 = (int)16787574L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23567 16787574
     * }
     */
    public static int XK_braille_dots_23567() {
        return XK_braille_dots_23567;
    }
    private static final int XK_braille_dots_123567 = (int)16787575L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123567 16787575
     * }
     */
    public static int XK_braille_dots_123567() {
        return XK_braille_dots_123567;
    }
    private static final int XK_braille_dots_4567 = (int)16787576L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_4567 16787576
     * }
     */
    public static int XK_braille_dots_4567() {
        return XK_braille_dots_4567;
    }
    private static final int XK_braille_dots_14567 = (int)16787577L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_14567 16787577
     * }
     */
    public static int XK_braille_dots_14567() {
        return XK_braille_dots_14567;
    }
    private static final int XK_braille_dots_24567 = (int)16787578L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_24567 16787578
     * }
     */
    public static int XK_braille_dots_24567() {
        return XK_braille_dots_24567;
    }
    private static final int XK_braille_dots_124567 = (int)16787579L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_124567 16787579
     * }
     */
    public static int XK_braille_dots_124567() {
        return XK_braille_dots_124567;
    }
    private static final int XK_braille_dots_34567 = (int)16787580L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_34567 16787580
     * }
     */
    public static int XK_braille_dots_34567() {
        return XK_braille_dots_34567;
    }
    private static final int XK_braille_dots_134567 = (int)16787581L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_134567 16787581
     * }
     */
    public static int XK_braille_dots_134567() {
        return XK_braille_dots_134567;
    }
    private static final int XK_braille_dots_234567 = (int)16787582L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_234567 16787582
     * }
     */
    public static int XK_braille_dots_234567() {
        return XK_braille_dots_234567;
    }
    private static final int XK_braille_dots_1234567 = (int)16787583L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1234567 16787583
     * }
     */
    public static int XK_braille_dots_1234567() {
        return XK_braille_dots_1234567;
    }
    private static final int XK_braille_dots_8 = (int)16787584L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_8 16787584
     * }
     */
    public static int XK_braille_dots_8() {
        return XK_braille_dots_8;
    }
    private static final int XK_braille_dots_18 = (int)16787585L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_18 16787585
     * }
     */
    public static int XK_braille_dots_18() {
        return XK_braille_dots_18;
    }
    private static final int XK_braille_dots_28 = (int)16787586L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_28 16787586
     * }
     */
    public static int XK_braille_dots_28() {
        return XK_braille_dots_28;
    }
    private static final int XK_braille_dots_128 = (int)16787587L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_128 16787587
     * }
     */
    public static int XK_braille_dots_128() {
        return XK_braille_dots_128;
    }
    private static final int XK_braille_dots_38 = (int)16787588L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_38 16787588
     * }
     */
    public static int XK_braille_dots_38() {
        return XK_braille_dots_38;
    }
    private static final int XK_braille_dots_138 = (int)16787589L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_138 16787589
     * }
     */
    public static int XK_braille_dots_138() {
        return XK_braille_dots_138;
    }
    private static final int XK_braille_dots_238 = (int)16787590L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_238 16787590
     * }
     */
    public static int XK_braille_dots_238() {
        return XK_braille_dots_238;
    }
    private static final int XK_braille_dots_1238 = (int)16787591L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1238 16787591
     * }
     */
    public static int XK_braille_dots_1238() {
        return XK_braille_dots_1238;
    }
    private static final int XK_braille_dots_48 = (int)16787592L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_48 16787592
     * }
     */
    public static int XK_braille_dots_48() {
        return XK_braille_dots_48;
    }
    private static final int XK_braille_dots_148 = (int)16787593L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_148 16787593
     * }
     */
    public static int XK_braille_dots_148() {
        return XK_braille_dots_148;
    }
    private static final int XK_braille_dots_248 = (int)16787594L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_248 16787594
     * }
     */
    public static int XK_braille_dots_248() {
        return XK_braille_dots_248;
    }
    private static final int XK_braille_dots_1248 = (int)16787595L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1248 16787595
     * }
     */
    public static int XK_braille_dots_1248() {
        return XK_braille_dots_1248;
    }
    private static final int XK_braille_dots_348 = (int)16787596L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_348 16787596
     * }
     */
    public static int XK_braille_dots_348() {
        return XK_braille_dots_348;
    }
    private static final int XK_braille_dots_1348 = (int)16787597L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1348 16787597
     * }
     */
    public static int XK_braille_dots_1348() {
        return XK_braille_dots_1348;
    }
    private static final int XK_braille_dots_2348 = (int)16787598L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2348 16787598
     * }
     */
    public static int XK_braille_dots_2348() {
        return XK_braille_dots_2348;
    }
    private static final int XK_braille_dots_12348 = (int)16787599L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12348 16787599
     * }
     */
    public static int XK_braille_dots_12348() {
        return XK_braille_dots_12348;
    }
    private static final int XK_braille_dots_58 = (int)16787600L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_58 16787600
     * }
     */
    public static int XK_braille_dots_58() {
        return XK_braille_dots_58;
    }
    private static final int XK_braille_dots_158 = (int)16787601L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_158 16787601
     * }
     */
    public static int XK_braille_dots_158() {
        return XK_braille_dots_158;
    }
    private static final int XK_braille_dots_258 = (int)16787602L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_258 16787602
     * }
     */
    public static int XK_braille_dots_258() {
        return XK_braille_dots_258;
    }
    private static final int XK_braille_dots_1258 = (int)16787603L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1258 16787603
     * }
     */
    public static int XK_braille_dots_1258() {
        return XK_braille_dots_1258;
    }
    private static final int XK_braille_dots_358 = (int)16787604L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_358 16787604
     * }
     */
    public static int XK_braille_dots_358() {
        return XK_braille_dots_358;
    }
    private static final int XK_braille_dots_1358 = (int)16787605L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1358 16787605
     * }
     */
    public static int XK_braille_dots_1358() {
        return XK_braille_dots_1358;
    }
    private static final int XK_braille_dots_2358 = (int)16787606L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2358 16787606
     * }
     */
    public static int XK_braille_dots_2358() {
        return XK_braille_dots_2358;
    }
    private static final int XK_braille_dots_12358 = (int)16787607L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12358 16787607
     * }
     */
    public static int XK_braille_dots_12358() {
        return XK_braille_dots_12358;
    }
    private static final int XK_braille_dots_458 = (int)16787608L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_458 16787608
     * }
     */
    public static int XK_braille_dots_458() {
        return XK_braille_dots_458;
    }
    private static final int XK_braille_dots_1458 = (int)16787609L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1458 16787609
     * }
     */
    public static int XK_braille_dots_1458() {
        return XK_braille_dots_1458;
    }
    private static final int XK_braille_dots_2458 = (int)16787610L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2458 16787610
     * }
     */
    public static int XK_braille_dots_2458() {
        return XK_braille_dots_2458;
    }
    private static final int XK_braille_dots_12458 = (int)16787611L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12458 16787611
     * }
     */
    public static int XK_braille_dots_12458() {
        return XK_braille_dots_12458;
    }
    private static final int XK_braille_dots_3458 = (int)16787612L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3458 16787612
     * }
     */
    public static int XK_braille_dots_3458() {
        return XK_braille_dots_3458;
    }
    private static final int XK_braille_dots_13458 = (int)16787613L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13458 16787613
     * }
     */
    public static int XK_braille_dots_13458() {
        return XK_braille_dots_13458;
    }
    private static final int XK_braille_dots_23458 = (int)16787614L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23458 16787614
     * }
     */
    public static int XK_braille_dots_23458() {
        return XK_braille_dots_23458;
    }
    private static final int XK_braille_dots_123458 = (int)16787615L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123458 16787615
     * }
     */
    public static int XK_braille_dots_123458() {
        return XK_braille_dots_123458;
    }
    private static final int XK_braille_dots_68 = (int)16787616L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_68 16787616
     * }
     */
    public static int XK_braille_dots_68() {
        return XK_braille_dots_68;
    }
    private static final int XK_braille_dots_168 = (int)16787617L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_168 16787617
     * }
     */
    public static int XK_braille_dots_168() {
        return XK_braille_dots_168;
    }
    private static final int XK_braille_dots_268 = (int)16787618L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_268 16787618
     * }
     */
    public static int XK_braille_dots_268() {
        return XK_braille_dots_268;
    }
    private static final int XK_braille_dots_1268 = (int)16787619L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1268 16787619
     * }
     */
    public static int XK_braille_dots_1268() {
        return XK_braille_dots_1268;
    }
    private static final int XK_braille_dots_368 = (int)16787620L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_368 16787620
     * }
     */
    public static int XK_braille_dots_368() {
        return XK_braille_dots_368;
    }
    private static final int XK_braille_dots_1368 = (int)16787621L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1368 16787621
     * }
     */
    public static int XK_braille_dots_1368() {
        return XK_braille_dots_1368;
    }
    private static final int XK_braille_dots_2368 = (int)16787622L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2368 16787622
     * }
     */
    public static int XK_braille_dots_2368() {
        return XK_braille_dots_2368;
    }
    private static final int XK_braille_dots_12368 = (int)16787623L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12368 16787623
     * }
     */
    public static int XK_braille_dots_12368() {
        return XK_braille_dots_12368;
    }
    private static final int XK_braille_dots_468 = (int)16787624L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_468 16787624
     * }
     */
    public static int XK_braille_dots_468() {
        return XK_braille_dots_468;
    }
    private static final int XK_braille_dots_1468 = (int)16787625L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1468 16787625
     * }
     */
    public static int XK_braille_dots_1468() {
        return XK_braille_dots_1468;
    }
    private static final int XK_braille_dots_2468 = (int)16787626L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2468 16787626
     * }
     */
    public static int XK_braille_dots_2468() {
        return XK_braille_dots_2468;
    }
    private static final int XK_braille_dots_12468 = (int)16787627L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12468 16787627
     * }
     */
    public static int XK_braille_dots_12468() {
        return XK_braille_dots_12468;
    }
    private static final int XK_braille_dots_3468 = (int)16787628L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3468 16787628
     * }
     */
    public static int XK_braille_dots_3468() {
        return XK_braille_dots_3468;
    }
    private static final int XK_braille_dots_13468 = (int)16787629L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13468 16787629
     * }
     */
    public static int XK_braille_dots_13468() {
        return XK_braille_dots_13468;
    }
    private static final int XK_braille_dots_23468 = (int)16787630L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23468 16787630
     * }
     */
    public static int XK_braille_dots_23468() {
        return XK_braille_dots_23468;
    }
    private static final int XK_braille_dots_123468 = (int)16787631L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123468 16787631
     * }
     */
    public static int XK_braille_dots_123468() {
        return XK_braille_dots_123468;
    }
    private static final int XK_braille_dots_568 = (int)16787632L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_568 16787632
     * }
     */
    public static int XK_braille_dots_568() {
        return XK_braille_dots_568;
    }
    private static final int XK_braille_dots_1568 = (int)16787633L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1568 16787633
     * }
     */
    public static int XK_braille_dots_1568() {
        return XK_braille_dots_1568;
    }
    private static final int XK_braille_dots_2568 = (int)16787634L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2568 16787634
     * }
     */
    public static int XK_braille_dots_2568() {
        return XK_braille_dots_2568;
    }
    private static final int XK_braille_dots_12568 = (int)16787635L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12568 16787635
     * }
     */
    public static int XK_braille_dots_12568() {
        return XK_braille_dots_12568;
    }
    private static final int XK_braille_dots_3568 = (int)16787636L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3568 16787636
     * }
     */
    public static int XK_braille_dots_3568() {
        return XK_braille_dots_3568;
    }
    private static final int XK_braille_dots_13568 = (int)16787637L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13568 16787637
     * }
     */
    public static int XK_braille_dots_13568() {
        return XK_braille_dots_13568;
    }
    private static final int XK_braille_dots_23568 = (int)16787638L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23568 16787638
     * }
     */
    public static int XK_braille_dots_23568() {
        return XK_braille_dots_23568;
    }
    private static final int XK_braille_dots_123568 = (int)16787639L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123568 16787639
     * }
     */
    public static int XK_braille_dots_123568() {
        return XK_braille_dots_123568;
    }
    private static final int XK_braille_dots_4568 = (int)16787640L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_4568 16787640
     * }
     */
    public static int XK_braille_dots_4568() {
        return XK_braille_dots_4568;
    }
    private static final int XK_braille_dots_14568 = (int)16787641L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_14568 16787641
     * }
     */
    public static int XK_braille_dots_14568() {
        return XK_braille_dots_14568;
    }
    private static final int XK_braille_dots_24568 = (int)16787642L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_24568 16787642
     * }
     */
    public static int XK_braille_dots_24568() {
        return XK_braille_dots_24568;
    }
    private static final int XK_braille_dots_124568 = (int)16787643L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_124568 16787643
     * }
     */
    public static int XK_braille_dots_124568() {
        return XK_braille_dots_124568;
    }
    private static final int XK_braille_dots_34568 = (int)16787644L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_34568 16787644
     * }
     */
    public static int XK_braille_dots_34568() {
        return XK_braille_dots_34568;
    }
    private static final int XK_braille_dots_134568 = (int)16787645L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_134568 16787645
     * }
     */
    public static int XK_braille_dots_134568() {
        return XK_braille_dots_134568;
    }
    private static final int XK_braille_dots_234568 = (int)16787646L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_234568 16787646
     * }
     */
    public static int XK_braille_dots_234568() {
        return XK_braille_dots_234568;
    }
    private static final int XK_braille_dots_1234568 = (int)16787647L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1234568 16787647
     * }
     */
    public static int XK_braille_dots_1234568() {
        return XK_braille_dots_1234568;
    }
    private static final int XK_braille_dots_78 = (int)16787648L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_78 16787648
     * }
     */
    public static int XK_braille_dots_78() {
        return XK_braille_dots_78;
    }
    private static final int XK_braille_dots_178 = (int)16787649L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_178 16787649
     * }
     */
    public static int XK_braille_dots_178() {
        return XK_braille_dots_178;
    }
    private static final int XK_braille_dots_278 = (int)16787650L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_278 16787650
     * }
     */
    public static int XK_braille_dots_278() {
        return XK_braille_dots_278;
    }
    private static final int XK_braille_dots_1278 = (int)16787651L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1278 16787651
     * }
     */
    public static int XK_braille_dots_1278() {
        return XK_braille_dots_1278;
    }
    private static final int XK_braille_dots_378 = (int)16787652L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_378 16787652
     * }
     */
    public static int XK_braille_dots_378() {
        return XK_braille_dots_378;
    }
    private static final int XK_braille_dots_1378 = (int)16787653L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1378 16787653
     * }
     */
    public static int XK_braille_dots_1378() {
        return XK_braille_dots_1378;
    }
    private static final int XK_braille_dots_2378 = (int)16787654L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2378 16787654
     * }
     */
    public static int XK_braille_dots_2378() {
        return XK_braille_dots_2378;
    }
    private static final int XK_braille_dots_12378 = (int)16787655L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12378 16787655
     * }
     */
    public static int XK_braille_dots_12378() {
        return XK_braille_dots_12378;
    }
    private static final int XK_braille_dots_478 = (int)16787656L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_478 16787656
     * }
     */
    public static int XK_braille_dots_478() {
        return XK_braille_dots_478;
    }
    private static final int XK_braille_dots_1478 = (int)16787657L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1478 16787657
     * }
     */
    public static int XK_braille_dots_1478() {
        return XK_braille_dots_1478;
    }
    private static final int XK_braille_dots_2478 = (int)16787658L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2478 16787658
     * }
     */
    public static int XK_braille_dots_2478() {
        return XK_braille_dots_2478;
    }
    private static final int XK_braille_dots_12478 = (int)16787659L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12478 16787659
     * }
     */
    public static int XK_braille_dots_12478() {
        return XK_braille_dots_12478;
    }
    private static final int XK_braille_dots_3478 = (int)16787660L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3478 16787660
     * }
     */
    public static int XK_braille_dots_3478() {
        return XK_braille_dots_3478;
    }
    private static final int XK_braille_dots_13478 = (int)16787661L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13478 16787661
     * }
     */
    public static int XK_braille_dots_13478() {
        return XK_braille_dots_13478;
    }
    private static final int XK_braille_dots_23478 = (int)16787662L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23478 16787662
     * }
     */
    public static int XK_braille_dots_23478() {
        return XK_braille_dots_23478;
    }
    private static final int XK_braille_dots_123478 = (int)16787663L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123478 16787663
     * }
     */
    public static int XK_braille_dots_123478() {
        return XK_braille_dots_123478;
    }
    private static final int XK_braille_dots_578 = (int)16787664L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_578 16787664
     * }
     */
    public static int XK_braille_dots_578() {
        return XK_braille_dots_578;
    }
    private static final int XK_braille_dots_1578 = (int)16787665L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1578 16787665
     * }
     */
    public static int XK_braille_dots_1578() {
        return XK_braille_dots_1578;
    }
    private static final int XK_braille_dots_2578 = (int)16787666L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2578 16787666
     * }
     */
    public static int XK_braille_dots_2578() {
        return XK_braille_dots_2578;
    }
    private static final int XK_braille_dots_12578 = (int)16787667L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12578 16787667
     * }
     */
    public static int XK_braille_dots_12578() {
        return XK_braille_dots_12578;
    }
    private static final int XK_braille_dots_3578 = (int)16787668L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3578 16787668
     * }
     */
    public static int XK_braille_dots_3578() {
        return XK_braille_dots_3578;
    }
    private static final int XK_braille_dots_13578 = (int)16787669L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13578 16787669
     * }
     */
    public static int XK_braille_dots_13578() {
        return XK_braille_dots_13578;
    }
    private static final int XK_braille_dots_23578 = (int)16787670L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23578 16787670
     * }
     */
    public static int XK_braille_dots_23578() {
        return XK_braille_dots_23578;
    }
    private static final int XK_braille_dots_123578 = (int)16787671L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123578 16787671
     * }
     */
    public static int XK_braille_dots_123578() {
        return XK_braille_dots_123578;
    }
    private static final int XK_braille_dots_4578 = (int)16787672L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_4578 16787672
     * }
     */
    public static int XK_braille_dots_4578() {
        return XK_braille_dots_4578;
    }
    private static final int XK_braille_dots_14578 = (int)16787673L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_14578 16787673
     * }
     */
    public static int XK_braille_dots_14578() {
        return XK_braille_dots_14578;
    }
    private static final int XK_braille_dots_24578 = (int)16787674L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_24578 16787674
     * }
     */
    public static int XK_braille_dots_24578() {
        return XK_braille_dots_24578;
    }
    private static final int XK_braille_dots_124578 = (int)16787675L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_124578 16787675
     * }
     */
    public static int XK_braille_dots_124578() {
        return XK_braille_dots_124578;
    }
    private static final int XK_braille_dots_34578 = (int)16787676L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_34578 16787676
     * }
     */
    public static int XK_braille_dots_34578() {
        return XK_braille_dots_34578;
    }
    private static final int XK_braille_dots_134578 = (int)16787677L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_134578 16787677
     * }
     */
    public static int XK_braille_dots_134578() {
        return XK_braille_dots_134578;
    }
    private static final int XK_braille_dots_234578 = (int)16787678L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_234578 16787678
     * }
     */
    public static int XK_braille_dots_234578() {
        return XK_braille_dots_234578;
    }
    private static final int XK_braille_dots_1234578 = (int)16787679L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1234578 16787679
     * }
     */
    public static int XK_braille_dots_1234578() {
        return XK_braille_dots_1234578;
    }
    private static final int XK_braille_dots_678 = (int)16787680L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_678 16787680
     * }
     */
    public static int XK_braille_dots_678() {
        return XK_braille_dots_678;
    }
    private static final int XK_braille_dots_1678 = (int)16787681L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1678 16787681
     * }
     */
    public static int XK_braille_dots_1678() {
        return XK_braille_dots_1678;
    }
    private static final int XK_braille_dots_2678 = (int)16787682L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2678 16787682
     * }
     */
    public static int XK_braille_dots_2678() {
        return XK_braille_dots_2678;
    }
    private static final int XK_braille_dots_12678 = (int)16787683L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12678 16787683
     * }
     */
    public static int XK_braille_dots_12678() {
        return XK_braille_dots_12678;
    }
    private static final int XK_braille_dots_3678 = (int)16787684L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_3678 16787684
     * }
     */
    public static int XK_braille_dots_3678() {
        return XK_braille_dots_3678;
    }
    private static final int XK_braille_dots_13678 = (int)16787685L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_13678 16787685
     * }
     */
    public static int XK_braille_dots_13678() {
        return XK_braille_dots_13678;
    }
    private static final int XK_braille_dots_23678 = (int)16787686L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_23678 16787686
     * }
     */
    public static int XK_braille_dots_23678() {
        return XK_braille_dots_23678;
    }
    private static final int XK_braille_dots_123678 = (int)16787687L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_123678 16787687
     * }
     */
    public static int XK_braille_dots_123678() {
        return XK_braille_dots_123678;
    }
    private static final int XK_braille_dots_4678 = (int)16787688L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_4678 16787688
     * }
     */
    public static int XK_braille_dots_4678() {
        return XK_braille_dots_4678;
    }
    private static final int XK_braille_dots_14678 = (int)16787689L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_14678 16787689
     * }
     */
    public static int XK_braille_dots_14678() {
        return XK_braille_dots_14678;
    }
    private static final int XK_braille_dots_24678 = (int)16787690L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_24678 16787690
     * }
     */
    public static int XK_braille_dots_24678() {
        return XK_braille_dots_24678;
    }
    private static final int XK_braille_dots_124678 = (int)16787691L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_124678 16787691
     * }
     */
    public static int XK_braille_dots_124678() {
        return XK_braille_dots_124678;
    }
    private static final int XK_braille_dots_34678 = (int)16787692L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_34678 16787692
     * }
     */
    public static int XK_braille_dots_34678() {
        return XK_braille_dots_34678;
    }
    private static final int XK_braille_dots_134678 = (int)16787693L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_134678 16787693
     * }
     */
    public static int XK_braille_dots_134678() {
        return XK_braille_dots_134678;
    }
    private static final int XK_braille_dots_234678 = (int)16787694L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_234678 16787694
     * }
     */
    public static int XK_braille_dots_234678() {
        return XK_braille_dots_234678;
    }
    private static final int XK_braille_dots_1234678 = (int)16787695L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1234678 16787695
     * }
     */
    public static int XK_braille_dots_1234678() {
        return XK_braille_dots_1234678;
    }
    private static final int XK_braille_dots_5678 = (int)16787696L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_5678 16787696
     * }
     */
    public static int XK_braille_dots_5678() {
        return XK_braille_dots_5678;
    }
    private static final int XK_braille_dots_15678 = (int)16787697L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_15678 16787697
     * }
     */
    public static int XK_braille_dots_15678() {
        return XK_braille_dots_15678;
    }
    private static final int XK_braille_dots_25678 = (int)16787698L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_25678 16787698
     * }
     */
    public static int XK_braille_dots_25678() {
        return XK_braille_dots_25678;
    }
    private static final int XK_braille_dots_125678 = (int)16787699L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_125678 16787699
     * }
     */
    public static int XK_braille_dots_125678() {
        return XK_braille_dots_125678;
    }
    private static final int XK_braille_dots_35678 = (int)16787700L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_35678 16787700
     * }
     */
    public static int XK_braille_dots_35678() {
        return XK_braille_dots_35678;
    }
    private static final int XK_braille_dots_135678 = (int)16787701L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_135678 16787701
     * }
     */
    public static int XK_braille_dots_135678() {
        return XK_braille_dots_135678;
    }
    private static final int XK_braille_dots_235678 = (int)16787702L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_235678 16787702
     * }
     */
    public static int XK_braille_dots_235678() {
        return XK_braille_dots_235678;
    }
    private static final int XK_braille_dots_1235678 = (int)16787703L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1235678 16787703
     * }
     */
    public static int XK_braille_dots_1235678() {
        return XK_braille_dots_1235678;
    }
    private static final int XK_braille_dots_45678 = (int)16787704L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_45678 16787704
     * }
     */
    public static int XK_braille_dots_45678() {
        return XK_braille_dots_45678;
    }
    private static final int XK_braille_dots_145678 = (int)16787705L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_145678 16787705
     * }
     */
    public static int XK_braille_dots_145678() {
        return XK_braille_dots_145678;
    }
    private static final int XK_braille_dots_245678 = (int)16787706L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_245678 16787706
     * }
     */
    public static int XK_braille_dots_245678() {
        return XK_braille_dots_245678;
    }
    private static final int XK_braille_dots_1245678 = (int)16787707L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1245678 16787707
     * }
     */
    public static int XK_braille_dots_1245678() {
        return XK_braille_dots_1245678;
    }
    private static final int XK_braille_dots_345678 = (int)16787708L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_345678 16787708
     * }
     */
    public static int XK_braille_dots_345678() {
        return XK_braille_dots_345678;
    }
    private static final int XK_braille_dots_1345678 = (int)16787709L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_1345678 16787709
     * }
     */
    public static int XK_braille_dots_1345678() {
        return XK_braille_dots_1345678;
    }
    private static final int XK_braille_dots_2345678 = (int)16787710L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_2345678 16787710
     * }
     */
    public static int XK_braille_dots_2345678() {
        return XK_braille_dots_2345678;
    }
    private static final int XK_braille_dots_12345678 = (int)16787711L;
    /**
     * {@snippet lang=c :
     * #define XK_braille_dots_12345678 16787711
     * }
     */
    public static int XK_braille_dots_12345678() {
        return XK_braille_dots_12345678;
    }
    private static final int XK_Sinh_ng = (int)16780674L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ng 16780674
     * }
     */
    public static int XK_Sinh_ng() {
        return XK_Sinh_ng;
    }
    private static final int XK_Sinh_h2 = (int)16780675L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_h2 16780675
     * }
     */
    public static int XK_Sinh_h2() {
        return XK_Sinh_h2;
    }
    private static final int XK_Sinh_a = (int)16780677L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_a 16780677
     * }
     */
    public static int XK_Sinh_a() {
        return XK_Sinh_a;
    }
    private static final int XK_Sinh_aa = (int)16780678L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_aa 16780678
     * }
     */
    public static int XK_Sinh_aa() {
        return XK_Sinh_aa;
    }
    private static final int XK_Sinh_ae = (int)16780679L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ae 16780679
     * }
     */
    public static int XK_Sinh_ae() {
        return XK_Sinh_ae;
    }
    private static final int XK_Sinh_aee = (int)16780680L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_aee 16780680
     * }
     */
    public static int XK_Sinh_aee() {
        return XK_Sinh_aee;
    }
    private static final int XK_Sinh_i = (int)16780681L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_i 16780681
     * }
     */
    public static int XK_Sinh_i() {
        return XK_Sinh_i;
    }
    private static final int XK_Sinh_ii = (int)16780682L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ii 16780682
     * }
     */
    public static int XK_Sinh_ii() {
        return XK_Sinh_ii;
    }
    private static final int XK_Sinh_u = (int)16780683L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_u 16780683
     * }
     */
    public static int XK_Sinh_u() {
        return XK_Sinh_u;
    }
    private static final int XK_Sinh_uu = (int)16780684L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_uu 16780684
     * }
     */
    public static int XK_Sinh_uu() {
        return XK_Sinh_uu;
    }
    private static final int XK_Sinh_ri = (int)16780685L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ri 16780685
     * }
     */
    public static int XK_Sinh_ri() {
        return XK_Sinh_ri;
    }
    private static final int XK_Sinh_rii = (int)16780686L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_rii 16780686
     * }
     */
    public static int XK_Sinh_rii() {
        return XK_Sinh_rii;
    }
    private static final int XK_Sinh_lu = (int)16780687L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_lu 16780687
     * }
     */
    public static int XK_Sinh_lu() {
        return XK_Sinh_lu;
    }
    private static final int XK_Sinh_luu = (int)16780688L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_luu 16780688
     * }
     */
    public static int XK_Sinh_luu() {
        return XK_Sinh_luu;
    }
    private static final int XK_Sinh_e = (int)16780689L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_e 16780689
     * }
     */
    public static int XK_Sinh_e() {
        return XK_Sinh_e;
    }
    private static final int XK_Sinh_ee = (int)16780690L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ee 16780690
     * }
     */
    public static int XK_Sinh_ee() {
        return XK_Sinh_ee;
    }
    private static final int XK_Sinh_ai = (int)16780691L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ai 16780691
     * }
     */
    public static int XK_Sinh_ai() {
        return XK_Sinh_ai;
    }
    private static final int XK_Sinh_o = (int)16780692L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_o 16780692
     * }
     */
    public static int XK_Sinh_o() {
        return XK_Sinh_o;
    }
    private static final int XK_Sinh_oo = (int)16780693L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_oo 16780693
     * }
     */
    public static int XK_Sinh_oo() {
        return XK_Sinh_oo;
    }
    private static final int XK_Sinh_au = (int)16780694L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_au 16780694
     * }
     */
    public static int XK_Sinh_au() {
        return XK_Sinh_au;
    }
    private static final int XK_Sinh_ka = (int)16780698L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ka 16780698
     * }
     */
    public static int XK_Sinh_ka() {
        return XK_Sinh_ka;
    }
    private static final int XK_Sinh_kha = (int)16780699L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_kha 16780699
     * }
     */
    public static int XK_Sinh_kha() {
        return XK_Sinh_kha;
    }
    private static final int XK_Sinh_ga = (int)16780700L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ga 16780700
     * }
     */
    public static int XK_Sinh_ga() {
        return XK_Sinh_ga;
    }
    private static final int XK_Sinh_gha = (int)16780701L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_gha 16780701
     * }
     */
    public static int XK_Sinh_gha() {
        return XK_Sinh_gha;
    }
    private static final int XK_Sinh_ng2 = (int)16780702L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ng2 16780702
     * }
     */
    public static int XK_Sinh_ng2() {
        return XK_Sinh_ng2;
    }
    private static final int XK_Sinh_nga = (int)16780703L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_nga 16780703
     * }
     */
    public static int XK_Sinh_nga() {
        return XK_Sinh_nga;
    }
    private static final int XK_Sinh_ca = (int)16780704L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ca 16780704
     * }
     */
    public static int XK_Sinh_ca() {
        return XK_Sinh_ca;
    }
    private static final int XK_Sinh_cha = (int)16780705L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_cha 16780705
     * }
     */
    public static int XK_Sinh_cha() {
        return XK_Sinh_cha;
    }
    private static final int XK_Sinh_ja = (int)16780706L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ja 16780706
     * }
     */
    public static int XK_Sinh_ja() {
        return XK_Sinh_ja;
    }
    private static final int XK_Sinh_jha = (int)16780707L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_jha 16780707
     * }
     */
    public static int XK_Sinh_jha() {
        return XK_Sinh_jha;
    }
    private static final int XK_Sinh_nya = (int)16780708L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_nya 16780708
     * }
     */
    public static int XK_Sinh_nya() {
        return XK_Sinh_nya;
    }
    private static final int XK_Sinh_jnya = (int)16780709L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_jnya 16780709
     * }
     */
    public static int XK_Sinh_jnya() {
        return XK_Sinh_jnya;
    }
    private static final int XK_Sinh_nja = (int)16780710L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_nja 16780710
     * }
     */
    public static int XK_Sinh_nja() {
        return XK_Sinh_nja;
    }
    private static final int XK_Sinh_tta = (int)16780711L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_tta 16780711
     * }
     */
    public static int XK_Sinh_tta() {
        return XK_Sinh_tta;
    }
    private static final int XK_Sinh_ttha = (int)16780712L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ttha 16780712
     * }
     */
    public static int XK_Sinh_ttha() {
        return XK_Sinh_ttha;
    }
    private static final int XK_Sinh_dda = (int)16780713L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_dda 16780713
     * }
     */
    public static int XK_Sinh_dda() {
        return XK_Sinh_dda;
    }
    private static final int XK_Sinh_ddha = (int)16780714L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ddha 16780714
     * }
     */
    public static int XK_Sinh_ddha() {
        return XK_Sinh_ddha;
    }
    private static final int XK_Sinh_nna = (int)16780715L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_nna 16780715
     * }
     */
    public static int XK_Sinh_nna() {
        return XK_Sinh_nna;
    }
    private static final int XK_Sinh_ndda = (int)16780716L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ndda 16780716
     * }
     */
    public static int XK_Sinh_ndda() {
        return XK_Sinh_ndda;
    }
    private static final int XK_Sinh_tha = (int)16780717L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_tha 16780717
     * }
     */
    public static int XK_Sinh_tha() {
        return XK_Sinh_tha;
    }
    private static final int XK_Sinh_thha = (int)16780718L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_thha 16780718
     * }
     */
    public static int XK_Sinh_thha() {
        return XK_Sinh_thha;
    }
    private static final int XK_Sinh_dha = (int)16780719L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_dha 16780719
     * }
     */
    public static int XK_Sinh_dha() {
        return XK_Sinh_dha;
    }
    private static final int XK_Sinh_dhha = (int)16780720L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_dhha 16780720
     * }
     */
    public static int XK_Sinh_dhha() {
        return XK_Sinh_dhha;
    }
    private static final int XK_Sinh_na = (int)16780721L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_na 16780721
     * }
     */
    public static int XK_Sinh_na() {
        return XK_Sinh_na;
    }
    private static final int XK_Sinh_ndha = (int)16780723L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ndha 16780723
     * }
     */
    public static int XK_Sinh_ndha() {
        return XK_Sinh_ndha;
    }
    private static final int XK_Sinh_pa = (int)16780724L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_pa 16780724
     * }
     */
    public static int XK_Sinh_pa() {
        return XK_Sinh_pa;
    }
    private static final int XK_Sinh_pha = (int)16780725L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_pha 16780725
     * }
     */
    public static int XK_Sinh_pha() {
        return XK_Sinh_pha;
    }
    private static final int XK_Sinh_ba = (int)16780726L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ba 16780726
     * }
     */
    public static int XK_Sinh_ba() {
        return XK_Sinh_ba;
    }
    private static final int XK_Sinh_bha = (int)16780727L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_bha 16780727
     * }
     */
    public static int XK_Sinh_bha() {
        return XK_Sinh_bha;
    }
    private static final int XK_Sinh_ma = (int)16780728L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ma 16780728
     * }
     */
    public static int XK_Sinh_ma() {
        return XK_Sinh_ma;
    }
    private static final int XK_Sinh_mba = (int)16780729L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_mba 16780729
     * }
     */
    public static int XK_Sinh_mba() {
        return XK_Sinh_mba;
    }
    private static final int XK_Sinh_ya = (int)16780730L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ya 16780730
     * }
     */
    public static int XK_Sinh_ya() {
        return XK_Sinh_ya;
    }
    private static final int XK_Sinh_ra = (int)16780731L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ra 16780731
     * }
     */
    public static int XK_Sinh_ra() {
        return XK_Sinh_ra;
    }
    private static final int XK_Sinh_la = (int)16780733L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_la 16780733
     * }
     */
    public static int XK_Sinh_la() {
        return XK_Sinh_la;
    }
    private static final int XK_Sinh_va = (int)16780736L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_va 16780736
     * }
     */
    public static int XK_Sinh_va() {
        return XK_Sinh_va;
    }
    private static final int XK_Sinh_sha = (int)16780737L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_sha 16780737
     * }
     */
    public static int XK_Sinh_sha() {
        return XK_Sinh_sha;
    }
    private static final int XK_Sinh_ssha = (int)16780738L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ssha 16780738
     * }
     */
    public static int XK_Sinh_ssha() {
        return XK_Sinh_ssha;
    }
    private static final int XK_Sinh_sa = (int)16780739L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_sa 16780739
     * }
     */
    public static int XK_Sinh_sa() {
        return XK_Sinh_sa;
    }
    private static final int XK_Sinh_ha = (int)16780740L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ha 16780740
     * }
     */
    public static int XK_Sinh_ha() {
        return XK_Sinh_ha;
    }
    private static final int XK_Sinh_lla = (int)16780741L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_lla 16780741
     * }
     */
    public static int XK_Sinh_lla() {
        return XK_Sinh_lla;
    }
    private static final int XK_Sinh_fa = (int)16780742L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_fa 16780742
     * }
     */
    public static int XK_Sinh_fa() {
        return XK_Sinh_fa;
    }
    private static final int XK_Sinh_al = (int)16780746L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_al 16780746
     * }
     */
    public static int XK_Sinh_al() {
        return XK_Sinh_al;
    }
    private static final int XK_Sinh_aa2 = (int)16780751L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_aa2 16780751
     * }
     */
    public static int XK_Sinh_aa2() {
        return XK_Sinh_aa2;
    }
    private static final int XK_Sinh_ae2 = (int)16780752L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ae2 16780752
     * }
     */
    public static int XK_Sinh_ae2() {
        return XK_Sinh_ae2;
    }
    private static final int XK_Sinh_aee2 = (int)16780753L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_aee2 16780753
     * }
     */
    public static int XK_Sinh_aee2() {
        return XK_Sinh_aee2;
    }
    private static final int XK_Sinh_i2 = (int)16780754L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_i2 16780754
     * }
     */
    public static int XK_Sinh_i2() {
        return XK_Sinh_i2;
    }
    private static final int XK_Sinh_ii2 = (int)16780755L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ii2 16780755
     * }
     */
    public static int XK_Sinh_ii2() {
        return XK_Sinh_ii2;
    }
    private static final int XK_Sinh_u2 = (int)16780756L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_u2 16780756
     * }
     */
    public static int XK_Sinh_u2() {
        return XK_Sinh_u2;
    }
    private static final int XK_Sinh_uu2 = (int)16780758L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_uu2 16780758
     * }
     */
    public static int XK_Sinh_uu2() {
        return XK_Sinh_uu2;
    }
    private static final int XK_Sinh_ru2 = (int)16780760L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ru2 16780760
     * }
     */
    public static int XK_Sinh_ru2() {
        return XK_Sinh_ru2;
    }
    private static final int XK_Sinh_e2 = (int)16780761L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_e2 16780761
     * }
     */
    public static int XK_Sinh_e2() {
        return XK_Sinh_e2;
    }
    private static final int XK_Sinh_ee2 = (int)16780762L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ee2 16780762
     * }
     */
    public static int XK_Sinh_ee2() {
        return XK_Sinh_ee2;
    }
    private static final int XK_Sinh_ai2 = (int)16780763L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ai2 16780763
     * }
     */
    public static int XK_Sinh_ai2() {
        return XK_Sinh_ai2;
    }
    private static final int XK_Sinh_o2 = (int)16780764L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_o2 16780764
     * }
     */
    public static int XK_Sinh_o2() {
        return XK_Sinh_o2;
    }
    private static final int XK_Sinh_oo2 = (int)16780765L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_oo2 16780765
     * }
     */
    public static int XK_Sinh_oo2() {
        return XK_Sinh_oo2;
    }
    private static final int XK_Sinh_au2 = (int)16780766L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_au2 16780766
     * }
     */
    public static int XK_Sinh_au2() {
        return XK_Sinh_au2;
    }
    private static final int XK_Sinh_lu2 = (int)16780767L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_lu2 16780767
     * }
     */
    public static int XK_Sinh_lu2() {
        return XK_Sinh_lu2;
    }
    private static final int XK_Sinh_ruu2 = (int)16780786L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_ruu2 16780786
     * }
     */
    public static int XK_Sinh_ruu2() {
        return XK_Sinh_ruu2;
    }
    private static final int XK_Sinh_luu2 = (int)16780787L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_luu2 16780787
     * }
     */
    public static int XK_Sinh_luu2() {
        return XK_Sinh_luu2;
    }
    private static final int XK_Sinh_kunddaliya = (int)16780788L;
    /**
     * {@snippet lang=c :
     * #define XK_Sinh_kunddaliya 16780788
     * }
     */
    public static int XK_Sinh_kunddaliya() {
        return XK_Sinh_kunddaliya;
    }
    private static final int NoValue = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NoValue 0
     * }
     */
    public static int NoValue() {
        return NoValue;
    }
    private static final int XValue = (int)1L;
    /**
     * {@snippet lang=c :
     * #define XValue 1
     * }
     */
    public static int XValue() {
        return XValue;
    }
    private static final int YValue = (int)2L;
    /**
     * {@snippet lang=c :
     * #define YValue 2
     * }
     */
    public static int YValue() {
        return YValue;
    }
    private static final int WidthValue = (int)4L;
    /**
     * {@snippet lang=c :
     * #define WidthValue 4
     * }
     */
    public static int WidthValue() {
        return WidthValue;
    }
    private static final int HeightValue = (int)8L;
    /**
     * {@snippet lang=c :
     * #define HeightValue 8
     * }
     */
    public static int HeightValue() {
        return HeightValue;
    }
    private static final int AllValues = (int)15L;
    /**
     * {@snippet lang=c :
     * #define AllValues 15
     * }
     */
    public static int AllValues() {
        return AllValues;
    }
    private static final int XNegative = (int)16L;
    /**
     * {@snippet lang=c :
     * #define XNegative 16
     * }
     */
    public static int XNegative() {
        return XNegative;
    }
    private static final int YNegative = (int)32L;
    /**
     * {@snippet lang=c :
     * #define YNegative 32
     * }
     */
    public static int YNegative() {
        return YNegative;
    }
    private static final int WithdrawnState = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WithdrawnState 0
     * }
     */
    public static int WithdrawnState() {
        return WithdrawnState;
    }
    private static final int NormalState = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NormalState 1
     * }
     */
    public static int NormalState() {
        return NormalState;
    }
    private static final int IconicState = (int)3L;
    /**
     * {@snippet lang=c :
     * #define IconicState 3
     * }
     */
    public static int IconicState() {
        return IconicState;
    }
    private static final int DontCareState = (int)0L;
    /**
     * {@snippet lang=c :
     * #define DontCareState 0
     * }
     */
    public static int DontCareState() {
        return DontCareState;
    }
    private static final int ZoomState = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ZoomState 2
     * }
     */
    public static int ZoomState() {
        return ZoomState;
    }
    private static final int InactiveState = (int)4L;
    /**
     * {@snippet lang=c :
     * #define InactiveState 4
     * }
     */
    public static int InactiveState() {
        return InactiveState;
    }
    private static final int RectangleOut = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RectangleOut 0
     * }
     */
    public static int RectangleOut() {
        return RectangleOut;
    }
    private static final int RectangleIn = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RectangleIn 1
     * }
     */
    public static int RectangleIn() {
        return RectangleIn;
    }
    private static final int RectanglePart = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RectanglePart 2
     * }
     */
    public static int RectanglePart() {
        return RectanglePart;
    }
    private static final int VisualNoMask = (int)0L;
    /**
     * {@snippet lang=c :
     * #define VisualNoMask 0
     * }
     */
    public static int VisualNoMask() {
        return VisualNoMask;
    }
    private static final int VisualIDMask = (int)1L;
    /**
     * {@snippet lang=c :
     * #define VisualIDMask 1
     * }
     */
    public static int VisualIDMask() {
        return VisualIDMask;
    }
    private static final int VisualScreenMask = (int)2L;
    /**
     * {@snippet lang=c :
     * #define VisualScreenMask 2
     * }
     */
    public static int VisualScreenMask() {
        return VisualScreenMask;
    }
    private static final int VisualDepthMask = (int)4L;
    /**
     * {@snippet lang=c :
     * #define VisualDepthMask 4
     * }
     */
    public static int VisualDepthMask() {
        return VisualDepthMask;
    }
    private static final int VisualClassMask = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VisualClassMask 8
     * }
     */
    public static int VisualClassMask() {
        return VisualClassMask;
    }
    private static final int VisualRedMaskMask = (int)16L;
    /**
     * {@snippet lang=c :
     * #define VisualRedMaskMask 16
     * }
     */
    public static int VisualRedMaskMask() {
        return VisualRedMaskMask;
    }
    private static final int VisualGreenMaskMask = (int)32L;
    /**
     * {@snippet lang=c :
     * #define VisualGreenMaskMask 32
     * }
     */
    public static int VisualGreenMaskMask() {
        return VisualGreenMaskMask;
    }
    private static final int VisualBlueMaskMask = (int)64L;
    /**
     * {@snippet lang=c :
     * #define VisualBlueMaskMask 64
     * }
     */
    public static int VisualBlueMaskMask() {
        return VisualBlueMaskMask;
    }
    private static final int VisualColormapSizeMask = (int)128L;
    /**
     * {@snippet lang=c :
     * #define VisualColormapSizeMask 128
     * }
     */
    public static int VisualColormapSizeMask() {
        return VisualColormapSizeMask;
    }
    private static final int VisualBitsPerRGBMask = (int)256L;
    /**
     * {@snippet lang=c :
     * #define VisualBitsPerRGBMask 256
     * }
     */
    public static int VisualBitsPerRGBMask() {
        return VisualBitsPerRGBMask;
    }
    private static final int VisualAllMask = (int)511L;
    /**
     * {@snippet lang=c :
     * #define VisualAllMask 511
     * }
     */
    public static int VisualAllMask() {
        return VisualAllMask;
    }
    private static final int BitmapSuccess = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BitmapSuccess 0
     * }
     */
    public static int BitmapSuccess() {
        return BitmapSuccess;
    }
    private static final int BitmapOpenFailed = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BitmapOpenFailed 1
     * }
     */
    public static int BitmapOpenFailed() {
        return BitmapOpenFailed;
    }
    private static final int BitmapFileInvalid = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BitmapFileInvalid 2
     * }
     */
    public static int BitmapFileInvalid() {
        return BitmapFileInvalid;
    }
    private static final int BitmapNoMemory = (int)3L;
    /**
     * {@snippet lang=c :
     * #define BitmapNoMemory 3
     * }
     */
    public static int BitmapNoMemory() {
        return BitmapNoMemory;
    }
    private static final int XCSUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define XCSUCCESS 0
     * }
     */
    public static int XCSUCCESS() {
        return XCSUCCESS;
    }
    private static final int XCNOMEM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define XCNOMEM 1
     * }
     */
    public static int XCNOMEM() {
        return XCNOMEM;
    }
    private static final int XCNOENT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define XCNOENT 2
     * }
     */
    public static int XCNOENT() {
        return XCNOENT;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_char u_char
     * }
     */
    public static final OfByte u_char = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __u_short u_short
     * }
     */
    public static final OfShort u_short = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u_int u_int
     * }
     */
    public static final OfInt u_int = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_long u_long
     * }
     */
    public static final OfLong u_long = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __quad_t quad_t
     * }
     */
    public static final OfLong quad_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_quad_t u_quad_t
     * }
     */
    public static final OfLong u_quad_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __loff_t loff_t
     * }
     */
    public static final OfLong loff_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ino_t ino_t
     * }
     */
    public static final OfLong ino_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __dev_t dev_t
     * }
     */
    public static final OfLong dev_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __gid_t gid_t
     * }
     */
    public static final OfInt gid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __nlink_t nlink_t
     * }
     */
    public static final OfLong nlink_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uid_t uid_t
     * }
     */
    public static final OfInt uid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __pid_t pid_t
     * }
     */
    public static final OfInt pid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __id_t id_t
     * }
     */
    public static final OfInt id_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __daddr_t daddr_t
     * }
     */
    public static final OfInt daddr_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __caddr_t caddr_t
     * }
     */
    public static final AddressLayout caddr_t = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __key_t key_t
     * }
     */
    public static final OfInt key_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __clock_t clock_t
     * }
     */
    public static final OfLong clock_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __clockid_t clockid_t
     * }
     */
    public static final OfInt clockid_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __timer_t timer_t
     * }
     */
    public static final AddressLayout timer_t = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long ulong
     * }
     */
    public static final OfLong ulong = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short ushort
     * }
     */
    public static final OfShort ushort = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint
     * }
     */
    public static final OfInt uint = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t u_int8_t
     * }
     */
    public static final OfByte u_int8_t = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t u_int16_t
     * }
     */
    public static final OfShort u_int16_t = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t u_int32_t
     * }
     */
    public static final OfInt u_int32_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t u_int64_t
     * }
     */
    public static final OfLong u_int64_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int register_t
     * }
     */
    public static final OfLong register_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = Xlib_h.C_LONG;

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("select"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("pselect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static FunctionDescriptor pselect$descriptor() {
        return pselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$handle() {
        return pselect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __blksize_t blksize_t
     * }
     */
    public static final OfLong blksize_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __blkcnt_t blkcnt_t
     * }
     */
    public static final OfLong blkcnt_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsblkcnt_t fsblkcnt_t
     * }
     */
    public static final OfLong fsblkcnt_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsfilcnt_t fsfilcnt_t
     * }
     */
    public static final OfLong fsfilcnt_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __tss_t
     * }
     */
    public static final OfInt __tss_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __thrd_t
     * }
     */
    public static final OfLong __thrd_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long pthread_t
     * }
     */
    public static final OfLong pthread_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int pthread_key_t
     * }
     */
    public static final OfInt pthread_key_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int pthread_once_t
     * }
     */
    public static final OfInt pthread_once_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef volatile int pthread_spinlock_t
     * }
     */
    public static final OfInt pthread_spinlock_t = Xlib_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XID
     * }
     */
    public static final OfLong XID = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long Mask
     * }
     */
    public static final OfLong Mask = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long Atom
     * }
     */
    public static final OfLong Atom = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long VisualID
     * }
     */
    public static final OfLong VisualID = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long Time
     * }
     */
    public static final OfLong Time = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Window
     * }
     */
    public static final OfLong Window = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Drawable
     * }
     */
    public static final OfLong Drawable = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Font
     * }
     */
    public static final OfLong Font = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Pixmap
     * }
     */
    public static final OfLong Pixmap = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Cursor
     * }
     */
    public static final OfLong Cursor = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Colormap
     * }
     */
    public static final OfLong Colormap = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID GContext
     * }
     */
    public static final OfLong GContext = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID KeySym
     * }
     */
    public static final OfLong KeySym = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char KeyCode
     * }
     */
    public static final OfByte KeyCode = Xlib_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = Xlib_h.C_INT;

    private static class _Xmblen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("_Xmblen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _Xmblen(char *str, int len)
     * }
     */
    public static FunctionDescriptor _Xmblen$descriptor() {
        return _Xmblen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _Xmblen(char *str, int len)
     * }
     */
    public static MethodHandle _Xmblen$handle() {
        return _Xmblen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int _Xmblen(char *str, int len)
     * }
     */
    public static int _Xmblen(MemorySegment str, int len) {
        var mh$ = _Xmblen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Xmblen", str, len);
            }
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef char *XPointer
     * }
     */
    public static final AddressLayout XPointer = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XGC *GC
     * }
     */
    public static final AddressLayout GC = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     XExtData *ext_data;
     *     struct _XPrivate *private1;
     *     int fd;
     *     int private2;
     *     int proto_major_version;
     *     int proto_minor_version;
     *     char *vendor;
     *     XID private3;
     *     XID private4;
     *     XID private5;
     *     int private6;
     *     XID (*resource_alloc)(struct _XDisplay *);
     *     int byte_order;
     *     int bitmap_unit;
     *     int bitmap_pad;
     *     int bitmap_bit_order;
     *     int nformats;
     *     ScreenFormat *pixmap_format;
     *     int private8;
     *     int release;
     *     struct _XPrivate *private9;
     *     struct _XPrivate *private10;
     *     int qlen;
     *     unsigned long last_request_read;
     *     unsigned long request;
     *     XPointer private11;
     *     XPointer private12;
     *     XPointer private13;
     *     XPointer private14;
     *     unsigned int max_request_size;
     *     struct _XrmHashBucketRec *db;
     *     int (*private15)(struct _XDisplay *);
     *     char *display_name;
     *     int default_screen;
     *     int nscreens;
     *     Screen *screens;
     *     unsigned long motion_buffer;
     *     unsigned long private16;
     *     int min_keycode;
     *     int max_keycode;
     *     XPointer private17;
     *     XPointer private18;
     *     int private19;
     *     char *xdefaults;
     * } *_XPrivDisplay
     * }
     */
    public static final AddressLayout _XPrivDisplay = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XOM *XOM
     * }
     */
    public static final AddressLayout XOM = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XOC *XOC
     * }
     */
    public static final AddressLayout XOC = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XOC *XFontSet
     * }
     */
    public static final AddressLayout XFontSet = Xlib_h.C_POINTER;
    private static final int XOMOrientation_LTR_TTB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_LTR_TTB = 0
     * }
     */
    public static int XOMOrientation_LTR_TTB() {
        return XOMOrientation_LTR_TTB;
    }
    private static final int XOMOrientation_RTL_TTB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_RTL_TTB = 1
     * }
     */
    public static int XOMOrientation_RTL_TTB() {
        return XOMOrientation_RTL_TTB;
    }
    private static final int XOMOrientation_TTB_LTR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_TTB_LTR = 2
     * }
     */
    public static int XOMOrientation_TTB_LTR() {
        return XOMOrientation_TTB_LTR;
    }
    private static final int XOMOrientation_TTB_RTL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_TTB_RTL = 3
     * }
     */
    public static int XOMOrientation_TTB_RTL() {
        return XOMOrientation_TTB_RTL;
    }
    private static final int XOMOrientation_Context = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_Context = 4
     * }
     */
    public static int XOMOrientation_Context() {
        return XOMOrientation_Context;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _XIM *XIM
     * }
     */
    public static final AddressLayout XIM = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XIC *XIC
     * }
     */
    public static final AddressLayout XIC = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMStyle
     * }
     */
    public static final OfLong XIMStyle = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef void *XVaNestedList
     * }
     */
    public static final AddressLayout XVaNestedList = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMFeedback
     * }
     */
    public static final OfLong XIMFeedback = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMPreeditState
     * }
     */
    public static final OfLong XIMPreeditState = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMResetState
     * }
     */
    public static final OfLong XIMResetState = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMStringConversionFeedback
     * }
     */
    public static final OfLong XIMStringConversionFeedback = Xlib_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short XIMStringConversionPosition
     * }
     */
    public static final OfShort XIMStringConversionPosition = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short XIMStringConversionType
     * }
     */
    public static final OfShort XIMStringConversionType = Xlib_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short XIMStringConversionOperation
     * }
     */
    public static final OfShort XIMStringConversionOperation = Xlib_h.C_SHORT;
    private static final int XIMForwardChar = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMForwardChar = 0
     * }
     */
    public static int XIMForwardChar() {
        return XIMForwardChar;
    }
    private static final int XIMBackwardChar = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMBackwardChar = 1
     * }
     */
    public static int XIMBackwardChar() {
        return XIMBackwardChar;
    }
    private static final int XIMForwardWord = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMForwardWord = 2
     * }
     */
    public static int XIMForwardWord() {
        return XIMForwardWord;
    }
    private static final int XIMBackwardWord = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMBackwardWord = 3
     * }
     */
    public static int XIMBackwardWord() {
        return XIMBackwardWord;
    }
    private static final int XIMCaretUp = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMCaretUp = 4
     * }
     */
    public static int XIMCaretUp() {
        return XIMCaretUp;
    }
    private static final int XIMCaretDown = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMCaretDown = 5
     * }
     */
    public static int XIMCaretDown() {
        return XIMCaretDown;
    }
    private static final int XIMNextLine = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMNextLine = 6
     * }
     */
    public static int XIMNextLine() {
        return XIMNextLine;
    }
    private static final int XIMPreviousLine = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMPreviousLine = 7
     * }
     */
    public static int XIMPreviousLine() {
        return XIMPreviousLine;
    }
    private static final int XIMLineStart = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMLineStart = 8
     * }
     */
    public static int XIMLineStart() {
        return XIMLineStart;
    }
    private static final int XIMLineEnd = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMLineEnd = 9
     * }
     */
    public static int XIMLineEnd() {
        return XIMLineEnd;
    }
    private static final int XIMAbsolutePosition = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMAbsolutePosition = 10
     * }
     */
    public static int XIMAbsolutePosition() {
        return XIMAbsolutePosition;
    }
    private static final int XIMDontChange = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMDontChange = 11
     * }
     */
    public static int XIMDontChange() {
        return XIMDontChange;
    }
    private static final int XIMIsInvisible = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMIsInvisible = 0
     * }
     */
    public static int XIMIsInvisible() {
        return XIMIsInvisible;
    }
    private static final int XIMIsPrimary = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMIsPrimary = 1
     * }
     */
    public static int XIMIsPrimary() {
        return XIMIsPrimary;
    }
    private static final int XIMIsSecondary = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMIsSecondary = 2
     * }
     */
    public static int XIMIsSecondary() {
        return XIMIsSecondary;
    }
    private static final int XIMTextType = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMTextType = 0
     * }
     */
    public static int XIMTextType() {
        return XIMTextType;
    }
    private static final int XIMBitmapType = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMBitmapType = 1
     * }
     */
    public static int XIMBitmapType() {
        return XIMBitmapType;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMHotKeyState
     * }
     */
    public static final OfLong XIMHotKeyState = Xlib_h.C_LONG;

    private static class _Xdebug$constants {
        public static final OfInt LAYOUT = Xlib_h.C_INT;
        public static final MemorySegment SEGMENT = Xlib_h.findOrThrow("_Xdebug").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static OfInt _Xdebug$layout() {
        return _Xdebug$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static MemorySegment _Xdebug$segment() {
        return _Xdebug$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static int _Xdebug() {
        return _Xdebug$constants.SEGMENT.get(_Xdebug$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static void _Xdebug(int varValue) {
        _Xdebug$constants.SEGMENT.set(_Xdebug$constants.LAYOUT, 0L, varValue);
    }

    private static class XLoadQueryFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLoadQueryFont"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontStruct *XLoadQueryFont(Display *, const char *)
     * }
     */
    public static FunctionDescriptor XLoadQueryFont$descriptor() {
        return XLoadQueryFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontStruct *XLoadQueryFont(Display *, const char *)
     * }
     */
    public static MethodHandle XLoadQueryFont$handle() {
        return XLoadQueryFont.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XFontStruct *XLoadQueryFont(Display *, const char *)
     * }
     */
    public static MemorySegment XLoadQueryFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XLoadQueryFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLoadQueryFont", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryFont"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontStruct *XQueryFont(Display *, XID)
     * }
     */
    public static FunctionDescriptor XQueryFont$descriptor() {
        return XQueryFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontStruct *XQueryFont(Display *, XID)
     * }
     */
    public static MethodHandle XQueryFont$handle() {
        return XQueryFont.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XFontStruct *XQueryFont(Display *, XID)
     * }
     */
    public static MemorySegment XQueryFont(MemorySegment x0, long x1) {
        var mh$ = XQueryFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryFont", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetMotionEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetMotionEvents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *)
     * }
     */
    public static FunctionDescriptor XGetMotionEvents$descriptor() {
        return XGetMotionEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *)
     * }
     */
    public static MethodHandle XGetMotionEvents$handle() {
        return XGetMotionEvents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *)
     * }
     */
    public static MemorySegment XGetMotionEvents(MemorySegment x0, long x1, long x2, long x3, MemorySegment x4) {
        var mh$ = XGetMotionEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetMotionEvents", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDeleteModifiermapEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_CHAR,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDeleteModifiermapEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static FunctionDescriptor XDeleteModifiermapEntry$descriptor() {
        return XDeleteModifiermapEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MethodHandle XDeleteModifiermapEntry$handle() {
        return XDeleteModifiermapEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MemorySegment XDeleteModifiermapEntry(MemorySegment x0, byte x1, int x2) {
        var mh$ = XDeleteModifiermapEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDeleteModifiermapEntry", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetModifierMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetModifierMapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XGetModifierMapping(Display *)
     * }
     */
    public static FunctionDescriptor XGetModifierMapping$descriptor() {
        return XGetModifierMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XGetModifierMapping(Display *)
     * }
     */
    public static MethodHandle XGetModifierMapping$handle() {
        return XGetModifierMapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XGetModifierMapping(Display *)
     * }
     */
    public static MemorySegment XGetModifierMapping(MemorySegment x0) {
        var mh$ = XGetModifierMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetModifierMapping", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInsertModifiermapEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_CHAR,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInsertModifiermapEntry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static FunctionDescriptor XInsertModifiermapEntry$descriptor() {
        return XInsertModifiermapEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MethodHandle XInsertModifiermapEntry$handle() {
        return XInsertModifiermapEntry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MemorySegment XInsertModifiermapEntry(MemorySegment x0, byte x1, int x2) {
        var mh$ = XInsertModifiermapEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInsertModifiermapEntry", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNewModifiermap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XNewModifiermap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XNewModifiermap(int)
     * }
     */
    public static FunctionDescriptor XNewModifiermap$descriptor() {
        return XNewModifiermap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XNewModifiermap(int)
     * }
     */
    public static MethodHandle XNewModifiermap$handle() {
        return XNewModifiermap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XNewModifiermap(int)
     * }
     */
    public static MemorySegment XNewModifiermap(int x0) {
        var mh$ = XNewModifiermap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNewModifiermap", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XCreateImage$descriptor() {
        return XCreateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XCreateImage$handle() {
        return XCreateImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XCreateImage(MemorySegment x0, MemorySegment x1, int x2, int x3, int x4, MemorySegment x5, int x6, int x7, int x8, int x9) {
        var mh$ = XCreateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateImage", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInitImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInitImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInitImage(XImage *)
     * }
     */
    public static FunctionDescriptor XInitImage$descriptor() {
        return XInitImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInitImage(XImage *)
     * }
     */
    public static MethodHandle XInitImage$handle() {
        return XInitImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XInitImage(XImage *)
     * }
     */
    public static int XInitImage(MemorySegment x0) {
        var mh$ = XInitImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInitImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int)
     * }
     */
    public static FunctionDescriptor XGetImage$descriptor() {
        return XGetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int)
     * }
     */
    public static MethodHandle XGetImage$handle() {
        return XGetImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int)
     * }
     */
    public static MemorySegment XGetImage(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, int x7) {
        var mh$ = XGetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetImage", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetSubImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetSubImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage *, int, int)
     * }
     */
    public static FunctionDescriptor XGetSubImage$descriptor() {
        return XGetSubImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage *, int, int)
     * }
     */
    public static MethodHandle XGetSubImage$handle() {
        return XGetSubImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage *, int, int)
     * }
     */
    public static MemorySegment XGetSubImage(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, int x7, MemorySegment x8, int x9, int x10) {
        var mh$ = XGetSubImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetSubImage", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOpenDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XOpenDisplay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XOpenDisplay(const char *)
     * }
     */
    public static FunctionDescriptor XOpenDisplay$descriptor() {
        return XOpenDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XOpenDisplay(const char *)
     * }
     */
    public static MethodHandle XOpenDisplay$handle() {
        return XOpenDisplay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Display *XOpenDisplay(const char *)
     * }
     */
    public static MemorySegment XOpenDisplay(MemorySegment x0) {
        var mh$ = XOpenDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOpenDisplay", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XrmInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XrmInitialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XrmInitialize()
     * }
     */
    public static FunctionDescriptor XrmInitialize$descriptor() {
        return XrmInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XrmInitialize()
     * }
     */
    public static MethodHandle XrmInitialize$handle() {
        return XrmInitialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XrmInitialize()
     * }
     */
    public static void XrmInitialize() {
        var mh$ = XrmInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XrmInitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFetchBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFetchBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XFetchBytes(Display *, int *)
     * }
     */
    public static FunctionDescriptor XFetchBytes$descriptor() {
        return XFetchBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XFetchBytes(Display *, int *)
     * }
     */
    public static MethodHandle XFetchBytes$handle() {
        return XFetchBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XFetchBytes(Display *, int *)
     * }
     */
    public static MemorySegment XFetchBytes(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFetchBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFetchBytes", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFetchBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFetchBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XFetchBuffer(Display *, int *, int)
     * }
     */
    public static FunctionDescriptor XFetchBuffer$descriptor() {
        return XFetchBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XFetchBuffer(Display *, int *, int)
     * }
     */
    public static MethodHandle XFetchBuffer$handle() {
        return XFetchBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XFetchBuffer(Display *, int *, int)
     * }
     */
    public static MemorySegment XFetchBuffer(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XFetchBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFetchBuffer", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetAtomName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetAtomName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XGetAtomName(Display *, Atom)
     * }
     */
    public static FunctionDescriptor XGetAtomName$descriptor() {
        return XGetAtomName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XGetAtomName(Display *, Atom)
     * }
     */
    public static MethodHandle XGetAtomName$handle() {
        return XGetAtomName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XGetAtomName(Display *, Atom)
     * }
     */
    public static MemorySegment XGetAtomName(MemorySegment x0, long x1) {
        var mh$ = XGetAtomName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetAtomName", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetAtomNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetAtomNames"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetAtomNames(Display *, Atom *, int, char **)
     * }
     */
    public static FunctionDescriptor XGetAtomNames$descriptor() {
        return XGetAtomNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetAtomNames(Display *, Atom *, int, char **)
     * }
     */
    public static MethodHandle XGetAtomNames$handle() {
        return XGetAtomNames.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetAtomNames(Display *, Atom *, int, char **)
     * }
     */
    public static int XGetAtomNames(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = XGetAtomNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetAtomNames", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetDefault {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetDefault"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XGetDefault(Display *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor XGetDefault$descriptor() {
        return XGetDefault.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XGetDefault(Display *, const char *, const char *)
     * }
     */
    public static MethodHandle XGetDefault$handle() {
        return XGetDefault.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XGetDefault(Display *, const char *, const char *)
     * }
     */
    public static MemorySegment XGetDefault(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XGetDefault.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetDefault", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XDisplayName(const char *)
     * }
     */
    public static FunctionDescriptor XDisplayName$descriptor() {
        return XDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XDisplayName(const char *)
     * }
     */
    public static MethodHandle XDisplayName$handle() {
        return XDisplayName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XDisplayName(const char *)
     * }
     */
    public static MemorySegment XDisplayName(MemorySegment x0) {
        var mh$ = XDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayName", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKeysymToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XKeysymToString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XKeysymToString(KeySym)
     * }
     */
    public static FunctionDescriptor XKeysymToString$descriptor() {
        return XKeysymToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XKeysymToString(KeySym)
     * }
     */
    public static MethodHandle XKeysymToString$handle() {
        return XKeysymToString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XKeysymToString(KeySym)
     * }
     */
    public static MemorySegment XKeysymToString(long x0) {
        var mh$ = XKeysymToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKeysymToString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSynchronize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSynchronize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int (*XSynchronize(Display *, int))(Display *)
     * }
     */
    public static FunctionDescriptor XSynchronize$descriptor() {
        return XSynchronize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int (*XSynchronize(Display *, int))(Display *)
     * }
     */
    public static MethodHandle XSynchronize$handle() {
        return XSynchronize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int (*XSynchronize(Display *, int))(Display *)
     * }
     */
    public static MemorySegment XSynchronize(MemorySegment x0, int x1) {
        var mh$ = XSynchronize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSynchronize", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetAfterFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetAfterFunction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int (*XSetAfterFunction(Display *, int (*)(Display *)))(Display *)
     * }
     */
    public static FunctionDescriptor XSetAfterFunction$descriptor() {
        return XSetAfterFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int (*XSetAfterFunction(Display *, int (*)(Display *)))(Display *)
     * }
     */
    public static MethodHandle XSetAfterFunction$handle() {
        return XSetAfterFunction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int (*XSetAfterFunction(Display *, int (*)(Display *)))(Display *)
     * }
     */
    public static MemorySegment XSetAfterFunction(MemorySegment x0, MemorySegment x1) {
        var mh$ = XSetAfterFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetAfterFunction", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInternAtom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInternAtom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Atom XInternAtom(Display *, const char *, int)
     * }
     */
    public static FunctionDescriptor XInternAtom$descriptor() {
        return XInternAtom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Atom XInternAtom(Display *, const char *, int)
     * }
     */
    public static MethodHandle XInternAtom$handle() {
        return XInternAtom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Atom XInternAtom(Display *, const char *, int)
     * }
     */
    public static long XInternAtom(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XInternAtom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInternAtom", x0, x1, x2);
            }
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInternAtoms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInternAtoms"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInternAtoms(Display *, char **, int, int, Atom *)
     * }
     */
    public static FunctionDescriptor XInternAtoms$descriptor() {
        return XInternAtoms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInternAtoms(Display *, char **, int, int, Atom *)
     * }
     */
    public static MethodHandle XInternAtoms$handle() {
        return XInternAtoms.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XInternAtoms(Display *, char **, int, int, Atom *)
     * }
     */
    public static int XInternAtoms(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XInternAtoms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInternAtoms", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyColormapAndFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCopyColormapAndFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XCopyColormapAndFree(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XCopyColormapAndFree$descriptor() {
        return XCopyColormapAndFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XCopyColormapAndFree(Display *, Colormap)
     * }
     */
    public static MethodHandle XCopyColormapAndFree$handle() {
        return XCopyColormapAndFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Colormap XCopyColormapAndFree(Display *, Colormap)
     * }
     */
    public static long XCopyColormapAndFree(MemorySegment x0, long x1) {
        var mh$ = XCopyColormapAndFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyColormapAndFree", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XCreateColormap(Display *, Window, Visual *, int)
     * }
     */
    public static FunctionDescriptor XCreateColormap$descriptor() {
        return XCreateColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XCreateColormap(Display *, Window, Visual *, int)
     * }
     */
    public static MethodHandle XCreateColormap$handle() {
        return XCreateColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Colormap XCreateColormap(Display *, Window, Visual *, int)
     * }
     */
    public static long XCreateColormap(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XCreateColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateColormap", x0, x1, x2, x3);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreatePixmapCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreatePixmapCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreatePixmapCursor$descriptor() {
        return XCreatePixmapCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XCreatePixmapCursor$handle() {
        return XCreatePixmapCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int)
     * }
     */
    public static long XCreatePixmapCursor(MemorySegment x0, long x1, long x2, MemorySegment x3, MemorySegment x4, int x5, int x6) {
        var mh$ = XCreatePixmapCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreatePixmapCursor", x0, x1, x2, x3, x4, x5, x6);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateGlyphCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateGlyphCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, const XColor *, const XColor *)
     * }
     */
    public static FunctionDescriptor XCreateGlyphCursor$descriptor() {
        return XCreateGlyphCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, const XColor *, const XColor *)
     * }
     */
    public static MethodHandle XCreateGlyphCursor$handle() {
        return XCreateGlyphCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, const XColor *, const XColor *)
     * }
     */
    public static long XCreateGlyphCursor(MemorySegment x0, long x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XCreateGlyphCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateGlyphCursor", x0, x1, x2, x3, x4, x5, x6);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateFontCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateFontCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Cursor XCreateFontCursor(Display *, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreateFontCursor$descriptor() {
        return XCreateFontCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Cursor XCreateFontCursor(Display *, unsigned int)
     * }
     */
    public static MethodHandle XCreateFontCursor$handle() {
        return XCreateFontCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Cursor XCreateFontCursor(Display *, unsigned int)
     * }
     */
    public static long XCreateFontCursor(MemorySegment x0, int x1) {
        var mh$ = XCreateFontCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateFontCursor", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLoadFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLoadFont"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Font XLoadFont(Display *, const char *)
     * }
     */
    public static FunctionDescriptor XLoadFont$descriptor() {
        return XLoadFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Font XLoadFont(Display *, const char *)
     * }
     */
    public static MethodHandle XLoadFont$handle() {
        return XLoadFont.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Font XLoadFont(Display *, const char *)
     * }
     */
    public static long XLoadFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XLoadFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLoadFont", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GC XCreateGC(Display *, Drawable, unsigned long, XGCValues *)
     * }
     */
    public static FunctionDescriptor XCreateGC$descriptor() {
        return XCreateGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GC XCreateGC(Display *, Drawable, unsigned long, XGCValues *)
     * }
     */
    public static MethodHandle XCreateGC$handle() {
        return XCreateGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GC XCreateGC(Display *, Drawable, unsigned long, XGCValues *)
     * }
     */
    public static MemorySegment XCreateGC(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XCreateGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateGC", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGContextFromGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGContextFromGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GContext XGContextFromGC(GC)
     * }
     */
    public static FunctionDescriptor XGContextFromGC$descriptor() {
        return XGContextFromGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GContext XGContextFromGC(GC)
     * }
     */
    public static MethodHandle XGContextFromGC$handle() {
        return XGContextFromGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GContext XGContextFromGC(GC)
     * }
     */
    public static long XGContextFromGC(MemorySegment x0) {
        var mh$ = XGContextFromGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGContextFromGC", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFlushGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFlushGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFlushGC(Display *, GC)
     * }
     */
    public static FunctionDescriptor XFlushGC$descriptor() {
        return XFlushGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFlushGC(Display *, GC)
     * }
     */
    public static MethodHandle XFlushGC$handle() {
        return XFlushGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XFlushGC(Display *, GC)
     * }
     */
    public static void XFlushGC(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFlushGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFlushGC", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreatePixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreatePixmap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreatePixmap$descriptor() {
        return XCreatePixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XCreatePixmap$handle() {
        return XCreatePixmap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int)
     * }
     */
    public static long XCreatePixmap(MemorySegment x0, long x1, int x2, int x3, int x4) {
        var mh$ = XCreatePixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreatePixmap", x0, x1, x2, x3, x4);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateBitmapFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateBitmapFromData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreateBitmapFromData$descriptor() {
        return XCreateBitmapFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XCreateBitmapFromData$handle() {
        return XCreateBitmapFromData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int)
     * }
     */
    public static long XCreateBitmapFromData(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XCreateBitmapFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateBitmapFromData", x0, x1, x2, x3, x4);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreatePixmapFromBitmapData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreatePixmapFromBitmapData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreatePixmapFromBitmapData$descriptor() {
        return XCreatePixmapFromBitmapData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int)
     * }
     */
    public static MethodHandle XCreatePixmapFromBitmapData$handle() {
        return XCreatePixmapFromBitmapData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int)
     * }
     */
    public static long XCreatePixmapFromBitmapData(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, long x5, long x6, int x7) {
        var mh$ = XCreatePixmapFromBitmapData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreatePixmapFromBitmapData", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateSimpleWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateSimpleWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
     * }
     */
    public static FunctionDescriptor XCreateSimpleWindow$descriptor() {
        return XCreateSimpleWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
     * }
     */
    public static MethodHandle XCreateSimpleWindow$handle() {
        return XCreateSimpleWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
     * }
     */
    public static long XCreateSimpleWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6, long x7, long x8) {
        var mh$ = XCreateSimpleWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateSimpleWindow", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetSelectionOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetSelectionOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XGetSelectionOwner(Display *, Atom)
     * }
     */
    public static FunctionDescriptor XGetSelectionOwner$descriptor() {
        return XGetSelectionOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XGetSelectionOwner(Display *, Atom)
     * }
     */
    public static MethodHandle XGetSelectionOwner$handle() {
        return XGetSelectionOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Window XGetSelectionOwner(Display *, Atom)
     * }
     */
    public static long XGetSelectionOwner(MemorySegment x0, long x1) {
        var mh$ = XGetSelectionOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetSelectionOwner", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static FunctionDescriptor XCreateWindow$descriptor() {
        return XCreateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static MethodHandle XCreateWindow$handle() {
        return XCreateWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static long XCreateWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, MemorySegment x9, long x10, MemorySegment x11) {
        var mh$ = XCreateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateWindow", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListInstalledColormaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListInstalledColormaps"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap *XListInstalledColormaps(Display *, Window, int *)
     * }
     */
    public static FunctionDescriptor XListInstalledColormaps$descriptor() {
        return XListInstalledColormaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap *XListInstalledColormaps(Display *, Window, int *)
     * }
     */
    public static MethodHandle XListInstalledColormaps$handle() {
        return XListInstalledColormaps.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Colormap *XListInstalledColormaps(Display *, Window, int *)
     * }
     */
    public static MemorySegment XListInstalledColormaps(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XListInstalledColormaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListInstalledColormaps", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListFonts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListFonts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XListFonts(Display *, const char *, int, int *)
     * }
     */
    public static FunctionDescriptor XListFonts$descriptor() {
        return XListFonts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XListFonts(Display *, const char *, int, int *)
     * }
     */
    public static MethodHandle XListFonts$handle() {
        return XListFonts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **XListFonts(Display *, const char *, int, int *)
     * }
     */
    public static MemorySegment XListFonts(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = XListFonts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListFonts", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListFontsWithInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListFontsWithInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **)
     * }
     */
    public static FunctionDescriptor XListFontsWithInfo$descriptor() {
        return XListFontsWithInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **)
     * }
     */
    public static MethodHandle XListFontsWithInfo$handle() {
        return XListFontsWithInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **)
     * }
     */
    public static MemorySegment XListFontsWithInfo(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XListFontsWithInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListFontsWithInfo", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetFontPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetFontPath"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XGetFontPath(Display *, int *)
     * }
     */
    public static FunctionDescriptor XGetFontPath$descriptor() {
        return XGetFontPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XGetFontPath(Display *, int *)
     * }
     */
    public static MethodHandle XGetFontPath$handle() {
        return XGetFontPath.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **XGetFontPath(Display *, int *)
     * }
     */
    public static MemorySegment XGetFontPath(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetFontPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetFontPath", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListExtensions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListExtensions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XListExtensions(Display *, int *)
     * }
     */
    public static FunctionDescriptor XListExtensions$descriptor() {
        return XListExtensions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XListExtensions(Display *, int *)
     * }
     */
    public static MethodHandle XListExtensions$handle() {
        return XListExtensions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **XListExtensions(Display *, int *)
     * }
     */
    public static MemorySegment XListExtensions(MemorySegment x0, MemorySegment x1) {
        var mh$ = XListExtensions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListExtensions", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Atom *XListProperties(Display *, Window, int *)
     * }
     */
    public static FunctionDescriptor XListProperties$descriptor() {
        return XListProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Atom *XListProperties(Display *, Window, int *)
     * }
     */
    public static MethodHandle XListProperties$handle() {
        return XListProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Atom *XListProperties(Display *, Window, int *)
     * }
     */
    public static MemorySegment XListProperties(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XListProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListProperties", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListHosts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListHosts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XHostAddress *XListHosts(Display *, int *, int *)
     * }
     */
    public static FunctionDescriptor XListHosts$descriptor() {
        return XListHosts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XHostAddress *XListHosts(Display *, int *, int *)
     * }
     */
    public static MethodHandle XListHosts$handle() {
        return XListHosts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XHostAddress *XListHosts(Display *, int *, int *)
     * }
     */
    public static MemorySegment XListHosts(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XListHosts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListHosts", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKeycodeToKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_CHAR,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XKeycodeToKeysym"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym XKeycodeToKeysym(Display *, KeyCode, int)
     * }
     */
    public static FunctionDescriptor XKeycodeToKeysym$descriptor() {
        return XKeycodeToKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym XKeycodeToKeysym(Display *, KeyCode, int)
     * }
     */
    public static MethodHandle XKeycodeToKeysym$handle() {
        return XKeycodeToKeysym.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern KeySym XKeycodeToKeysym(Display *, KeyCode, int)
     * }
     */
    public static long XKeycodeToKeysym(MemorySegment x0, byte x1, int x2) {
        var mh$ = XKeycodeToKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKeycodeToKeysym", x0, x1, x2);
            }
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLookupKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLookupKeysym"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym XLookupKeysym(XKeyEvent *, int)
     * }
     */
    public static FunctionDescriptor XLookupKeysym$descriptor() {
        return XLookupKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym XLookupKeysym(XKeyEvent *, int)
     * }
     */
    public static MethodHandle XLookupKeysym$handle() {
        return XLookupKeysym.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern KeySym XLookupKeysym(XKeyEvent *, int)
     * }
     */
    public static long XLookupKeysym(MemorySegment x0, int x1) {
        var mh$ = XLookupKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLookupKeysym", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetKeyboardMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_CHAR,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetKeyboardMapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym *XGetKeyboardMapping(Display *, KeyCode, int, int *)
     * }
     */
    public static FunctionDescriptor XGetKeyboardMapping$descriptor() {
        return XGetKeyboardMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym *XGetKeyboardMapping(Display *, KeyCode, int, int *)
     * }
     */
    public static MethodHandle XGetKeyboardMapping$handle() {
        return XGetKeyboardMapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern KeySym *XGetKeyboardMapping(Display *, KeyCode, int, int *)
     * }
     */
    public static MemorySegment XGetKeyboardMapping(MemorySegment x0, byte x1, int x2, MemorySegment x3) {
        var mh$ = XGetKeyboardMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetKeyboardMapping", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStringToKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStringToKeysym"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym XStringToKeysym(const char *)
     * }
     */
    public static FunctionDescriptor XStringToKeysym$descriptor() {
        return XStringToKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym XStringToKeysym(const char *)
     * }
     */
    public static MethodHandle XStringToKeysym$handle() {
        return XStringToKeysym.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern KeySym XStringToKeysym(const char *)
     * }
     */
    public static long XStringToKeysym(MemorySegment x0) {
        var mh$ = XStringToKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStringToKeysym", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMaxRequestSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMaxRequestSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long XMaxRequestSize(Display *)
     * }
     */
    public static FunctionDescriptor XMaxRequestSize$descriptor() {
        return XMaxRequestSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long XMaxRequestSize(Display *)
     * }
     */
    public static MethodHandle XMaxRequestSize$handle() {
        return XMaxRequestSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long XMaxRequestSize(Display *)
     * }
     */
    public static long XMaxRequestSize(MemorySegment x0) {
        var mh$ = XMaxRequestSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMaxRequestSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XExtendedMaxRequestSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XExtendedMaxRequestSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long XExtendedMaxRequestSize(Display *)
     * }
     */
    public static FunctionDescriptor XExtendedMaxRequestSize$descriptor() {
        return XExtendedMaxRequestSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long XExtendedMaxRequestSize(Display *)
     * }
     */
    public static MethodHandle XExtendedMaxRequestSize$handle() {
        return XExtendedMaxRequestSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long XExtendedMaxRequestSize(Display *)
     * }
     */
    public static long XExtendedMaxRequestSize(MemorySegment x0) {
        var mh$ = XExtendedMaxRequestSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XExtendedMaxRequestSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XResourceManagerString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XResourceManagerString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XResourceManagerString(Display *)
     * }
     */
    public static FunctionDescriptor XResourceManagerString$descriptor() {
        return XResourceManagerString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XResourceManagerString(Display *)
     * }
     */
    public static MethodHandle XResourceManagerString$handle() {
        return XResourceManagerString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XResourceManagerString(Display *)
     * }
     */
    public static MemorySegment XResourceManagerString(MemorySegment x0) {
        var mh$ = XResourceManagerString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XResourceManagerString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenResourceString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XScreenResourceString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XScreenResourceString(Screen *)
     * }
     */
    public static FunctionDescriptor XScreenResourceString$descriptor() {
        return XScreenResourceString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XScreenResourceString(Screen *)
     * }
     */
    public static MethodHandle XScreenResourceString$handle() {
        return XScreenResourceString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XScreenResourceString(Screen *)
     * }
     */
    public static MemorySegment XScreenResourceString(MemorySegment x0) {
        var mh$ = XScreenResourceString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenResourceString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayMotionBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayMotionBufferSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XDisplayMotionBufferSize(Display *)
     * }
     */
    public static FunctionDescriptor XDisplayMotionBufferSize$descriptor() {
        return XDisplayMotionBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XDisplayMotionBufferSize(Display *)
     * }
     */
    public static MethodHandle XDisplayMotionBufferSize$handle() {
        return XDisplayMotionBufferSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XDisplayMotionBufferSize(Display *)
     * }
     */
    public static long XDisplayMotionBufferSize(MemorySegment x0) {
        var mh$ = XDisplayMotionBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayMotionBufferSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XVisualIDFromVisual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XVisualIDFromVisual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VisualID XVisualIDFromVisual(Visual *)
     * }
     */
    public static FunctionDescriptor XVisualIDFromVisual$descriptor() {
        return XVisualIDFromVisual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VisualID XVisualIDFromVisual(Visual *)
     * }
     */
    public static MethodHandle XVisualIDFromVisual$handle() {
        return XVisualIDFromVisual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern VisualID XVisualIDFromVisual(Visual *)
     * }
     */
    public static long XVisualIDFromVisual(MemorySegment x0) {
        var mh$ = XVisualIDFromVisual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XVisualIDFromVisual", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInitThreads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInitThreads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInitThreads()
     * }
     */
    public static FunctionDescriptor XInitThreads$descriptor() {
        return XInitThreads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInitThreads()
     * }
     */
    public static MethodHandle XInitThreads$handle() {
        return XInitThreads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XInitThreads()
     * }
     */
    public static int XInitThreads() {
        var mh$ = XInitThreads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInitThreads");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLockDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLockDisplay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XLockDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XLockDisplay$descriptor() {
        return XLockDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XLockDisplay(Display *)
     * }
     */
    public static MethodHandle XLockDisplay$handle() {
        return XLockDisplay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XLockDisplay(Display *)
     * }
     */
    public static void XLockDisplay(MemorySegment x0) {
        var mh$ = XLockDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLockDisplay", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnlockDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnlockDisplay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XUnlockDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XUnlockDisplay$descriptor() {
        return XUnlockDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XUnlockDisplay(Display *)
     * }
     */
    public static MethodHandle XUnlockDisplay$handle() {
        return XUnlockDisplay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XUnlockDisplay(Display *)
     * }
     */
    public static void XUnlockDisplay(MemorySegment x0) {
        var mh$ = XUnlockDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnlockDisplay", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInitExtension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInitExtension"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtCodes *XInitExtension(Display *, const char *)
     * }
     */
    public static FunctionDescriptor XInitExtension$descriptor() {
        return XInitExtension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtCodes *XInitExtension(Display *, const char *)
     * }
     */
    public static MethodHandle XInitExtension$handle() {
        return XInitExtension.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XExtCodes *XInitExtension(Display *, const char *)
     * }
     */
    public static MemorySegment XInitExtension(MemorySegment x0, MemorySegment x1) {
        var mh$ = XInitExtension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInitExtension", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddExtension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAddExtension"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtCodes *XAddExtension(Display *)
     * }
     */
    public static FunctionDescriptor XAddExtension$descriptor() {
        return XAddExtension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtCodes *XAddExtension(Display *)
     * }
     */
    public static MethodHandle XAddExtension$handle() {
        return XAddExtension.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XExtCodes *XAddExtension(Display *)
     * }
     */
    public static MemorySegment XAddExtension(MemorySegment x0) {
        var mh$ = XAddExtension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddExtension", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFindOnExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFindOnExtensionList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtData *XFindOnExtensionList(XExtData **, int)
     * }
     */
    public static FunctionDescriptor XFindOnExtensionList$descriptor() {
        return XFindOnExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtData *XFindOnExtensionList(XExtData **, int)
     * }
     */
    public static MethodHandle XFindOnExtensionList$handle() {
        return XFindOnExtensionList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XExtData *XFindOnExtensionList(XExtData **, int)
     * }
     */
    public static MemorySegment XFindOnExtensionList(MemorySegment x0, int x1) {
        var mh$ = XFindOnExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFindOnExtensionList", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEHeadOfExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            XEDataObject.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XEHeadOfExtensionList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtData **XEHeadOfExtensionList(XEDataObject)
     * }
     */
    public static FunctionDescriptor XEHeadOfExtensionList$descriptor() {
        return XEHeadOfExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtData **XEHeadOfExtensionList(XEDataObject)
     * }
     */
    public static MethodHandle XEHeadOfExtensionList$handle() {
        return XEHeadOfExtensionList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XExtData **XEHeadOfExtensionList(XEDataObject)
     * }
     */
    public static MemorySegment XEHeadOfExtensionList(MemorySegment x0) {
        var mh$ = XEHeadOfExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEHeadOfExtensionList", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRootWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRootWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XRootWindow(Display *, int)
     * }
     */
    public static FunctionDescriptor XRootWindow$descriptor() {
        return XRootWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XRootWindow(Display *, int)
     * }
     */
    public static MethodHandle XRootWindow$handle() {
        return XRootWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Window XRootWindow(Display *, int)
     * }
     */
    public static long XRootWindow(MemorySegment x0, int x1) {
        var mh$ = XRootWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRootWindow", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultRootWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultRootWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XDefaultRootWindow(Display *)
     * }
     */
    public static FunctionDescriptor XDefaultRootWindow$descriptor() {
        return XDefaultRootWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XDefaultRootWindow(Display *)
     * }
     */
    public static MethodHandle XDefaultRootWindow$handle() {
        return XDefaultRootWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Window XDefaultRootWindow(Display *)
     * }
     */
    public static long XDefaultRootWindow(MemorySegment x0) {
        var mh$ = XDefaultRootWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultRootWindow", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRootWindowOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRootWindowOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XRootWindowOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XRootWindowOfScreen$descriptor() {
        return XRootWindowOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XRootWindowOfScreen(Screen *)
     * }
     */
    public static MethodHandle XRootWindowOfScreen$handle() {
        return XRootWindowOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Window XRootWindowOfScreen(Screen *)
     * }
     */
    public static long XRootWindowOfScreen(MemorySegment x0) {
        var mh$ = XRootWindowOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRootWindowOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultVisual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultVisual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisual(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultVisual$descriptor() {
        return XDefaultVisual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisual(Display *, int)
     * }
     */
    public static MethodHandle XDefaultVisual$handle() {
        return XDefaultVisual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Visual *XDefaultVisual(Display *, int)
     * }
     */
    public static MemorySegment XDefaultVisual(MemorySegment x0, int x1) {
        var mh$ = XDefaultVisual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultVisual", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultVisualOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultVisualOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisualOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultVisualOfScreen$descriptor() {
        return XDefaultVisualOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisualOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultVisualOfScreen$handle() {
        return XDefaultVisualOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Visual *XDefaultVisualOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultVisualOfScreen(MemorySegment x0) {
        var mh$ = XDefaultVisualOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultVisualOfScreen", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GC XDefaultGC(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultGC$descriptor() {
        return XDefaultGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GC XDefaultGC(Display *, int)
     * }
     */
    public static MethodHandle XDefaultGC$handle() {
        return XDefaultGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GC XDefaultGC(Display *, int)
     * }
     */
    public static MemorySegment XDefaultGC(MemorySegment x0, int x1) {
        var mh$ = XDefaultGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultGC", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultGCOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultGCOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GC XDefaultGCOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultGCOfScreen$descriptor() {
        return XDefaultGCOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GC XDefaultGCOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultGCOfScreen$handle() {
        return XDefaultGCOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GC XDefaultGCOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultGCOfScreen(MemorySegment x0) {
        var mh$ = XDefaultGCOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultGCOfScreen", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBlackPixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XBlackPixel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixel(Display *, int)
     * }
     */
    public static FunctionDescriptor XBlackPixel$descriptor() {
        return XBlackPixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixel(Display *, int)
     * }
     */
    public static MethodHandle XBlackPixel$handle() {
        return XBlackPixel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XBlackPixel(Display *, int)
     * }
     */
    public static long XBlackPixel(MemorySegment x0, int x1) {
        var mh$ = XBlackPixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBlackPixel", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWhitePixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWhitePixel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixel(Display *, int)
     * }
     */
    public static FunctionDescriptor XWhitePixel$descriptor() {
        return XWhitePixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixel(Display *, int)
     * }
     */
    public static MethodHandle XWhitePixel$handle() {
        return XWhitePixel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XWhitePixel(Display *, int)
     * }
     */
    public static long XWhitePixel(MemorySegment x0, int x1) {
        var mh$ = XWhitePixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWhitePixel", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllPlanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XAllPlanes()
     * }
     */
    public static FunctionDescriptor XAllPlanes$descriptor() {
        return XAllPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XAllPlanes()
     * }
     */
    public static MethodHandle XAllPlanes$handle() {
        return XAllPlanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XAllPlanes()
     * }
     */
    public static long XAllPlanes() {
        var mh$ = XAllPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllPlanes");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBlackPixelOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XBlackPixelOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixelOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XBlackPixelOfScreen$descriptor() {
        return XBlackPixelOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixelOfScreen(Screen *)
     * }
     */
    public static MethodHandle XBlackPixelOfScreen$handle() {
        return XBlackPixelOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XBlackPixelOfScreen(Screen *)
     * }
     */
    public static long XBlackPixelOfScreen(MemorySegment x0) {
        var mh$ = XBlackPixelOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBlackPixelOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWhitePixelOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWhitePixelOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixelOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XWhitePixelOfScreen$descriptor() {
        return XWhitePixelOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixelOfScreen(Screen *)
     * }
     */
    public static MethodHandle XWhitePixelOfScreen$handle() {
        return XWhitePixelOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XWhitePixelOfScreen(Screen *)
     * }
     */
    public static long XWhitePixelOfScreen(MemorySegment x0) {
        var mh$ = XWhitePixelOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWhitePixelOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNextRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XNextRequest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XNextRequest(Display *)
     * }
     */
    public static FunctionDescriptor XNextRequest$descriptor() {
        return XNextRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XNextRequest(Display *)
     * }
     */
    public static MethodHandle XNextRequest$handle() {
        return XNextRequest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XNextRequest(Display *)
     * }
     */
    public static long XNextRequest(MemorySegment x0) {
        var mh$ = XNextRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNextRequest", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLastKnownRequestProcessed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLastKnownRequestProcessed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XLastKnownRequestProcessed(Display *)
     * }
     */
    public static FunctionDescriptor XLastKnownRequestProcessed$descriptor() {
        return XLastKnownRequestProcessed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XLastKnownRequestProcessed(Display *)
     * }
     */
    public static MethodHandle XLastKnownRequestProcessed$handle() {
        return XLastKnownRequestProcessed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long XLastKnownRequestProcessed(Display *)
     * }
     */
    public static long XLastKnownRequestProcessed(MemorySegment x0) {
        var mh$ = XLastKnownRequestProcessed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLastKnownRequestProcessed", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XServerVendor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XServerVendor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XServerVendor(Display *)
     * }
     */
    public static FunctionDescriptor XServerVendor$descriptor() {
        return XServerVendor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XServerVendor(Display *)
     * }
     */
    public static MethodHandle XServerVendor$handle() {
        return XServerVendor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XServerVendor(Display *)
     * }
     */
    public static MemorySegment XServerVendor(MemorySegment x0) {
        var mh$ = XServerVendor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XServerVendor", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XDisplayString(Display *)
     * }
     */
    public static FunctionDescriptor XDisplayString$descriptor() {
        return XDisplayString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XDisplayString(Display *)
     * }
     */
    public static MethodHandle XDisplayString$handle() {
        return XDisplayString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XDisplayString(Display *)
     * }
     */
    public static MemorySegment XDisplayString(MemorySegment x0) {
        var mh$ = XDisplayString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormap(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultColormap$descriptor() {
        return XDefaultColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormap(Display *, int)
     * }
     */
    public static MethodHandle XDefaultColormap$handle() {
        return XDefaultColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Colormap XDefaultColormap(Display *, int)
     * }
     */
    public static long XDefaultColormap(MemorySegment x0, int x1) {
        var mh$ = XDefaultColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultColormap", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultColormapOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultColormapOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormapOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultColormapOfScreen$descriptor() {
        return XDefaultColormapOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormapOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultColormapOfScreen$handle() {
        return XDefaultColormapOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Colormap XDefaultColormapOfScreen(Screen *)
     * }
     */
    public static long XDefaultColormapOfScreen(MemorySegment x0) {
        var mh$ = XDefaultColormapOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultColormapOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDisplayOfScreen$descriptor() {
        return XDisplayOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDisplayOfScreen$handle() {
        return XDisplayOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Display *XDisplayOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDisplayOfScreen(MemorySegment x0) {
        var mh$ = XDisplayOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayOfScreen", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenOfDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XScreenOfDisplay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Screen *XScreenOfDisplay(Display *, int)
     * }
     */
    public static FunctionDescriptor XScreenOfDisplay$descriptor() {
        return XScreenOfDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Screen *XScreenOfDisplay(Display *, int)
     * }
     */
    public static MethodHandle XScreenOfDisplay$handle() {
        return XScreenOfDisplay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Screen *XScreenOfDisplay(Display *, int)
     * }
     */
    public static MemorySegment XScreenOfDisplay(MemorySegment x0, int x1) {
        var mh$ = XScreenOfDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenOfDisplay", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultScreenOfDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultScreenOfDisplay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Screen *XDefaultScreenOfDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XDefaultScreenOfDisplay$descriptor() {
        return XDefaultScreenOfDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Screen *XDefaultScreenOfDisplay(Display *)
     * }
     */
    public static MethodHandle XDefaultScreenOfDisplay$handle() {
        return XDefaultScreenOfDisplay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Screen *XDefaultScreenOfDisplay(Display *)
     * }
     */
    public static MemorySegment XDefaultScreenOfDisplay(MemorySegment x0) {
        var mh$ = XDefaultScreenOfDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultScreenOfDisplay", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEventMaskOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XEventMaskOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long XEventMaskOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XEventMaskOfScreen$descriptor() {
        return XEventMaskOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long XEventMaskOfScreen(Screen *)
     * }
     */
    public static MethodHandle XEventMaskOfScreen$handle() {
        return XEventMaskOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long XEventMaskOfScreen(Screen *)
     * }
     */
    public static long XEventMaskOfScreen(MemorySegment x0) {
        var mh$ = XEventMaskOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEventMaskOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenNumberOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XScreenNumberOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XScreenNumberOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XScreenNumberOfScreen$descriptor() {
        return XScreenNumberOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XScreenNumberOfScreen(Screen *)
     * }
     */
    public static MethodHandle XScreenNumberOfScreen$handle() {
        return XScreenNumberOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XScreenNumberOfScreen(Screen *)
     * }
     */
    public static int XScreenNumberOfScreen(MemorySegment x0) {
        var mh$ = XScreenNumberOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenNumberOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetErrorHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetErrorHandler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XErrorHandler XSetErrorHandler(XErrorHandler)
     * }
     */
    public static FunctionDescriptor XSetErrorHandler$descriptor() {
        return XSetErrorHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XErrorHandler XSetErrorHandler(XErrorHandler)
     * }
     */
    public static MethodHandle XSetErrorHandler$handle() {
        return XSetErrorHandler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XErrorHandler XSetErrorHandler(XErrorHandler)
     * }
     */
    public static MemorySegment XSetErrorHandler(MemorySegment x0) {
        var mh$ = XSetErrorHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetErrorHandler", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetIOErrorHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetIOErrorHandler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler)
     * }
     */
    public static FunctionDescriptor XSetIOErrorHandler$descriptor() {
        return XSetIOErrorHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler)
     * }
     */
    public static MethodHandle XSetIOErrorHandler$handle() {
        return XSetIOErrorHandler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler)
     * }
     */
    public static MemorySegment XSetIOErrorHandler(MemorySegment x0) {
        var mh$ = XSetIOErrorHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetIOErrorHandler", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetIOErrorExitHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetIOErrorExitHandler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetIOErrorExitHandler(Display *, XIOErrorExitHandler, void *)
     * }
     */
    public static FunctionDescriptor XSetIOErrorExitHandler$descriptor() {
        return XSetIOErrorExitHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetIOErrorExitHandler(Display *, XIOErrorExitHandler, void *)
     * }
     */
    public static MethodHandle XSetIOErrorExitHandler$handle() {
        return XSetIOErrorExitHandler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetIOErrorExitHandler(Display *, XIOErrorExitHandler, void *)
     * }
     */
    public static void XSetIOErrorExitHandler(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSetIOErrorExitHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetIOErrorExitHandler", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListPixmapFormats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListPixmapFormats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XPixmapFormatValues *XListPixmapFormats(Display *, int *)
     * }
     */
    public static FunctionDescriptor XListPixmapFormats$descriptor() {
        return XListPixmapFormats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XPixmapFormatValues *XListPixmapFormats(Display *, int *)
     * }
     */
    public static MethodHandle XListPixmapFormats$handle() {
        return XListPixmapFormats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XPixmapFormatValues *XListPixmapFormats(Display *, int *)
     * }
     */
    public static MemorySegment XListPixmapFormats(MemorySegment x0, MemorySegment x1) {
        var mh$ = XListPixmapFormats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListPixmapFormats", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListDepths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XListDepths"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *XListDepths(Display *, int, int *)
     * }
     */
    public static FunctionDescriptor XListDepths$descriptor() {
        return XListDepths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *XListDepths(Display *, int, int *)
     * }
     */
    public static MethodHandle XListDepths$handle() {
        return XListDepths.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int *XListDepths(Display *, int, int *)
     * }
     */
    public static MemorySegment XListDepths(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XListDepths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListDepths", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReconfigureWMWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XReconfigureWMWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *)
     * }
     */
    public static FunctionDescriptor XReconfigureWMWindow$descriptor() {
        return XReconfigureWMWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *)
     * }
     */
    public static MethodHandle XReconfigureWMWindow$handle() {
        return XReconfigureWMWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *)
     * }
     */
    public static int XReconfigureWMWindow(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XReconfigureWMWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReconfigureWMWindow", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMProtocols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMProtocols"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMProtocols(Display *, Window, Atom **, int *)
     * }
     */
    public static FunctionDescriptor XGetWMProtocols$descriptor() {
        return XGetWMProtocols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMProtocols(Display *, Window, Atom **, int *)
     * }
     */
    public static MethodHandle XGetWMProtocols$handle() {
        return XGetWMProtocols.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWMProtocols(Display *, Window, Atom **, int *)
     * }
     */
    public static int XGetWMProtocols(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMProtocols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMProtocols", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMProtocols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMProtocols"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWMProtocols(Display *, Window, Atom *, int)
     * }
     */
    public static FunctionDescriptor XSetWMProtocols$descriptor() {
        return XSetWMProtocols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWMProtocols(Display *, Window, Atom *, int)
     * }
     */
    public static MethodHandle XSetWMProtocols$handle() {
        return XSetWMProtocols.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWMProtocols(Display *, Window, Atom *, int)
     * }
     */
    public static int XSetWMProtocols(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetWMProtocols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMProtocols", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XIconifyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XIconifyWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XIconifyWindow(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XIconifyWindow$descriptor() {
        return XIconifyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XIconifyWindow(Display *, Window, int)
     * }
     */
    public static MethodHandle XIconifyWindow$handle() {
        return XIconifyWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XIconifyWindow(Display *, Window, int)
     * }
     */
    public static int XIconifyWindow(MemorySegment x0, long x1, int x2) {
        var mh$ = XIconifyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIconifyWindow", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWithdrawWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWithdrawWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWithdrawWindow(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XWithdrawWindow$descriptor() {
        return XWithdrawWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWithdrawWindow(Display *, Window, int)
     * }
     */
    public static MethodHandle XWithdrawWindow$handle() {
        return XWithdrawWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XWithdrawWindow(Display *, Window, int)
     * }
     */
    public static int XWithdrawWindow(MemorySegment x0, long x1, int x2) {
        var mh$ = XWithdrawWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWithdrawWindow", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetCommand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetCommand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetCommand(Display *, Window, char ***, int *)
     * }
     */
    public static FunctionDescriptor XGetCommand$descriptor() {
        return XGetCommand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetCommand(Display *, Window, char ***, int *)
     * }
     */
    public static MethodHandle XGetCommand$handle() {
        return XGetCommand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetCommand(Display *, Window, char ***, int *)
     * }
     */
    public static int XGetCommand(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetCommand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetCommand", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMColormapWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMColormapWindows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMColormapWindows(Display *, Window, Window **, int *)
     * }
     */
    public static FunctionDescriptor XGetWMColormapWindows$descriptor() {
        return XGetWMColormapWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMColormapWindows(Display *, Window, Window **, int *)
     * }
     */
    public static MethodHandle XGetWMColormapWindows$handle() {
        return XGetWMColormapWindows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWMColormapWindows(Display *, Window, Window **, int *)
     * }
     */
    public static int XGetWMColormapWindows(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMColormapWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMColormapWindows", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMColormapWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMColormapWindows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWMColormapWindows(Display *, Window, Window *, int)
     * }
     */
    public static FunctionDescriptor XSetWMColormapWindows$descriptor() {
        return XSetWMColormapWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWMColormapWindows(Display *, Window, Window *, int)
     * }
     */
    public static MethodHandle XSetWMColormapWindows$handle() {
        return XSetWMColormapWindows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWMColormapWindows(Display *, Window, Window *, int)
     * }
     */
    public static int XSetWMColormapWindows(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetWMColormapWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMColormapWindows", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeStringList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFreeStringList(char **)
     * }
     */
    public static FunctionDescriptor XFreeStringList$descriptor() {
        return XFreeStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFreeStringList(char **)
     * }
     */
    public static MethodHandle XFreeStringList$handle() {
        return XFreeStringList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XFreeStringList(char **)
     * }
     */
    public static void XFreeStringList(MemorySegment x0) {
        var mh$ = XFreeStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeStringList", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTransientForHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetTransientForHint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetTransientForHint(Display *, Window, Window)
     * }
     */
    public static FunctionDescriptor XSetTransientForHint$descriptor() {
        return XSetTransientForHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetTransientForHint(Display *, Window, Window)
     * }
     */
    public static MethodHandle XSetTransientForHint$handle() {
        return XSetTransientForHint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetTransientForHint(Display *, Window, Window)
     * }
     */
    public static int XSetTransientForHint(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetTransientForHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTransientForHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XActivateScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XActivateScreenSaver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XActivateScreenSaver(Display *)
     * }
     */
    public static FunctionDescriptor XActivateScreenSaver$descriptor() {
        return XActivateScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XActivateScreenSaver(Display *)
     * }
     */
    public static MethodHandle XActivateScreenSaver$handle() {
        return XActivateScreenSaver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XActivateScreenSaver(Display *)
     * }
     */
    public static int XActivateScreenSaver(MemorySegment x0) {
        var mh$ = XActivateScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XActivateScreenSaver", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAddHost"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddHost(Display *, XHostAddress *)
     * }
     */
    public static FunctionDescriptor XAddHost$descriptor() {
        return XAddHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddHost(Display *, XHostAddress *)
     * }
     */
    public static MethodHandle XAddHost$handle() {
        return XAddHost.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAddHost(Display *, XHostAddress *)
     * }
     */
    public static int XAddHost(MemorySegment x0, MemorySegment x1) {
        var mh$ = XAddHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddHost", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddHosts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAddHosts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddHosts(Display *, XHostAddress *, int)
     * }
     */
    public static FunctionDescriptor XAddHosts$descriptor() {
        return XAddHosts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddHosts(Display *, XHostAddress *, int)
     * }
     */
    public static MethodHandle XAddHosts$handle() {
        return XAddHosts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAddHosts(Display *, XHostAddress *, int)
     * }
     */
    public static int XAddHosts(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XAddHosts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddHosts", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddToExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAddToExtensionList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddToExtensionList(struct _XExtData **, XExtData *)
     * }
     */
    public static FunctionDescriptor XAddToExtensionList$descriptor() {
        return XAddToExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddToExtensionList(struct _XExtData **, XExtData *)
     * }
     */
    public static MethodHandle XAddToExtensionList$handle() {
        return XAddToExtensionList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAddToExtensionList(struct _XExtData **, XExtData *)
     * }
     */
    public static int XAddToExtensionList(MemorySegment x0, MemorySegment x1) {
        var mh$ = XAddToExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddToExtensionList", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddToSaveSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAddToSaveSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddToSaveSet(Display *, Window)
     * }
     */
    public static FunctionDescriptor XAddToSaveSet$descriptor() {
        return XAddToSaveSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddToSaveSet(Display *, Window)
     * }
     */
    public static MethodHandle XAddToSaveSet$handle() {
        return XAddToSaveSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAddToSaveSet(Display *, Window)
     * }
     */
    public static int XAddToSaveSet(MemorySegment x0, long x1) {
        var mh$ = XAddToSaveSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddToSaveSet", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocColor(Display *, Colormap, XColor *)
     * }
     */
    public static FunctionDescriptor XAllocColor$descriptor() {
        return XAllocColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocColor(Display *, Colormap, XColor *)
     * }
     */
    public static MethodHandle XAllocColor$handle() {
        return XAllocColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAllocColor(Display *, Colormap, XColor *)
     * }
     */
    public static int XAllocColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XAllocColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocColorCells {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocColorCells"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocColorCells(Display *, Colormap, int, unsigned long *, unsigned int, unsigned long *, unsigned int)
     * }
     */
    public static FunctionDescriptor XAllocColorCells$descriptor() {
        return XAllocColorCells.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocColorCells(Display *, Colormap, int, unsigned long *, unsigned int, unsigned long *, unsigned int)
     * }
     */
    public static MethodHandle XAllocColorCells$handle() {
        return XAllocColorCells.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAllocColorCells(Display *, Colormap, int, unsigned long *, unsigned int, unsigned long *, unsigned int)
     * }
     */
    public static int XAllocColorCells(MemorySegment x0, long x1, int x2, MemorySegment x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XAllocColorCells.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocColorCells", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocColorPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocColorPlanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long *, int, int, int, int, unsigned long *, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor XAllocColorPlanes$descriptor() {
        return XAllocColorPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long *, int, int, int, int, unsigned long *, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle XAllocColorPlanes$handle() {
        return XAllocColorPlanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long *, int, int, int, int, unsigned long *, unsigned long *, unsigned long *)
     * }
     */
    public static int XAllocColorPlanes(MemorySegment x0, long x1, int x2, MemorySegment x3, int x4, int x5, int x6, int x7, MemorySegment x8, MemorySegment x9, MemorySegment x10) {
        var mh$ = XAllocColorPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocColorPlanes", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocNamedColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocNamedColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static FunctionDescriptor XAllocNamedColor$descriptor() {
        return XAllocNamedColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static MethodHandle XAllocNamedColor$handle() {
        return XAllocNamedColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static int XAllocNamedColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XAllocNamedColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocNamedColor", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllowEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllowEvents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllowEvents(Display *, int, Time)
     * }
     */
    public static FunctionDescriptor XAllowEvents$descriptor() {
        return XAllowEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllowEvents(Display *, int, Time)
     * }
     */
    public static MethodHandle XAllowEvents$handle() {
        return XAllowEvents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAllowEvents(Display *, int, Time)
     * }
     */
    public static int XAllowEvents(MemorySegment x0, int x1, long x2) {
        var mh$ = XAllowEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllowEvents", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAutoRepeatOff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAutoRepeatOff"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOff(Display *)
     * }
     */
    public static FunctionDescriptor XAutoRepeatOff$descriptor() {
        return XAutoRepeatOff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOff(Display *)
     * }
     */
    public static MethodHandle XAutoRepeatOff$handle() {
        return XAutoRepeatOff.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAutoRepeatOff(Display *)
     * }
     */
    public static int XAutoRepeatOff(MemorySegment x0) {
        var mh$ = XAutoRepeatOff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAutoRepeatOff", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAutoRepeatOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAutoRepeatOn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOn(Display *)
     * }
     */
    public static FunctionDescriptor XAutoRepeatOn$descriptor() {
        return XAutoRepeatOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOn(Display *)
     * }
     */
    public static MethodHandle XAutoRepeatOn$handle() {
        return XAutoRepeatOn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAutoRepeatOn(Display *)
     * }
     */
    public static int XAutoRepeatOn(MemorySegment x0) {
        var mh$ = XAutoRepeatOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAutoRepeatOn", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XBell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBell(Display *, int)
     * }
     */
    public static FunctionDescriptor XBell$descriptor() {
        return XBell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBell(Display *, int)
     * }
     */
    public static MethodHandle XBell$handle() {
        return XBell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XBell(Display *, int)
     * }
     */
    public static int XBell(MemorySegment x0, int x1) {
        var mh$ = XBell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBell", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBitmapBitOrder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XBitmapBitOrder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBitmapBitOrder(Display *)
     * }
     */
    public static FunctionDescriptor XBitmapBitOrder$descriptor() {
        return XBitmapBitOrder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBitmapBitOrder(Display *)
     * }
     */
    public static MethodHandle XBitmapBitOrder$handle() {
        return XBitmapBitOrder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XBitmapBitOrder(Display *)
     * }
     */
    public static int XBitmapBitOrder(MemorySegment x0) {
        var mh$ = XBitmapBitOrder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBitmapBitOrder", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBitmapPad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XBitmapPad"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBitmapPad(Display *)
     * }
     */
    public static FunctionDescriptor XBitmapPad$descriptor() {
        return XBitmapPad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBitmapPad(Display *)
     * }
     */
    public static MethodHandle XBitmapPad$handle() {
        return XBitmapPad.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XBitmapPad(Display *)
     * }
     */
    public static int XBitmapPad(MemorySegment x0) {
        var mh$ = XBitmapPad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBitmapPad", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBitmapUnit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XBitmapUnit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBitmapUnit(Display *)
     * }
     */
    public static FunctionDescriptor XBitmapUnit$descriptor() {
        return XBitmapUnit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBitmapUnit(Display *)
     * }
     */
    public static MethodHandle XBitmapUnit$handle() {
        return XBitmapUnit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XBitmapUnit(Display *)
     * }
     */
    public static int XBitmapUnit(MemorySegment x0) {
        var mh$ = XBitmapUnit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBitmapUnit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCellsOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCellsOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCellsOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XCellsOfScreen$descriptor() {
        return XCellsOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCellsOfScreen(Screen *)
     * }
     */
    public static MethodHandle XCellsOfScreen$handle() {
        return XCellsOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCellsOfScreen(Screen *)
     * }
     */
    public static int XCellsOfScreen(MemorySegment x0) {
        var mh$ = XCellsOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCellsOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeActivePointerGrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangeActivePointerGrab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time)
     * }
     */
    public static FunctionDescriptor XChangeActivePointerGrab$descriptor() {
        return XChangeActivePointerGrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time)
     * }
     */
    public static MethodHandle XChangeActivePointerGrab$handle() {
        return XChangeActivePointerGrab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time)
     * }
     */
    public static int XChangeActivePointerGrab(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = XChangeActivePointerGrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeActivePointerGrab", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangeGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeGC(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static FunctionDescriptor XChangeGC$descriptor() {
        return XChangeGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeGC(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static MethodHandle XChangeGC$handle() {
        return XChangeGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangeGC(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static int XChangeGC(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XChangeGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeGC", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeKeyboardControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangeKeyboardControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardControl(Display *, unsigned long, XKeyboardControl *)
     * }
     */
    public static FunctionDescriptor XChangeKeyboardControl$descriptor() {
        return XChangeKeyboardControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardControl(Display *, unsigned long, XKeyboardControl *)
     * }
     */
    public static MethodHandle XChangeKeyboardControl$handle() {
        return XChangeKeyboardControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangeKeyboardControl(Display *, unsigned long, XKeyboardControl *)
     * }
     */
    public static int XChangeKeyboardControl(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XChangeKeyboardControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeKeyboardControl", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeKeyboardMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangeKeyboardMapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int)
     * }
     */
    public static FunctionDescriptor XChangeKeyboardMapping$descriptor() {
        return XChangeKeyboardMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int)
     * }
     */
    public static MethodHandle XChangeKeyboardMapping$handle() {
        return XChangeKeyboardMapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int)
     * }
     */
    public static int XChangeKeyboardMapping(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = XChangeKeyboardMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeKeyboardMapping", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangePointerControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangePointerControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangePointerControl(Display *, int, int, int, int, int)
     * }
     */
    public static FunctionDescriptor XChangePointerControl$descriptor() {
        return XChangePointerControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangePointerControl(Display *, int, int, int, int, int)
     * }
     */
    public static MethodHandle XChangePointerControl$handle() {
        return XChangePointerControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangePointerControl(Display *, int, int, int, int, int)
     * }
     */
    public static int XChangePointerControl(MemorySegment x0, int x1, int x2, int x3, int x4, int x5) {
        var mh$ = XChangePointerControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangePointerControl", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangeProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XChangeProperty$descriptor() {
        return XChangeProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned char *, int)
     * }
     */
    public static MethodHandle XChangeProperty$handle() {
        return XChangeProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned char *, int)
     * }
     */
    public static int XChangeProperty(MemorySegment x0, long x1, long x2, long x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XChangeProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeProperty", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeSaveSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangeSaveSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeSaveSet(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XChangeSaveSet$descriptor() {
        return XChangeSaveSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeSaveSet(Display *, Window, int)
     * }
     */
    public static MethodHandle XChangeSaveSet$handle() {
        return XChangeSaveSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangeSaveSet(Display *, Window, int)
     * }
     */
    public static int XChangeSaveSet(MemorySegment x0, long x1, int x2) {
        var mh$ = XChangeSaveSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeSaveSet", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeWindowAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XChangeWindowAttributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeWindowAttributes(Display *, Window, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static FunctionDescriptor XChangeWindowAttributes$descriptor() {
        return XChangeWindowAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeWindowAttributes(Display *, Window, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static MethodHandle XChangeWindowAttributes$handle() {
        return XChangeWindowAttributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XChangeWindowAttributes(Display *, Window, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static int XChangeWindowAttributes(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XChangeWindowAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeWindowAttributes", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckIfEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCheckIfEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static FunctionDescriptor XCheckIfEvent$descriptor() {
        return XCheckIfEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MethodHandle XCheckIfEvent$handle() {
        return XCheckIfEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static int XCheckIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XCheckIfEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckIfEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckMaskEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCheckMaskEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckMaskEvent$descriptor() {
        return XCheckMaskEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static MethodHandle XCheckMaskEvent$handle() {
        return XCheckMaskEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCheckMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static int XCheckMaskEvent(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XCheckMaskEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckMaskEvent", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckTypedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCheckTypedEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckTypedEvent(Display *, int, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckTypedEvent$descriptor() {
        return XCheckTypedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckTypedEvent(Display *, int, XEvent *)
     * }
     */
    public static MethodHandle XCheckTypedEvent$handle() {
        return XCheckTypedEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCheckTypedEvent(Display *, int, XEvent *)
     * }
     */
    public static int XCheckTypedEvent(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XCheckTypedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckTypedEvent", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckTypedWindowEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCheckTypedWindowEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckTypedWindowEvent$descriptor() {
        return XCheckTypedWindowEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *)
     * }
     */
    public static MethodHandle XCheckTypedWindowEvent$handle() {
        return XCheckTypedWindowEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *)
     * }
     */
    public static int XCheckTypedWindowEvent(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XCheckTypedWindowEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckTypedWindowEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckWindowEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCheckWindowEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckWindowEvent$descriptor() {
        return XCheckWindowEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static MethodHandle XCheckWindowEvent$handle() {
        return XCheckWindowEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCheckWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static int XCheckWindowEvent(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XCheckWindowEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckWindowEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCirculateSubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCirculateSubwindows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindows(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XCirculateSubwindows$descriptor() {
        return XCirculateSubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindows(Display *, Window, int)
     * }
     */
    public static MethodHandle XCirculateSubwindows$handle() {
        return XCirculateSubwindows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCirculateSubwindows(Display *, Window, int)
     * }
     */
    public static int XCirculateSubwindows(MemorySegment x0, long x1, int x2) {
        var mh$ = XCirculateSubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCirculateSubwindows", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCirculateSubwindowsDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCirculateSubwindowsDown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsDown(Display *, Window)
     * }
     */
    public static FunctionDescriptor XCirculateSubwindowsDown$descriptor() {
        return XCirculateSubwindowsDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsDown(Display *, Window)
     * }
     */
    public static MethodHandle XCirculateSubwindowsDown$handle() {
        return XCirculateSubwindowsDown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsDown(Display *, Window)
     * }
     */
    public static int XCirculateSubwindowsDown(MemorySegment x0, long x1) {
        var mh$ = XCirculateSubwindowsDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCirculateSubwindowsDown", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCirculateSubwindowsUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCirculateSubwindowsUp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsUp(Display *, Window)
     * }
     */
    public static FunctionDescriptor XCirculateSubwindowsUp$descriptor() {
        return XCirculateSubwindowsUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsUp(Display *, Window)
     * }
     */
    public static MethodHandle XCirculateSubwindowsUp$handle() {
        return XCirculateSubwindowsUp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsUp(Display *, Window)
     * }
     */
    public static int XCirculateSubwindowsUp(MemorySegment x0, long x1) {
        var mh$ = XCirculateSubwindowsUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCirculateSubwindowsUp", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XClearArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XClearArea"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int)
     * }
     */
    public static FunctionDescriptor XClearArea$descriptor() {
        return XClearArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int)
     * }
     */
    public static MethodHandle XClearArea$handle() {
        return XClearArea.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int)
     * }
     */
    public static int XClearArea(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6) {
        var mh$ = XClearArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XClearArea", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XClearWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XClearWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XClearWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XClearWindow$descriptor() {
        return XClearWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XClearWindow(Display *, Window)
     * }
     */
    public static MethodHandle XClearWindow$handle() {
        return XClearWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XClearWindow(Display *, Window)
     * }
     */
    public static int XClearWindow(MemorySegment x0, long x1) {
        var mh$ = XClearWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XClearWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCloseDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCloseDisplay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCloseDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XCloseDisplay$descriptor() {
        return XCloseDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCloseDisplay(Display *)
     * }
     */
    public static MethodHandle XCloseDisplay$handle() {
        return XCloseDisplay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCloseDisplay(Display *)
     * }
     */
    public static int XCloseDisplay(MemorySegment x0) {
        var mh$ = XCloseDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCloseDisplay", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConfigureWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XConfigureWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *)
     * }
     */
    public static FunctionDescriptor XConfigureWindow$descriptor() {
        return XConfigureWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *)
     * }
     */
    public static MethodHandle XConfigureWindow$handle() {
        return XConfigureWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *)
     * }
     */
    public static int XConfigureWindow(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XConfigureWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConfigureWindow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConnectionNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XConnectionNumber"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XConnectionNumber(Display *)
     * }
     */
    public static FunctionDescriptor XConnectionNumber$descriptor() {
        return XConnectionNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XConnectionNumber(Display *)
     * }
     */
    public static MethodHandle XConnectionNumber$handle() {
        return XConnectionNumber.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XConnectionNumber(Display *)
     * }
     */
    public static int XConnectionNumber(MemorySegment x0) {
        var mh$ = XConnectionNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConnectionNumber", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConvertSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XConvertSelection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time)
     * }
     */
    public static FunctionDescriptor XConvertSelection$descriptor() {
        return XConvertSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time)
     * }
     */
    public static MethodHandle XConvertSelection$handle() {
        return XConvertSelection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time)
     * }
     */
    public static int XConvertSelection(MemorySegment x0, long x1, long x2, long x3, long x4, long x5) {
        var mh$ = XConvertSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConvertSelection", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCopyArea"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XCopyArea$descriptor() {
        return XCopyArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XCopyArea$handle() {
        return XCopyArea.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XCopyArea(MemorySegment x0, long x1, long x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9) {
        var mh$ = XCopyArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyArea", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCopyGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCopyGC(Display *, GC, unsigned long, GC)
     * }
     */
    public static FunctionDescriptor XCopyGC$descriptor() {
        return XCopyGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCopyGC(Display *, GC, unsigned long, GC)
     * }
     */
    public static MethodHandle XCopyGC$handle() {
        return XCopyGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCopyGC(Display *, GC, unsigned long, GC)
     * }
     */
    public static int XCopyGC(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XCopyGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyGC", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCopyPlane"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long)
     * }
     */
    public static FunctionDescriptor XCopyPlane$descriptor() {
        return XCopyPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long)
     * }
     */
    public static MethodHandle XCopyPlane$handle() {
        return XCopyPlane.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long)
     * }
     */
    public static int XCopyPlane(MemorySegment x0, long x1, long x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9, long x10) {
        var mh$ = XCopyPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyPlane", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultDepth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefaultDepth(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultDepth$descriptor() {
        return XDefaultDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefaultDepth(Display *, int)
     * }
     */
    public static MethodHandle XDefaultDepth$handle() {
        return XDefaultDepth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDefaultDepth(Display *, int)
     * }
     */
    public static int XDefaultDepth(MemorySegment x0, int x1) {
        var mh$ = XDefaultDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultDepth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultDepthOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultDepthOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefaultDepthOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultDepthOfScreen$descriptor() {
        return XDefaultDepthOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefaultDepthOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultDepthOfScreen$handle() {
        return XDefaultDepthOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDefaultDepthOfScreen(Screen *)
     * }
     */
    public static int XDefaultDepthOfScreen(MemorySegment x0) {
        var mh$ = XDefaultDepthOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultDepthOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefaultScreen(Display *)
     * }
     */
    public static FunctionDescriptor XDefaultScreen$descriptor() {
        return XDefaultScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefaultScreen(Display *)
     * }
     */
    public static MethodHandle XDefaultScreen$handle() {
        return XDefaultScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDefaultScreen(Display *)
     * }
     */
    public static int XDefaultScreen(MemorySegment x0) {
        var mh$ = XDefaultScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefineCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefineCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefineCursor(Display *, Window, Cursor)
     * }
     */
    public static FunctionDescriptor XDefineCursor$descriptor() {
        return XDefineCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefineCursor(Display *, Window, Cursor)
     * }
     */
    public static MethodHandle XDefineCursor$handle() {
        return XDefineCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDefineCursor(Display *, Window, Cursor)
     * }
     */
    public static int XDefineCursor(MemorySegment x0, long x1, long x2) {
        var mh$ = XDefineCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefineCursor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDeleteProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDeleteProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDeleteProperty(Display *, Window, Atom)
     * }
     */
    public static FunctionDescriptor XDeleteProperty$descriptor() {
        return XDeleteProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDeleteProperty(Display *, Window, Atom)
     * }
     */
    public static MethodHandle XDeleteProperty$handle() {
        return XDeleteProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDeleteProperty(Display *, Window, Atom)
     * }
     */
    public static int XDeleteProperty(MemorySegment x0, long x1, long x2) {
        var mh$ = XDeleteProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDeleteProperty", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDestroyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDestroyWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDestroyWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XDestroyWindow$descriptor() {
        return XDestroyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDestroyWindow(Display *, Window)
     * }
     */
    public static MethodHandle XDestroyWindow$handle() {
        return XDestroyWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDestroyWindow(Display *, Window)
     * }
     */
    public static int XDestroyWindow(MemorySegment x0, long x1) {
        var mh$ = XDestroyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDestroySubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDestroySubwindows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDestroySubwindows(Display *, Window)
     * }
     */
    public static FunctionDescriptor XDestroySubwindows$descriptor() {
        return XDestroySubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDestroySubwindows(Display *, Window)
     * }
     */
    public static MethodHandle XDestroySubwindows$handle() {
        return XDestroySubwindows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDestroySubwindows(Display *, Window)
     * }
     */
    public static int XDestroySubwindows(MemorySegment x0, long x1) {
        var mh$ = XDestroySubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroySubwindows", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDoesBackingStore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDoesBackingStore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDoesBackingStore(Screen *)
     * }
     */
    public static FunctionDescriptor XDoesBackingStore$descriptor() {
        return XDoesBackingStore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDoesBackingStore(Screen *)
     * }
     */
    public static MethodHandle XDoesBackingStore$handle() {
        return XDoesBackingStore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDoesBackingStore(Screen *)
     * }
     */
    public static int XDoesBackingStore(MemorySegment x0) {
        var mh$ = XDoesBackingStore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDoesBackingStore", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDoesSaveUnders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDoesSaveUnders"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDoesSaveUnders(Screen *)
     * }
     */
    public static FunctionDescriptor XDoesSaveUnders$descriptor() {
        return XDoesSaveUnders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDoesSaveUnders(Screen *)
     * }
     */
    public static MethodHandle XDoesSaveUnders$handle() {
        return XDoesSaveUnders.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDoesSaveUnders(Screen *)
     * }
     */
    public static int XDoesSaveUnders(MemorySegment x0) {
        var mh$ = XDoesSaveUnders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDoesSaveUnders", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisableAccessControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisableAccessControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisableAccessControl(Display *)
     * }
     */
    public static FunctionDescriptor XDisableAccessControl$descriptor() {
        return XDisableAccessControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisableAccessControl(Display *)
     * }
     */
    public static MethodHandle XDisableAccessControl$handle() {
        return XDisableAccessControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisableAccessControl(Display *)
     * }
     */
    public static int XDisableAccessControl(MemorySegment x0) {
        var mh$ = XDisableAccessControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisableAccessControl", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayCells {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayCells"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayCells(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayCells$descriptor() {
        return XDisplayCells.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayCells(Display *, int)
     * }
     */
    public static MethodHandle XDisplayCells$handle() {
        return XDisplayCells.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisplayCells(Display *, int)
     * }
     */
    public static int XDisplayCells(MemorySegment x0, int x1) {
        var mh$ = XDisplayCells.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayCells", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayHeight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayHeight(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayHeight$descriptor() {
        return XDisplayHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayHeight(Display *, int)
     * }
     */
    public static MethodHandle XDisplayHeight$handle() {
        return XDisplayHeight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisplayHeight(Display *, int)
     * }
     */
    public static int XDisplayHeight(MemorySegment x0, int x1) {
        var mh$ = XDisplayHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayHeight", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayHeightMM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayHeightMM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayHeightMM(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayHeightMM$descriptor() {
        return XDisplayHeightMM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayHeightMM(Display *, int)
     * }
     */
    public static MethodHandle XDisplayHeightMM$handle() {
        return XDisplayHeightMM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisplayHeightMM(Display *, int)
     * }
     */
    public static int XDisplayHeightMM(MemorySegment x0, int x1) {
        var mh$ = XDisplayHeightMM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayHeightMM", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayKeycodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayKeycodes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayKeycodes(Display *, int *, int *)
     * }
     */
    public static FunctionDescriptor XDisplayKeycodes$descriptor() {
        return XDisplayKeycodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayKeycodes(Display *, int *, int *)
     * }
     */
    public static MethodHandle XDisplayKeycodes$handle() {
        return XDisplayKeycodes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisplayKeycodes(Display *, int *, int *)
     * }
     */
    public static int XDisplayKeycodes(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XDisplayKeycodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayKeycodes", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayPlanes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayPlanes(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayPlanes$descriptor() {
        return XDisplayPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayPlanes(Display *, int)
     * }
     */
    public static MethodHandle XDisplayPlanes$handle() {
        return XDisplayPlanes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisplayPlanes(Display *, int)
     * }
     */
    public static int XDisplayPlanes(MemorySegment x0, int x1) {
        var mh$ = XDisplayPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayPlanes", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayWidth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayWidth(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayWidth$descriptor() {
        return XDisplayWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayWidth(Display *, int)
     * }
     */
    public static MethodHandle XDisplayWidth$handle() {
        return XDisplayWidth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisplayWidth(Display *, int)
     * }
     */
    public static int XDisplayWidth(MemorySegment x0, int x1) {
        var mh$ = XDisplayWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayWidth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayWidthMM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayWidthMM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayWidthMM(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayWidthMM$descriptor() {
        return XDisplayWidthMM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayWidthMM(Display *, int)
     * }
     */
    public static MethodHandle XDisplayWidthMM$handle() {
        return XDisplayWidthMM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDisplayWidthMM(Display *, int)
     * }
     */
    public static int XDisplayWidthMM(MemorySegment x0, int x1) {
        var mh$ = XDisplayWidthMM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayWidthMM", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawArc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XDrawArc$descriptor() {
        return XDrawArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XDrawArc$handle() {
        return XDrawArc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XDrawArc(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XDrawArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawArc", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawArcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawArcs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static FunctionDescriptor XDrawArcs$descriptor() {
        return XDrawArcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static MethodHandle XDrawArcs$handle() {
        return XDrawArcs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static int XDrawArcs(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawArcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawArcs", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawImageString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XDrawImageString$descriptor() {
        return XDrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XDrawImageString$handle() {
        return XDrawImageString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static int XDrawImageString(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawImageString", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawImageString16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawImageString16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static FunctionDescriptor XDrawImageString16$descriptor() {
        return XDrawImageString16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static MethodHandle XDrawImageString16$handle() {
        return XDrawImageString16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static int XDrawImageString16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawImageString16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawImageString16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawLine"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawLine(Display *, Drawable, GC, int, int, int, int)
     * }
     */
    public static FunctionDescriptor XDrawLine$descriptor() {
        return XDrawLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawLine(Display *, Drawable, GC, int, int, int, int)
     * }
     */
    public static MethodHandle XDrawLine$handle() {
        return XDrawLine.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawLine(Display *, Drawable, GC, int, int, int, int)
     * }
     */
    public static int XDrawLine(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XDrawLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawLine", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawLines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawLines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static FunctionDescriptor XDrawLines$descriptor() {
        return XDrawLines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static MethodHandle XDrawLines$handle() {
        return XDrawLines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static int XDrawLines(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5) {
        var mh$ = XDrawLines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawLines", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawPoint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawPoint(Display *, Drawable, GC, int, int)
     * }
     */
    public static FunctionDescriptor XDrawPoint$descriptor() {
        return XDrawPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawPoint(Display *, Drawable, GC, int, int)
     * }
     */
    public static MethodHandle XDrawPoint$handle() {
        return XDrawPoint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawPoint(Display *, Drawable, GC, int, int)
     * }
     */
    public static int XDrawPoint(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XDrawPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawPoint", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawPoints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static FunctionDescriptor XDrawPoints$descriptor() {
        return XDrawPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static MethodHandle XDrawPoints$handle() {
        return XDrawPoints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static int XDrawPoints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5) {
        var mh$ = XDrawPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawPoints", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawRectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawRectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XDrawRectangle$descriptor() {
        return XDrawRectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XDrawRectangle$handle() {
        return XDrawRectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XDrawRectangle(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XDrawRectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawRectangle", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawRectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawRectangles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static FunctionDescriptor XDrawRectangles$descriptor() {
        return XDrawRectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static MethodHandle XDrawRectangles$handle() {
        return XDrawRectangles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static int XDrawRectangles(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawRectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawRectangles", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawSegments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawSegments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int)
     * }
     */
    public static FunctionDescriptor XDrawSegments$descriptor() {
        return XDrawSegments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int)
     * }
     */
    public static MethodHandle XDrawSegments$handle() {
        return XDrawSegments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int)
     * }
     */
    public static int XDrawSegments(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawSegments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawSegments", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XDrawString$descriptor() {
        return XDrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XDrawString$handle() {
        return XDrawString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static int XDrawString(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawString", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawString16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawString16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static FunctionDescriptor XDrawString16$descriptor() {
        return XDrawString16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static MethodHandle XDrawString16$handle() {
        return XDrawString16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static int XDrawString16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawString16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawString16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int)
     * }
     */
    public static FunctionDescriptor XDrawText$descriptor() {
        return XDrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int)
     * }
     */
    public static MethodHandle XDrawText$handle() {
        return XDrawText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int)
     * }
     */
    public static int XDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawText16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDrawText16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int)
     * }
     */
    public static FunctionDescriptor XDrawText16$descriptor() {
        return XDrawText16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int)
     * }
     */
    public static MethodHandle XDrawText16$handle() {
        return XDrawText16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int)
     * }
     */
    public static int XDrawText16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawText16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawText16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEnableAccessControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XEnableAccessControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEnableAccessControl(Display *)
     * }
     */
    public static FunctionDescriptor XEnableAccessControl$descriptor() {
        return XEnableAccessControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEnableAccessControl(Display *)
     * }
     */
    public static MethodHandle XEnableAccessControl$handle() {
        return XEnableAccessControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XEnableAccessControl(Display *)
     * }
     */
    public static int XEnableAccessControl(MemorySegment x0) {
        var mh$ = XEnableAccessControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEnableAccessControl", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEventsQueued {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XEventsQueued"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEventsQueued(Display *, int)
     * }
     */
    public static FunctionDescriptor XEventsQueued$descriptor() {
        return XEventsQueued.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEventsQueued(Display *, int)
     * }
     */
    public static MethodHandle XEventsQueued$handle() {
        return XEventsQueued.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XEventsQueued(Display *, int)
     * }
     */
    public static int XEventsQueued(MemorySegment x0, int x1) {
        var mh$ = XEventsQueued.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEventsQueued", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFetchName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFetchName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFetchName(Display *, Window, char **)
     * }
     */
    public static FunctionDescriptor XFetchName$descriptor() {
        return XFetchName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFetchName(Display *, Window, char **)
     * }
     */
    public static MethodHandle XFetchName$handle() {
        return XFetchName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFetchName(Display *, Window, char **)
     * }
     */
    public static int XFetchName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XFetchName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFetchName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFillArc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XFillArc$descriptor() {
        return XFillArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XFillArc$handle() {
        return XFillArc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XFillArc(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XFillArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillArc", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillArcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFillArcs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static FunctionDescriptor XFillArcs$descriptor() {
        return XFillArcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static MethodHandle XFillArcs$handle() {
        return XFillArcs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFillArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static int XFillArcs(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XFillArcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillArcs", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFillPolygon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int)
     * }
     */
    public static FunctionDescriptor XFillPolygon$descriptor() {
        return XFillPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int)
     * }
     */
    public static MethodHandle XFillPolygon$handle() {
        return XFillPolygon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int)
     * }
     */
    public static int XFillPolygon(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6) {
        var mh$ = XFillPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillPolygon", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillRectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFillRectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XFillRectangle$descriptor() {
        return XFillRectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XFillRectangle$handle() {
        return XFillRectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XFillRectangle(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XFillRectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillRectangle", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillRectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFillRectangles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static FunctionDescriptor XFillRectangles$descriptor() {
        return XFillRectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static MethodHandle XFillRectangles$handle() {
        return XFillRectangles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static int XFillRectangles(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XFillRectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillRectangles", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFlush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFlush(Display *)
     * }
     */
    public static FunctionDescriptor XFlush$descriptor() {
        return XFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFlush(Display *)
     * }
     */
    public static MethodHandle XFlush$handle() {
        return XFlush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFlush(Display *)
     * }
     */
    public static int XFlush(MemorySegment x0) {
        var mh$ = XFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFlush", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XForceScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XForceScreenSaver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XForceScreenSaver(Display *, int)
     * }
     */
    public static FunctionDescriptor XForceScreenSaver$descriptor() {
        return XForceScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XForceScreenSaver(Display *, int)
     * }
     */
    public static MethodHandle XForceScreenSaver$handle() {
        return XForceScreenSaver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XForceScreenSaver(Display *, int)
     * }
     */
    public static int XForceScreenSaver(MemorySegment x0, int x1) {
        var mh$ = XForceScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XForceScreenSaver", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFree(void *)
     * }
     */
    public static FunctionDescriptor XFree$descriptor() {
        return XFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFree(void *)
     * }
     */
    public static MethodHandle XFree$handle() {
        return XFree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFree(void *)
     * }
     */
    public static int XFree(MemorySegment x0) {
        var mh$ = XFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFree", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeColormap(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XFreeColormap$descriptor() {
        return XFreeColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeColormap(Display *, Colormap)
     * }
     */
    public static MethodHandle XFreeColormap$handle() {
        return XFreeColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeColormap(Display *, Colormap)
     * }
     */
    public static int XFreeColormap(MemorySegment x0, long x1) {
        var mh$ = XFreeColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeColors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeColors(Display *, Colormap, unsigned long *, int, unsigned long)
     * }
     */
    public static FunctionDescriptor XFreeColors$descriptor() {
        return XFreeColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeColors(Display *, Colormap, unsigned long *, int, unsigned long)
     * }
     */
    public static MethodHandle XFreeColors$handle() {
        return XFreeColors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeColors(Display *, Colormap, unsigned long *, int, unsigned long)
     * }
     */
    public static int XFreeColors(MemorySegment x0, long x1, MemorySegment x2, int x3, long x4) {
        var mh$ = XFreeColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeColors", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeCursor(Display *, Cursor)
     * }
     */
    public static FunctionDescriptor XFreeCursor$descriptor() {
        return XFreeCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeCursor(Display *, Cursor)
     * }
     */
    public static MethodHandle XFreeCursor$handle() {
        return XFreeCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeCursor(Display *, Cursor)
     * }
     */
    public static int XFreeCursor(MemorySegment x0, long x1) {
        var mh$ = XFreeCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeCursor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeExtensionList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeExtensionList(char **)
     * }
     */
    public static FunctionDescriptor XFreeExtensionList$descriptor() {
        return XFreeExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeExtensionList(char **)
     * }
     */
    public static MethodHandle XFreeExtensionList$handle() {
        return XFreeExtensionList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeExtensionList(char **)
     * }
     */
    public static int XFreeExtensionList(MemorySegment x0) {
        var mh$ = XFreeExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeExtensionList", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeFont"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFont(Display *, XFontStruct *)
     * }
     */
    public static FunctionDescriptor XFreeFont$descriptor() {
        return XFreeFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFont(Display *, XFontStruct *)
     * }
     */
    public static MethodHandle XFreeFont$handle() {
        return XFreeFont.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeFont(Display *, XFontStruct *)
     * }
     */
    public static int XFreeFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFont", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeFontInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFontInfo(char **, XFontStruct *, int)
     * }
     */
    public static FunctionDescriptor XFreeFontInfo$descriptor() {
        return XFreeFontInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFontInfo(char **, XFontStruct *, int)
     * }
     */
    public static MethodHandle XFreeFontInfo$handle() {
        return XFreeFontInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeFontInfo(char **, XFontStruct *, int)
     * }
     */
    public static int XFreeFontInfo(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XFreeFontInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontInfo", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeFontNames"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFontNames(char **)
     * }
     */
    public static FunctionDescriptor XFreeFontNames$descriptor() {
        return XFreeFontNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFontNames(char **)
     * }
     */
    public static MethodHandle XFreeFontNames$handle() {
        return XFreeFontNames.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeFontNames(char **)
     * }
     */
    public static int XFreeFontNames(MemorySegment x0) {
        var mh$ = XFreeFontNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontNames", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeFontPath"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFontPath(char **)
     * }
     */
    public static FunctionDescriptor XFreeFontPath$descriptor() {
        return XFreeFontPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFontPath(char **)
     * }
     */
    public static MethodHandle XFreeFontPath$handle() {
        return XFreeFontPath.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeFontPath(char **)
     * }
     */
    public static int XFreeFontPath(MemorySegment x0) {
        var mh$ = XFreeFontPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontPath", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeGC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeGC(Display *, GC)
     * }
     */
    public static FunctionDescriptor XFreeGC$descriptor() {
        return XFreeGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeGC(Display *, GC)
     * }
     */
    public static MethodHandle XFreeGC$handle() {
        return XFreeGC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeGC(Display *, GC)
     * }
     */
    public static int XFreeGC(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeGC", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeModifiermap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeModifiermap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeModifiermap(XModifierKeymap *)
     * }
     */
    public static FunctionDescriptor XFreeModifiermap$descriptor() {
        return XFreeModifiermap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeModifiermap(XModifierKeymap *)
     * }
     */
    public static MethodHandle XFreeModifiermap$handle() {
        return XFreeModifiermap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreeModifiermap(XModifierKeymap *)
     * }
     */
    public static int XFreeModifiermap(MemorySegment x0) {
        var mh$ = XFreeModifiermap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeModifiermap", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreePixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreePixmap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreePixmap(Display *, Pixmap)
     * }
     */
    public static FunctionDescriptor XFreePixmap$descriptor() {
        return XFreePixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreePixmap(Display *, Pixmap)
     * }
     */
    public static MethodHandle XFreePixmap$handle() {
        return XFreePixmap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFreePixmap(Display *, Pixmap)
     * }
     */
    public static int XFreePixmap(MemorySegment x0, long x1) {
        var mh$ = XFreePixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreePixmap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGeometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XGeometry$descriptor() {
        return XGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *)
     * }
     */
    public static MethodHandle XGeometry$handle() {
        return XGeometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *)
     * }
     */
    public static int XGeometry(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, MemorySegment x9, MemorySegment x10, MemorySegment x11, MemorySegment x12) {
        var mh$ = XGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGeometry", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetErrorDatabaseText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetErrorDatabaseText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int)
     * }
     */
    public static FunctionDescriptor XGetErrorDatabaseText$descriptor() {
        return XGetErrorDatabaseText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int)
     * }
     */
    public static MethodHandle XGetErrorDatabaseText$handle() {
        return XGetErrorDatabaseText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int)
     * }
     */
    public static int XGetErrorDatabaseText(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5) {
        var mh$ = XGetErrorDatabaseText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetErrorDatabaseText", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetErrorText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetErrorText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetErrorText(Display *, int, char *, int)
     * }
     */
    public static FunctionDescriptor XGetErrorText$descriptor() {
        return XGetErrorText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetErrorText(Display *, int, char *, int)
     * }
     */
    public static MethodHandle XGetErrorText$handle() {
        return XGetErrorText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetErrorText(Display *, int, char *, int)
     * }
     */
    public static int XGetErrorText(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = XGetErrorText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetErrorText", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetFontProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetFontProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetFontProperty(XFontStruct *, Atom, unsigned long *)
     * }
     */
    public static FunctionDescriptor XGetFontProperty$descriptor() {
        return XGetFontProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetFontProperty(XFontStruct *, Atom, unsigned long *)
     * }
     */
    public static MethodHandle XGetFontProperty$handle() {
        return XGetFontProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetFontProperty(XFontStruct *, Atom, unsigned long *)
     * }
     */
    public static int XGetFontProperty(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetFontProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetFontProperty", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetGCValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetGCValues"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetGCValues(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static FunctionDescriptor XGetGCValues$descriptor() {
        return XGetGCValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetGCValues(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static MethodHandle XGetGCValues$handle() {
        return XGetGCValues.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetGCValues(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static int XGetGCValues(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XGetGCValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetGCValues", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetGeometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XGetGeometry$descriptor() {
        return XGetGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XGetGeometry$handle() {
        return XGetGeometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *)
     * }
     */
    public static int XGetGeometry(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XGetGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetGeometry", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetIconName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetIconName(Display *, Window, char **)
     * }
     */
    public static FunctionDescriptor XGetIconName$descriptor() {
        return XGetIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetIconName(Display *, Window, char **)
     * }
     */
    public static MethodHandle XGetIconName$handle() {
        return XGetIconName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetIconName(Display *, Window, char **)
     * }
     */
    public static int XGetIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetIconName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetInputFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetInputFocus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetInputFocus(Display *, Window *, int *)
     * }
     */
    public static FunctionDescriptor XGetInputFocus$descriptor() {
        return XGetInputFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetInputFocus(Display *, Window *, int *)
     * }
     */
    public static MethodHandle XGetInputFocus$handle() {
        return XGetInputFocus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetInputFocus(Display *, Window *, int *)
     * }
     */
    public static int XGetInputFocus(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XGetInputFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetInputFocus", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetKeyboardControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetKeyboardControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetKeyboardControl(Display *, XKeyboardState *)
     * }
     */
    public static FunctionDescriptor XGetKeyboardControl$descriptor() {
        return XGetKeyboardControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetKeyboardControl(Display *, XKeyboardState *)
     * }
     */
    public static MethodHandle XGetKeyboardControl$handle() {
        return XGetKeyboardControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetKeyboardControl(Display *, XKeyboardState *)
     * }
     */
    public static int XGetKeyboardControl(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetKeyboardControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetKeyboardControl", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetPointerControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetPointerControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetPointerControl(Display *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XGetPointerControl$descriptor() {
        return XGetPointerControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetPointerControl(Display *, int *, int *, int *)
     * }
     */
    public static MethodHandle XGetPointerControl$handle() {
        return XGetPointerControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetPointerControl(Display *, int *, int *, int *)
     * }
     */
    public static int XGetPointerControl(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetPointerControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetPointerControl", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetPointerMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetPointerMapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetPointerMapping(Display *, unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XGetPointerMapping$descriptor() {
        return XGetPointerMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetPointerMapping(Display *, unsigned char *, int)
     * }
     */
    public static MethodHandle XGetPointerMapping$handle() {
        return XGetPointerMapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetPointerMapping(Display *, unsigned char *, int)
     * }
     */
    public static int XGetPointerMapping(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XGetPointerMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetPointerMapping", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetScreenSaver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetScreenSaver(Display *, int *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XGetScreenSaver$descriptor() {
        return XGetScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetScreenSaver(Display *, int *, int *, int *, int *)
     * }
     */
    public static MethodHandle XGetScreenSaver$handle() {
        return XGetScreenSaver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetScreenSaver(Display *, int *, int *, int *, int *)
     * }
     */
    public static int XGetScreenSaver(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XGetScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetScreenSaver", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetTransientForHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetTransientForHint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetTransientForHint(Display *, Window, Window *)
     * }
     */
    public static FunctionDescriptor XGetTransientForHint$descriptor() {
        return XGetTransientForHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetTransientForHint(Display *, Window, Window *)
     * }
     */
    public static MethodHandle XGetTransientForHint$handle() {
        return XGetTransientForHint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetTransientForHint(Display *, Window, Window *)
     * }
     */
    public static int XGetTransientForHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetTransientForHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetTransientForHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWindowProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWindowProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWindowProperty(Display *, Window, Atom, long, long, int, Atom, Atom *, int *, unsigned long *, unsigned long *, unsigned char **)
     * }
     */
    public static FunctionDescriptor XGetWindowProperty$descriptor() {
        return XGetWindowProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWindowProperty(Display *, Window, Atom, long, long, int, Atom, Atom *, int *, unsigned long *, unsigned long *, unsigned char **)
     * }
     */
    public static MethodHandle XGetWindowProperty$handle() {
        return XGetWindowProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWindowProperty(Display *, Window, Atom, long, long, int, Atom, Atom *, int *, unsigned long *, unsigned long *, unsigned char **)
     * }
     */
    public static int XGetWindowProperty(MemorySegment x0, long x1, long x2, long x3, long x4, int x5, long x6, MemorySegment x7, MemorySegment x8, MemorySegment x9, MemorySegment x10, MemorySegment x11) {
        var mh$ = XGetWindowProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWindowProperty", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWindowAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWindowAttributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *)
     * }
     */
    public static FunctionDescriptor XGetWindowAttributes$descriptor() {
        return XGetWindowAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *)
     * }
     */
    public static MethodHandle XGetWindowAttributes$handle() {
        return XGetWindowAttributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *)
     * }
     */
    public static int XGetWindowAttributes(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWindowAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWindowAttributes", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGrabButton"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor)
     * }
     */
    public static FunctionDescriptor XGrabButton$descriptor() {
        return XGrabButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor)
     * }
     */
    public static MethodHandle XGrabButton$handle() {
        return XGrabButton.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor)
     * }
     */
    public static int XGrabButton(MemorySegment x0, int x1, int x2, long x3, int x4, int x5, int x6, int x7, long x8, long x9) {
        var mh$ = XGrabButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabButton", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGrabKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int)
     * }
     */
    public static FunctionDescriptor XGrabKey$descriptor() {
        return XGrabKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int)
     * }
     */
    public static MethodHandle XGrabKey$handle() {
        return XGrabKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int)
     * }
     */
    public static int XGrabKey(MemorySegment x0, int x1, int x2, long x3, int x4, int x5, int x6) {
        var mh$ = XGrabKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabKey", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabKeyboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGrabKeyboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabKeyboard(Display *, Window, int, int, int, Time)
     * }
     */
    public static FunctionDescriptor XGrabKeyboard$descriptor() {
        return XGrabKeyboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabKeyboard(Display *, Window, int, int, int, Time)
     * }
     */
    public static MethodHandle XGrabKeyboard$handle() {
        return XGrabKeyboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGrabKeyboard(Display *, Window, int, int, int, Time)
     * }
     */
    public static int XGrabKeyboard(MemorySegment x0, long x1, int x2, int x3, int x4, long x5) {
        var mh$ = XGrabKeyboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabKeyboard", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGrabPointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time)
     * }
     */
    public static FunctionDescriptor XGrabPointer$descriptor() {
        return XGrabPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time)
     * }
     */
    public static MethodHandle XGrabPointer$handle() {
        return XGrabPointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time)
     * }
     */
    public static int XGrabPointer(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, long x7, long x8) {
        var mh$ = XGrabPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabPointer", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGrabServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabServer(Display *)
     * }
     */
    public static FunctionDescriptor XGrabServer$descriptor() {
        return XGrabServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabServer(Display *)
     * }
     */
    public static MethodHandle XGrabServer$handle() {
        return XGrabServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGrabServer(Display *)
     * }
     */
    public static int XGrabServer(MemorySegment x0) {
        var mh$ = XGrabServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabServer", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XHeightMMOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XHeightMMOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XHeightMMOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XHeightMMOfScreen$descriptor() {
        return XHeightMMOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XHeightMMOfScreen(Screen *)
     * }
     */
    public static MethodHandle XHeightMMOfScreen$handle() {
        return XHeightMMOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XHeightMMOfScreen(Screen *)
     * }
     */
    public static int XHeightMMOfScreen(MemorySegment x0) {
        var mh$ = XHeightMMOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XHeightMMOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XHeightOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XHeightOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XHeightOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XHeightOfScreen$descriptor() {
        return XHeightOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XHeightOfScreen(Screen *)
     * }
     */
    public static MethodHandle XHeightOfScreen$handle() {
        return XHeightOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XHeightOfScreen(Screen *)
     * }
     */
    public static int XHeightOfScreen(MemorySegment x0) {
        var mh$ = XHeightOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XHeightOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XIfEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XIfEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static FunctionDescriptor XIfEvent$descriptor() {
        return XIfEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MethodHandle XIfEvent$handle() {
        return XIfEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static int XIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XIfEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIfEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XImageByteOrder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XImageByteOrder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XImageByteOrder(Display *)
     * }
     */
    public static FunctionDescriptor XImageByteOrder$descriptor() {
        return XImageByteOrder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XImageByteOrder(Display *)
     * }
     */
    public static MethodHandle XImageByteOrder$handle() {
        return XImageByteOrder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XImageByteOrder(Display *)
     * }
     */
    public static int XImageByteOrder(MemorySegment x0) {
        var mh$ = XImageByteOrder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XImageByteOrder", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInstallColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInstallColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInstallColormap(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XInstallColormap$descriptor() {
        return XInstallColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInstallColormap(Display *, Colormap)
     * }
     */
    public static MethodHandle XInstallColormap$handle() {
        return XInstallColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XInstallColormap(Display *, Colormap)
     * }
     */
    public static int XInstallColormap(MemorySegment x0, long x1) {
        var mh$ = XInstallColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInstallColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKeysymToKeycode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_CHAR,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XKeysymToKeycode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeyCode XKeysymToKeycode(Display *, KeySym)
     * }
     */
    public static FunctionDescriptor XKeysymToKeycode$descriptor() {
        return XKeysymToKeycode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeyCode XKeysymToKeycode(Display *, KeySym)
     * }
     */
    public static MethodHandle XKeysymToKeycode$handle() {
        return XKeysymToKeycode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern KeyCode XKeysymToKeycode(Display *, KeySym)
     * }
     */
    public static byte XKeysymToKeycode(MemorySegment x0, long x1) {
        var mh$ = XKeysymToKeycode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKeysymToKeycode", x0, x1);
            }
            return (byte)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKillClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XKillClient"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XKillClient(Display *, XID)
     * }
     */
    public static FunctionDescriptor XKillClient$descriptor() {
        return XKillClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XKillClient(Display *, XID)
     * }
     */
    public static MethodHandle XKillClient$handle() {
        return XKillClient.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XKillClient(Display *, XID)
     * }
     */
    public static int XKillClient(MemorySegment x0, long x1) {
        var mh$ = XKillClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKillClient", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLookupColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLookupColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static FunctionDescriptor XLookupColor$descriptor() {
        return XLookupColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static MethodHandle XLookupColor$handle() {
        return XLookupColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static int XLookupColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XLookupColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLookupColor", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLowerWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLowerWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XLowerWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XLowerWindow$descriptor() {
        return XLowerWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XLowerWindow(Display *, Window)
     * }
     */
    public static MethodHandle XLowerWindow$handle() {
        return XLowerWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XLowerWindow(Display *, Window)
     * }
     */
    public static int XLowerWindow(MemorySegment x0, long x1) {
        var mh$ = XLowerWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLowerWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMapRaised {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMapRaised"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMapRaised(Display *, Window)
     * }
     */
    public static FunctionDescriptor XMapRaised$descriptor() {
        return XMapRaised.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMapRaised(Display *, Window)
     * }
     */
    public static MethodHandle XMapRaised$handle() {
        return XMapRaised.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMapRaised(Display *, Window)
     * }
     */
    public static int XMapRaised(MemorySegment x0, long x1) {
        var mh$ = XMapRaised.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMapRaised", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMapSubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMapSubwindows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMapSubwindows(Display *, Window)
     * }
     */
    public static FunctionDescriptor XMapSubwindows$descriptor() {
        return XMapSubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMapSubwindows(Display *, Window)
     * }
     */
    public static MethodHandle XMapSubwindows$handle() {
        return XMapSubwindows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMapSubwindows(Display *, Window)
     * }
     */
    public static int XMapSubwindows(MemorySegment x0, long x1) {
        var mh$ = XMapSubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMapSubwindows", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMapWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMapWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMapWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XMapWindow$descriptor() {
        return XMapWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMapWindow(Display *, Window)
     * }
     */
    public static MethodHandle XMapWindow$handle() {
        return XMapWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMapWindow(Display *, Window)
     * }
     */
    public static int XMapWindow(MemorySegment x0, long x1) {
        var mh$ = XMapWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMapWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMaskEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMaskEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XMaskEvent$descriptor() {
        return XMaskEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static MethodHandle XMaskEvent$handle() {
        return XMaskEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static int XMaskEvent(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XMaskEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMaskEvent", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMaxCmapsOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMaxCmapsOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMaxCmapsOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XMaxCmapsOfScreen$descriptor() {
        return XMaxCmapsOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMaxCmapsOfScreen(Screen *)
     * }
     */
    public static MethodHandle XMaxCmapsOfScreen$handle() {
        return XMaxCmapsOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMaxCmapsOfScreen(Screen *)
     * }
     */
    public static int XMaxCmapsOfScreen(MemorySegment x0) {
        var mh$ = XMaxCmapsOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMaxCmapsOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMinCmapsOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMinCmapsOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMinCmapsOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XMinCmapsOfScreen$descriptor() {
        return XMinCmapsOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMinCmapsOfScreen(Screen *)
     * }
     */
    public static MethodHandle XMinCmapsOfScreen$handle() {
        return XMinCmapsOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMinCmapsOfScreen(Screen *)
     * }
     */
    public static int XMinCmapsOfScreen(MemorySegment x0) {
        var mh$ = XMinCmapsOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMinCmapsOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMoveResizeWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMoveResizeWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XMoveResizeWindow$descriptor() {
        return XMoveResizeWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XMoveResizeWindow$handle() {
        return XMoveResizeWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XMoveResizeWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5) {
        var mh$ = XMoveResizeWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMoveResizeWindow", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMoveWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMoveWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMoveWindow(Display *, Window, int, int)
     * }
     */
    public static FunctionDescriptor XMoveWindow$descriptor() {
        return XMoveWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMoveWindow(Display *, Window, int, int)
     * }
     */
    public static MethodHandle XMoveWindow$handle() {
        return XMoveWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMoveWindow(Display *, Window, int, int)
     * }
     */
    public static int XMoveWindow(MemorySegment x0, long x1, int x2, int x3) {
        var mh$ = XMoveWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMoveWindow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNextEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XNextEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XNextEvent(Display *, XEvent *)
     * }
     */
    public static FunctionDescriptor XNextEvent$descriptor() {
        return XNextEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XNextEvent(Display *, XEvent *)
     * }
     */
    public static MethodHandle XNextEvent$handle() {
        return XNextEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XNextEvent(Display *, XEvent *)
     * }
     */
    public static int XNextEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XNextEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNextEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNoOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XNoOp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XNoOp(Display *)
     * }
     */
    public static FunctionDescriptor XNoOp$descriptor() {
        return XNoOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XNoOp(Display *)
     * }
     */
    public static MethodHandle XNoOp$handle() {
        return XNoOp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XNoOp(Display *)
     * }
     */
    public static int XNoOp(MemorySegment x0) {
        var mh$ = XNoOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNoOp", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XParseColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XParseColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XParseColor(Display *, Colormap, const char *, XColor *)
     * }
     */
    public static FunctionDescriptor XParseColor$descriptor() {
        return XParseColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XParseColor(Display *, Colormap, const char *, XColor *)
     * }
     */
    public static MethodHandle XParseColor$handle() {
        return XParseColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XParseColor(Display *, Colormap, const char *, XColor *)
     * }
     */
    public static int XParseColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XParseColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XParseColor", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XParseGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XParseGeometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XParseGeometry$descriptor() {
        return XParseGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XParseGeometry$handle() {
        return XParseGeometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *)
     * }
     */
    public static int XParseGeometry(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XParseGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XParseGeometry", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPeekEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPeekEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPeekEvent(Display *, XEvent *)
     * }
     */
    public static FunctionDescriptor XPeekEvent$descriptor() {
        return XPeekEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPeekEvent(Display *, XEvent *)
     * }
     */
    public static MethodHandle XPeekEvent$handle() {
        return XPeekEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XPeekEvent(Display *, XEvent *)
     * }
     */
    public static int XPeekEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XPeekEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPeekEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPeekIfEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPeekIfEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static FunctionDescriptor XPeekIfEvent$descriptor() {
        return XPeekIfEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MethodHandle XPeekIfEvent$handle() {
        return XPeekIfEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static int XPeekIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XPeekIfEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPeekIfEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPending(Display *)
     * }
     */
    public static FunctionDescriptor XPending$descriptor() {
        return XPending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPending(Display *)
     * }
     */
    public static MethodHandle XPending$handle() {
        return XPending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XPending(Display *)
     * }
     */
    public static int XPending(MemorySegment x0) {
        var mh$ = XPending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPending", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPlanesOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPlanesOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPlanesOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XPlanesOfScreen$descriptor() {
        return XPlanesOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPlanesOfScreen(Screen *)
     * }
     */
    public static MethodHandle XPlanesOfScreen$handle() {
        return XPlanesOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XPlanesOfScreen(Screen *)
     * }
     */
    public static int XPlanesOfScreen(MemorySegment x0) {
        var mh$ = XPlanesOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPlanesOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XProtocolRevision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XProtocolRevision"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XProtocolRevision(Display *)
     * }
     */
    public static FunctionDescriptor XProtocolRevision$descriptor() {
        return XProtocolRevision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XProtocolRevision(Display *)
     * }
     */
    public static MethodHandle XProtocolRevision$handle() {
        return XProtocolRevision.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XProtocolRevision(Display *)
     * }
     */
    public static int XProtocolRevision(MemorySegment x0) {
        var mh$ = XProtocolRevision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XProtocolRevision", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XProtocolVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XProtocolVersion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XProtocolVersion(Display *)
     * }
     */
    public static FunctionDescriptor XProtocolVersion$descriptor() {
        return XProtocolVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XProtocolVersion(Display *)
     * }
     */
    public static MethodHandle XProtocolVersion$handle() {
        return XProtocolVersion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XProtocolVersion(Display *)
     * }
     */
    public static int XProtocolVersion(MemorySegment x0) {
        var mh$ = XProtocolVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XProtocolVersion", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPutBackEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPutBackEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPutBackEvent(Display *, XEvent *)
     * }
     */
    public static FunctionDescriptor XPutBackEvent$descriptor() {
        return XPutBackEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPutBackEvent(Display *, XEvent *)
     * }
     */
    public static MethodHandle XPutBackEvent$handle() {
        return XPutBackEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XPutBackEvent(Display *, XEvent *)
     * }
     */
    public static int XPutBackEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XPutBackEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPutBackEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPutImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPutImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XPutImage$descriptor() {
        return XPutImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XPutImage$handle() {
        return XPutImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XPutImage(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9) {
        var mh$ = XPutImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPutImage", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQLength"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQLength(Display *)
     * }
     */
    public static FunctionDescriptor XQLength$descriptor() {
        return XQLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQLength(Display *)
     * }
     */
    public static MethodHandle XQLength$handle() {
        return XQLength.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQLength(Display *)
     * }
     */
    public static int XQLength(MemorySegment x0) {
        var mh$ = XQLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQLength", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryBestCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestCursor$descriptor() {
        return XQueryBestCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestCursor$handle() {
        return XQueryBestCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestCursor(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestCursor", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryBestSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestSize$descriptor() {
        return XQueryBestSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestSize$handle() {
        return XQueryBestSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestSize(MemorySegment x0, int x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XQueryBestSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestSize", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryBestStipple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestStipple$descriptor() {
        return XQueryBestStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestStipple$handle() {
        return XQueryBestStipple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestStipple(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestStipple", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryBestTile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestTile$descriptor() {
        return XQueryBestTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestTile$handle() {
        return XQueryBestTile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestTile(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestTile", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryColor(Display *, Colormap, XColor *)
     * }
     */
    public static FunctionDescriptor XQueryColor$descriptor() {
        return XQueryColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryColor(Display *, Colormap, XColor *)
     * }
     */
    public static MethodHandle XQueryColor$handle() {
        return XQueryColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryColor(Display *, Colormap, XColor *)
     * }
     */
    public static int XQueryColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XQueryColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryColors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static FunctionDescriptor XQueryColors$descriptor() {
        return XQueryColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static MethodHandle XQueryColors$handle() {
        return XQueryColors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static int XQueryColors(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XQueryColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryColors", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryExtension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryExtension"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryExtension(Display *, const char *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XQueryExtension$descriptor() {
        return XQueryExtension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryExtension(Display *, const char *, int *, int *, int *)
     * }
     */
    public static MethodHandle XQueryExtension$handle() {
        return XQueryExtension.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryExtension(Display *, const char *, int *, int *, int *)
     * }
     */
    public static int XQueryExtension(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XQueryExtension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryExtension", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryKeymap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryKeymap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryKeymap(Display *, char [32])
     * }
     */
    public static FunctionDescriptor XQueryKeymap$descriptor() {
        return XQueryKeymap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryKeymap(Display *, char [32])
     * }
     */
    public static MethodHandle XQueryKeymap$handle() {
        return XQueryKeymap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryKeymap(Display *, char [32])
     * }
     */
    public static int XQueryKeymap(MemorySegment x0, MemorySegment x1) {
        var mh$ = XQueryKeymap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryKeymap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryPointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryPointer$descriptor() {
        return XQueryPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryPointer$handle() {
        return XQueryPointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *)
     * }
     */
    public static int XQueryPointer(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XQueryPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryPointer", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryTextExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XQueryTextExtents$descriptor() {
        return XQueryTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XQueryTextExtents$handle() {
        return XQueryTextExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XQueryTextExtents(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XQueryTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryTextExtents", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryTextExtents16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryTextExtents16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XQueryTextExtents16$descriptor() {
        return XQueryTextExtents16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XQueryTextExtents16$handle() {
        return XQueryTextExtents16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XQueryTextExtents16(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XQueryTextExtents16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryTextExtents16", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryTree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XQueryTree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryTree$descriptor() {
        return XQueryTree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *)
     * }
     */
    public static MethodHandle XQueryTree$handle() {
        return XQueryTree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *)
     * }
     */
    public static int XQueryTree(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryTree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryTree", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRaiseWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRaiseWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRaiseWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XRaiseWindow$descriptor() {
        return XRaiseWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRaiseWindow(Display *, Window)
     * }
     */
    public static MethodHandle XRaiseWindow$handle() {
        return XRaiseWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRaiseWindow(Display *, Window)
     * }
     */
    public static int XRaiseWindow(MemorySegment x0, long x1) {
        var mh$ = XRaiseWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRaiseWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReadBitmapFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XReadBitmapFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *)
     * }
     */
    public static FunctionDescriptor XReadBitmapFile$descriptor() {
        return XReadBitmapFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *)
     * }
     */
    public static MethodHandle XReadBitmapFile$handle() {
        return XReadBitmapFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *)
     * }
     */
    public static int XReadBitmapFile(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XReadBitmapFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReadBitmapFile", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReadBitmapFileData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XReadBitmapFileData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned char **, int *, int *)
     * }
     */
    public static FunctionDescriptor XReadBitmapFileData$descriptor() {
        return XReadBitmapFileData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned char **, int *, int *)
     * }
     */
    public static MethodHandle XReadBitmapFileData$handle() {
        return XReadBitmapFileData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned char **, int *, int *)
     * }
     */
    public static int XReadBitmapFileData(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XReadBitmapFileData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReadBitmapFileData", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRebindKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRebindKeysym"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XRebindKeysym$descriptor() {
        return XRebindKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned char *, int)
     * }
     */
    public static MethodHandle XRebindKeysym$handle() {
        return XRebindKeysym.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned char *, int)
     * }
     */
    public static int XRebindKeysym(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, int x5) {
        var mh$ = XRebindKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRebindKeysym", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRecolorCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRecolorCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *)
     * }
     */
    public static FunctionDescriptor XRecolorCursor$descriptor() {
        return XRecolorCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *)
     * }
     */
    public static MethodHandle XRecolorCursor$handle() {
        return XRecolorCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *)
     * }
     */
    public static int XRecolorCursor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XRecolorCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRecolorCursor", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRefreshKeyboardMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRefreshKeyboardMapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRefreshKeyboardMapping(XMappingEvent *)
     * }
     */
    public static FunctionDescriptor XRefreshKeyboardMapping$descriptor() {
        return XRefreshKeyboardMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRefreshKeyboardMapping(XMappingEvent *)
     * }
     */
    public static MethodHandle XRefreshKeyboardMapping$handle() {
        return XRefreshKeyboardMapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRefreshKeyboardMapping(XMappingEvent *)
     * }
     */
    public static int XRefreshKeyboardMapping(MemorySegment x0) {
        var mh$ = XRefreshKeyboardMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRefreshKeyboardMapping", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveFromSaveSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRemoveFromSaveSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRemoveFromSaveSet(Display *, Window)
     * }
     */
    public static FunctionDescriptor XRemoveFromSaveSet$descriptor() {
        return XRemoveFromSaveSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRemoveFromSaveSet(Display *, Window)
     * }
     */
    public static MethodHandle XRemoveFromSaveSet$handle() {
        return XRemoveFromSaveSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRemoveFromSaveSet(Display *, Window)
     * }
     */
    public static int XRemoveFromSaveSet(MemorySegment x0, long x1) {
        var mh$ = XRemoveFromSaveSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveFromSaveSet", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRemoveHost"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRemoveHost(Display *, XHostAddress *)
     * }
     */
    public static FunctionDescriptor XRemoveHost$descriptor() {
        return XRemoveHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRemoveHost(Display *, XHostAddress *)
     * }
     */
    public static MethodHandle XRemoveHost$handle() {
        return XRemoveHost.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRemoveHost(Display *, XHostAddress *)
     * }
     */
    public static int XRemoveHost(MemorySegment x0, MemorySegment x1) {
        var mh$ = XRemoveHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveHost", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveHosts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRemoveHosts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRemoveHosts(Display *, XHostAddress *, int)
     * }
     */
    public static FunctionDescriptor XRemoveHosts$descriptor() {
        return XRemoveHosts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRemoveHosts(Display *, XHostAddress *, int)
     * }
     */
    public static MethodHandle XRemoveHosts$handle() {
        return XRemoveHosts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRemoveHosts(Display *, XHostAddress *, int)
     * }
     */
    public static int XRemoveHosts(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XRemoveHosts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveHosts", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReparentWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XReparentWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReparentWindow(Display *, Window, Window, int, int)
     * }
     */
    public static FunctionDescriptor XReparentWindow$descriptor() {
        return XReparentWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReparentWindow(Display *, Window, Window, int, int)
     * }
     */
    public static MethodHandle XReparentWindow$handle() {
        return XReparentWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XReparentWindow(Display *, Window, Window, int, int)
     * }
     */
    public static int XReparentWindow(MemorySegment x0, long x1, long x2, int x3, int x4) {
        var mh$ = XReparentWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReparentWindow", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XResetScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XResetScreenSaver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XResetScreenSaver(Display *)
     * }
     */
    public static FunctionDescriptor XResetScreenSaver$descriptor() {
        return XResetScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XResetScreenSaver(Display *)
     * }
     */
    public static MethodHandle XResetScreenSaver$handle() {
        return XResetScreenSaver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XResetScreenSaver(Display *)
     * }
     */
    public static int XResetScreenSaver(MemorySegment x0) {
        var mh$ = XResetScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XResetScreenSaver", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XResizeWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XResizeWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XResizeWindow(Display *, Window, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XResizeWindow$descriptor() {
        return XResizeWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XResizeWindow(Display *, Window, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XResizeWindow$handle() {
        return XResizeWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XResizeWindow(Display *, Window, unsigned int, unsigned int)
     * }
     */
    public static int XResizeWindow(MemorySegment x0, long x1, int x2, int x3) {
        var mh$ = XResizeWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XResizeWindow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRestackWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRestackWindows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRestackWindows(Display *, Window *, int)
     * }
     */
    public static FunctionDescriptor XRestackWindows$descriptor() {
        return XRestackWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRestackWindows(Display *, Window *, int)
     * }
     */
    public static MethodHandle XRestackWindows$handle() {
        return XRestackWindows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRestackWindows(Display *, Window *, int)
     * }
     */
    public static int XRestackWindows(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XRestackWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRestackWindows", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRotateBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRotateBuffers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRotateBuffers(Display *, int)
     * }
     */
    public static FunctionDescriptor XRotateBuffers$descriptor() {
        return XRotateBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRotateBuffers(Display *, int)
     * }
     */
    public static MethodHandle XRotateBuffers$handle() {
        return XRotateBuffers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRotateBuffers(Display *, int)
     * }
     */
    public static int XRotateBuffers(MemorySegment x0, int x1) {
        var mh$ = XRotateBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRotateBuffers", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRotateWindowProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRotateWindowProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRotateWindowProperties(Display *, Window, Atom *, int, int)
     * }
     */
    public static FunctionDescriptor XRotateWindowProperties$descriptor() {
        return XRotateWindowProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRotateWindowProperties(Display *, Window, Atom *, int, int)
     * }
     */
    public static MethodHandle XRotateWindowProperties$handle() {
        return XRotateWindowProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRotateWindowProperties(Display *, Window, Atom *, int, int)
     * }
     */
    public static int XRotateWindowProperties(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XRotateWindowProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRotateWindowProperties", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XScreenCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XScreenCount(Display *)
     * }
     */
    public static FunctionDescriptor XScreenCount$descriptor() {
        return XScreenCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XScreenCount(Display *)
     * }
     */
    public static MethodHandle XScreenCount$handle() {
        return XScreenCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XScreenCount(Display *)
     * }
     */
    public static int XScreenCount(MemorySegment x0) {
        var mh$ = XScreenCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenCount", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSelectInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSelectInput"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSelectInput(Display *, Window, long)
     * }
     */
    public static FunctionDescriptor XSelectInput$descriptor() {
        return XSelectInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSelectInput(Display *, Window, long)
     * }
     */
    public static MethodHandle XSelectInput$handle() {
        return XSelectInput.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSelectInput(Display *, Window, long)
     * }
     */
    public static int XSelectInput(MemorySegment x0, long x1, long x2) {
        var mh$ = XSelectInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSelectInput", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSendEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSendEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSendEvent(Display *, Window, int, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XSendEvent$descriptor() {
        return XSendEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSendEvent(Display *, Window, int, long, XEvent *)
     * }
     */
    public static MethodHandle XSendEvent$handle() {
        return XSendEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSendEvent(Display *, Window, int, long, XEvent *)
     * }
     */
    public static int XSendEvent(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4) {
        var mh$ = XSendEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSendEvent", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetAccessControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetAccessControl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetAccessControl(Display *, int)
     * }
     */
    public static FunctionDescriptor XSetAccessControl$descriptor() {
        return XSetAccessControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetAccessControl(Display *, int)
     * }
     */
    public static MethodHandle XSetAccessControl$handle() {
        return XSetAccessControl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetAccessControl(Display *, int)
     * }
     */
    public static int XSetAccessControl(MemorySegment x0, int x1) {
        var mh$ = XSetAccessControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetAccessControl", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetArcMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetArcMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetArcMode(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetArcMode$descriptor() {
        return XSetArcMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetArcMode(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetArcMode$handle() {
        return XSetArcMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetArcMode(Display *, GC, int)
     * }
     */
    public static int XSetArcMode(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetArcMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetArcMode", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetBackground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetBackground"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetBackground(Display *, GC, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetBackground$descriptor() {
        return XSetBackground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetBackground(Display *, GC, unsigned long)
     * }
     */
    public static MethodHandle XSetBackground$handle() {
        return XSetBackground.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetBackground(Display *, GC, unsigned long)
     * }
     */
    public static int XSetBackground(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetBackground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetBackground", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClipMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetClipMask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClipMask(Display *, GC, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetClipMask$descriptor() {
        return XSetClipMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClipMask(Display *, GC, Pixmap)
     * }
     */
    public static MethodHandle XSetClipMask$handle() {
        return XSetClipMask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetClipMask(Display *, GC, Pixmap)
     * }
     */
    public static int XSetClipMask(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetClipMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClipMask", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClipOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetClipOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClipOrigin(Display *, GC, int, int)
     * }
     */
    public static FunctionDescriptor XSetClipOrigin$descriptor() {
        return XSetClipOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClipOrigin(Display *, GC, int, int)
     * }
     */
    public static MethodHandle XSetClipOrigin$handle() {
        return XSetClipOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetClipOrigin(Display *, GC, int, int)
     * }
     */
    public static int XSetClipOrigin(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XSetClipOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClipOrigin", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClipRectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetClipRectangles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int)
     * }
     */
    public static FunctionDescriptor XSetClipRectangles$descriptor() {
        return XSetClipRectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int)
     * }
     */
    public static MethodHandle XSetClipRectangles$handle() {
        return XSetClipRectangles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int)
     * }
     */
    public static int XSetClipRectangles(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, int x5, int x6) {
        var mh$ = XSetClipRectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClipRectangles", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetCloseDownMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetCloseDownMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetCloseDownMode(Display *, int)
     * }
     */
    public static FunctionDescriptor XSetCloseDownMode$descriptor() {
        return XSetCloseDownMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetCloseDownMode(Display *, int)
     * }
     */
    public static MethodHandle XSetCloseDownMode$handle() {
        return XSetCloseDownMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetCloseDownMode(Display *, int)
     * }
     */
    public static int XSetCloseDownMode(MemorySegment x0, int x1) {
        var mh$ = XSetCloseDownMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetCloseDownMode", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetCommand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetCommand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetCommand(Display *, Window, char **, int)
     * }
     */
    public static FunctionDescriptor XSetCommand$descriptor() {
        return XSetCommand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetCommand(Display *, Window, char **, int)
     * }
     */
    public static MethodHandle XSetCommand$handle() {
        return XSetCommand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetCommand(Display *, Window, char **, int)
     * }
     */
    public static int XSetCommand(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetCommand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetCommand", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetDashes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetDashes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetDashes(Display *, GC, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XSetDashes$descriptor() {
        return XSetDashes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetDashes(Display *, GC, int, const char *, int)
     * }
     */
    public static MethodHandle XSetDashes$handle() {
        return XSetDashes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetDashes(Display *, GC, int, const char *, int)
     * }
     */
    public static int XSetDashes(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = XSetDashes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetDashes", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFillRule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetFillRule"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFillRule(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetFillRule$descriptor() {
        return XSetFillRule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFillRule(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetFillRule$handle() {
        return XSetFillRule.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetFillRule(Display *, GC, int)
     * }
     */
    public static int XSetFillRule(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFillRule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFillRule", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFillStyle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetFillStyle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFillStyle(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetFillStyle$descriptor() {
        return XSetFillStyle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFillStyle(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetFillStyle$handle() {
        return XSetFillStyle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetFillStyle(Display *, GC, int)
     * }
     */
    public static int XSetFillStyle(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFillStyle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFillStyle", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetFont"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFont(Display *, GC, Font)
     * }
     */
    public static FunctionDescriptor XSetFont$descriptor() {
        return XSetFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFont(Display *, GC, Font)
     * }
     */
    public static MethodHandle XSetFont$handle() {
        return XSetFont.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetFont(Display *, GC, Font)
     * }
     */
    public static int XSetFont(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFont", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFontPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetFontPath"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFontPath(Display *, char **, int)
     * }
     */
    public static FunctionDescriptor XSetFontPath$descriptor() {
        return XSetFontPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFontPath(Display *, char **, int)
     * }
     */
    public static MethodHandle XSetFontPath$handle() {
        return XSetFontPath.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetFontPath(Display *, char **, int)
     * }
     */
    public static int XSetFontPath(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFontPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFontPath", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetForeground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetForeground"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetForeground(Display *, GC, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetForeground$descriptor() {
        return XSetForeground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetForeground(Display *, GC, unsigned long)
     * }
     */
    public static MethodHandle XSetForeground$handle() {
        return XSetForeground.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetForeground(Display *, GC, unsigned long)
     * }
     */
    public static int XSetForeground(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetForeground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetForeground", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetFunction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFunction(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetFunction$descriptor() {
        return XSetFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFunction(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetFunction$handle() {
        return XSetFunction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetFunction(Display *, GC, int)
     * }
     */
    public static int XSetFunction(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFunction", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetGraphicsExposures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetGraphicsExposures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetGraphicsExposures(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetGraphicsExposures$descriptor() {
        return XSetGraphicsExposures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetGraphicsExposures(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetGraphicsExposures$handle() {
        return XSetGraphicsExposures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetGraphicsExposures(Display *, GC, int)
     * }
     */
    public static int XSetGraphicsExposures(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetGraphicsExposures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetGraphicsExposures", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetIconName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetIconName(Display *, Window, const char *)
     * }
     */
    public static FunctionDescriptor XSetIconName$descriptor() {
        return XSetIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetIconName(Display *, Window, const char *)
     * }
     */
    public static MethodHandle XSetIconName$handle() {
        return XSetIconName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetIconName(Display *, Window, const char *)
     * }
     */
    public static int XSetIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetIconName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetInputFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetInputFocus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetInputFocus(Display *, Window, int, Time)
     * }
     */
    public static FunctionDescriptor XSetInputFocus$descriptor() {
        return XSetInputFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetInputFocus(Display *, Window, int, Time)
     * }
     */
    public static MethodHandle XSetInputFocus$handle() {
        return XSetInputFocus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetInputFocus(Display *, Window, int, Time)
     * }
     */
    public static int XSetInputFocus(MemorySegment x0, long x1, int x2, long x3) {
        var mh$ = XSetInputFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetInputFocus", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetLineAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetLineAttributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int)
     * }
     */
    public static FunctionDescriptor XSetLineAttributes$descriptor() {
        return XSetLineAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int)
     * }
     */
    public static MethodHandle XSetLineAttributes$handle() {
        return XSetLineAttributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int)
     * }
     */
    public static int XSetLineAttributes(MemorySegment x0, MemorySegment x1, int x2, int x3, int x4, int x5) {
        var mh$ = XSetLineAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetLineAttributes", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetModifierMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetModifierMapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetModifierMapping(Display *, XModifierKeymap *)
     * }
     */
    public static FunctionDescriptor XSetModifierMapping$descriptor() {
        return XSetModifierMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetModifierMapping(Display *, XModifierKeymap *)
     * }
     */
    public static MethodHandle XSetModifierMapping$handle() {
        return XSetModifierMapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetModifierMapping(Display *, XModifierKeymap *)
     * }
     */
    public static int XSetModifierMapping(MemorySegment x0, MemorySegment x1) {
        var mh$ = XSetModifierMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetModifierMapping", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetPlaneMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetPlaneMask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetPlaneMask(Display *, GC, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetPlaneMask$descriptor() {
        return XSetPlaneMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetPlaneMask(Display *, GC, unsigned long)
     * }
     */
    public static MethodHandle XSetPlaneMask$handle() {
        return XSetPlaneMask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetPlaneMask(Display *, GC, unsigned long)
     * }
     */
    public static int XSetPlaneMask(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetPlaneMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetPlaneMask", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetPointerMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetPointerMapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetPointerMapping(Display *, const unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XSetPointerMapping$descriptor() {
        return XSetPointerMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetPointerMapping(Display *, const unsigned char *, int)
     * }
     */
    public static MethodHandle XSetPointerMapping$handle() {
        return XSetPointerMapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetPointerMapping(Display *, const unsigned char *, int)
     * }
     */
    public static int XSetPointerMapping(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetPointerMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetPointerMapping", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetScreenSaver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetScreenSaver(Display *, int, int, int, int)
     * }
     */
    public static FunctionDescriptor XSetScreenSaver$descriptor() {
        return XSetScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetScreenSaver(Display *, int, int, int, int)
     * }
     */
    public static MethodHandle XSetScreenSaver$handle() {
        return XSetScreenSaver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetScreenSaver(Display *, int, int, int, int)
     * }
     */
    public static int XSetScreenSaver(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = XSetScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetScreenSaver", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetSelectionOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetSelectionOwner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetSelectionOwner(Display *, Atom, Window, Time)
     * }
     */
    public static FunctionDescriptor XSetSelectionOwner$descriptor() {
        return XSetSelectionOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetSelectionOwner(Display *, Atom, Window, Time)
     * }
     */
    public static MethodHandle XSetSelectionOwner$handle() {
        return XSetSelectionOwner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetSelectionOwner(Display *, Atom, Window, Time)
     * }
     */
    public static int XSetSelectionOwner(MemorySegment x0, long x1, long x2, long x3) {
        var mh$ = XSetSelectionOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetSelectionOwner", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetState"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetState(Display *, GC, unsigned long, unsigned long, int, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetState$descriptor() {
        return XSetState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetState(Display *, GC, unsigned long, unsigned long, int, unsigned long)
     * }
     */
    public static MethodHandle XSetState$handle() {
        return XSetState.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetState(Display *, GC, unsigned long, unsigned long, int, unsigned long)
     * }
     */
    public static int XSetState(MemorySegment x0, MemorySegment x1, long x2, long x3, int x4, long x5) {
        var mh$ = XSetState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetState", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetStipple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetStipple(Display *, GC, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetStipple$descriptor() {
        return XSetStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetStipple(Display *, GC, Pixmap)
     * }
     */
    public static MethodHandle XSetStipple$handle() {
        return XSetStipple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetStipple(Display *, GC, Pixmap)
     * }
     */
    public static int XSetStipple(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetStipple", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetSubwindowMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetSubwindowMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetSubwindowMode(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetSubwindowMode$descriptor() {
        return XSetSubwindowMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetSubwindowMode(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetSubwindowMode$handle() {
        return XSetSubwindowMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetSubwindowMode(Display *, GC, int)
     * }
     */
    public static int XSetSubwindowMode(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetSubwindowMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetSubwindowMode", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTSOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetTSOrigin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetTSOrigin(Display *, GC, int, int)
     * }
     */
    public static FunctionDescriptor XSetTSOrigin$descriptor() {
        return XSetTSOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetTSOrigin(Display *, GC, int, int)
     * }
     */
    public static MethodHandle XSetTSOrigin$handle() {
        return XSetTSOrigin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetTSOrigin(Display *, GC, int, int)
     * }
     */
    public static int XSetTSOrigin(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XSetTSOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTSOrigin", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetTile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetTile(Display *, GC, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetTile$descriptor() {
        return XSetTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetTile(Display *, GC, Pixmap)
     * }
     */
    public static MethodHandle XSetTile$handle() {
        return XSetTile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetTile(Display *, GC, Pixmap)
     * }
     */
    public static int XSetTile(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTile", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBackground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWindowBackground"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBackground(Display *, Window, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetWindowBackground$descriptor() {
        return XSetWindowBackground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBackground(Display *, Window, unsigned long)
     * }
     */
    public static MethodHandle XSetWindowBackground$handle() {
        return XSetWindowBackground.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWindowBackground(Display *, Window, unsigned long)
     * }
     */
    public static int XSetWindowBackground(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBackground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBackground", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBackgroundPixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWindowBackgroundPixmap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetWindowBackgroundPixmap$descriptor() {
        return XSetWindowBackgroundPixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap)
     * }
     */
    public static MethodHandle XSetWindowBackgroundPixmap$handle() {
        return XSetWindowBackgroundPixmap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap)
     * }
     */
    public static int XSetWindowBackgroundPixmap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBackgroundPixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBackgroundPixmap", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWindowBorder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBorder(Display *, Window, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetWindowBorder$descriptor() {
        return XSetWindowBorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBorder(Display *, Window, unsigned long)
     * }
     */
    public static MethodHandle XSetWindowBorder$handle() {
        return XSetWindowBorder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWindowBorder(Display *, Window, unsigned long)
     * }
     */
    public static int XSetWindowBorder(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBorder", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBorderPixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWindowBorderPixmap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderPixmap(Display *, Window, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetWindowBorderPixmap$descriptor() {
        return XSetWindowBorderPixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderPixmap(Display *, Window, Pixmap)
     * }
     */
    public static MethodHandle XSetWindowBorderPixmap$handle() {
        return XSetWindowBorderPixmap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWindowBorderPixmap(Display *, Window, Pixmap)
     * }
     */
    public static int XSetWindowBorderPixmap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBorderPixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBorderPixmap", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBorderWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWindowBorderWidth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderWidth(Display *, Window, unsigned int)
     * }
     */
    public static FunctionDescriptor XSetWindowBorderWidth$descriptor() {
        return XSetWindowBorderWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderWidth(Display *, Window, unsigned int)
     * }
     */
    public static MethodHandle XSetWindowBorderWidth$handle() {
        return XSetWindowBorderWidth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWindowBorderWidth(Display *, Window, unsigned int)
     * }
     */
    public static int XSetWindowBorderWidth(MemorySegment x0, long x1, int x2) {
        var mh$ = XSetWindowBorderWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBorderWidth", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWindowColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowColormap(Display *, Window, Colormap)
     * }
     */
    public static FunctionDescriptor XSetWindowColormap$descriptor() {
        return XSetWindowColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowColormap(Display *, Window, Colormap)
     * }
     */
    public static MethodHandle XSetWindowColormap$handle() {
        return XSetWindowColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWindowColormap(Display *, Window, Colormap)
     * }
     */
    public static int XSetWindowColormap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowColormap", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStoreBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreBuffer(Display *, const char *, int, int)
     * }
     */
    public static FunctionDescriptor XStoreBuffer$descriptor() {
        return XStoreBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreBuffer(Display *, const char *, int, int)
     * }
     */
    public static MethodHandle XStoreBuffer$handle() {
        return XStoreBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XStoreBuffer(Display *, const char *, int, int)
     * }
     */
    public static int XStoreBuffer(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XStoreBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreBuffer", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStoreBytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreBytes(Display *, const char *, int)
     * }
     */
    public static FunctionDescriptor XStoreBytes$descriptor() {
        return XStoreBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreBytes(Display *, const char *, int)
     * }
     */
    public static MethodHandle XStoreBytes$handle() {
        return XStoreBytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XStoreBytes(Display *, const char *, int)
     * }
     */
    public static int XStoreBytes(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XStoreBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreBytes", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStoreColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreColor(Display *, Colormap, XColor *)
     * }
     */
    public static FunctionDescriptor XStoreColor$descriptor() {
        return XStoreColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreColor(Display *, Colormap, XColor *)
     * }
     */
    public static MethodHandle XStoreColor$handle() {
        return XStoreColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XStoreColor(Display *, Colormap, XColor *)
     * }
     */
    public static int XStoreColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XStoreColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStoreColors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static FunctionDescriptor XStoreColors$descriptor() {
        return XStoreColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static MethodHandle XStoreColors$handle() {
        return XStoreColors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XStoreColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static int XStoreColors(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XStoreColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreColors", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStoreName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreName(Display *, Window, const char *)
     * }
     */
    public static FunctionDescriptor XStoreName$descriptor() {
        return XStoreName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreName(Display *, Window, const char *)
     * }
     */
    public static MethodHandle XStoreName$handle() {
        return XStoreName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XStoreName(Display *, Window, const char *)
     * }
     */
    public static int XStoreName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XStoreName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreNamedColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStoreNamedColor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreNamedColor(Display *, Colormap, const char *, unsigned long, int)
     * }
     */
    public static FunctionDescriptor XStoreNamedColor$descriptor() {
        return XStoreNamedColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreNamedColor(Display *, Colormap, const char *, unsigned long, int)
     * }
     */
    public static MethodHandle XStoreNamedColor$handle() {
        return XStoreNamedColor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XStoreNamedColor(Display *, Colormap, const char *, unsigned long, int)
     * }
     */
    public static int XStoreNamedColor(MemorySegment x0, long x1, MemorySegment x2, long x3, int x4) {
        var mh$ = XStoreNamedColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreNamedColor", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSync(Display *, int)
     * }
     */
    public static FunctionDescriptor XSync$descriptor() {
        return XSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSync(Display *, int)
     * }
     */
    public static MethodHandle XSync$handle() {
        return XSync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSync(Display *, int)
     * }
     */
    public static int XSync(MemorySegment x0, int x1) {
        var mh$ = XSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSync", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XTextExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XTextExtents$descriptor() {
        return XTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XTextExtents$handle() {
        return XTextExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextExtents", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextExtents16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XTextExtents16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XTextExtents16$descriptor() {
        return XTextExtents16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XTextExtents16$handle() {
        return XTextExtents16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XTextExtents16(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XTextExtents16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextExtents16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XTextWidth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextWidth(XFontStruct *, const char *, int)
     * }
     */
    public static FunctionDescriptor XTextWidth$descriptor() {
        return XTextWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextWidth(XFontStruct *, const char *, int)
     * }
     */
    public static MethodHandle XTextWidth$handle() {
        return XTextWidth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XTextWidth(XFontStruct *, const char *, int)
     * }
     */
    public static int XTextWidth(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XTextWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextWidth", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextWidth16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XTextWidth16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextWidth16(XFontStruct *, const XChar2b *, int)
     * }
     */
    public static FunctionDescriptor XTextWidth16$descriptor() {
        return XTextWidth16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextWidth16(XFontStruct *, const XChar2b *, int)
     * }
     */
    public static MethodHandle XTextWidth16$handle() {
        return XTextWidth16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XTextWidth16(XFontStruct *, const XChar2b *, int)
     * }
     */
    public static int XTextWidth16(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XTextWidth16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextWidth16", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTranslateCoordinates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XTranslateCoordinates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *)
     * }
     */
    public static FunctionDescriptor XTranslateCoordinates$descriptor() {
        return XTranslateCoordinates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *)
     * }
     */
    public static MethodHandle XTranslateCoordinates$handle() {
        return XTranslateCoordinates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *)
     * }
     */
    public static int XTranslateCoordinates(MemorySegment x0, long x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XTranslateCoordinates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTranslateCoordinates", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUndefineCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUndefineCursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUndefineCursor(Display *, Window)
     * }
     */
    public static FunctionDescriptor XUndefineCursor$descriptor() {
        return XUndefineCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUndefineCursor(Display *, Window)
     * }
     */
    public static MethodHandle XUndefineCursor$handle() {
        return XUndefineCursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUndefineCursor(Display *, Window)
     * }
     */
    public static int XUndefineCursor(MemorySegment x0, long x1) {
        var mh$ = XUndefineCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUndefineCursor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUngrabButton"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabButton(Display *, unsigned int, unsigned int, Window)
     * }
     */
    public static FunctionDescriptor XUngrabButton$descriptor() {
        return XUngrabButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabButton(Display *, unsigned int, unsigned int, Window)
     * }
     */
    public static MethodHandle XUngrabButton$handle() {
        return XUngrabButton.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUngrabButton(Display *, unsigned int, unsigned int, Window)
     * }
     */
    public static int XUngrabButton(MemorySegment x0, int x1, int x2, long x3) {
        var mh$ = XUngrabButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabButton", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUngrabKey"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabKey(Display *, int, unsigned int, Window)
     * }
     */
    public static FunctionDescriptor XUngrabKey$descriptor() {
        return XUngrabKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabKey(Display *, int, unsigned int, Window)
     * }
     */
    public static MethodHandle XUngrabKey$handle() {
        return XUngrabKey.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUngrabKey(Display *, int, unsigned int, Window)
     * }
     */
    public static int XUngrabKey(MemorySegment x0, int x1, int x2, long x3) {
        var mh$ = XUngrabKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabKey", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabKeyboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUngrabKeyboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabKeyboard(Display *, Time)
     * }
     */
    public static FunctionDescriptor XUngrabKeyboard$descriptor() {
        return XUngrabKeyboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabKeyboard(Display *, Time)
     * }
     */
    public static MethodHandle XUngrabKeyboard$handle() {
        return XUngrabKeyboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUngrabKeyboard(Display *, Time)
     * }
     */
    public static int XUngrabKeyboard(MemorySegment x0, long x1) {
        var mh$ = XUngrabKeyboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabKeyboard", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUngrabPointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabPointer(Display *, Time)
     * }
     */
    public static FunctionDescriptor XUngrabPointer$descriptor() {
        return XUngrabPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabPointer(Display *, Time)
     * }
     */
    public static MethodHandle XUngrabPointer$handle() {
        return XUngrabPointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUngrabPointer(Display *, Time)
     * }
     */
    public static int XUngrabPointer(MemorySegment x0, long x1) {
        var mh$ = XUngrabPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabPointer", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUngrabServer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabServer(Display *)
     * }
     */
    public static FunctionDescriptor XUngrabServer$descriptor() {
        return XUngrabServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabServer(Display *)
     * }
     */
    public static MethodHandle XUngrabServer$handle() {
        return XUngrabServer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUngrabServer(Display *)
     * }
     */
    public static int XUngrabServer(MemorySegment x0) {
        var mh$ = XUngrabServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabServer", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUninstallColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUninstallColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUninstallColormap(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XUninstallColormap$descriptor() {
        return XUninstallColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUninstallColormap(Display *, Colormap)
     * }
     */
    public static MethodHandle XUninstallColormap$handle() {
        return XUninstallColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUninstallColormap(Display *, Colormap)
     * }
     */
    public static int XUninstallColormap(MemorySegment x0, long x1) {
        var mh$ = XUninstallColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUninstallColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnloadFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnloadFont"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnloadFont(Display *, Font)
     * }
     */
    public static FunctionDescriptor XUnloadFont$descriptor() {
        return XUnloadFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnloadFont(Display *, Font)
     * }
     */
    public static MethodHandle XUnloadFont$handle() {
        return XUnloadFont.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUnloadFont(Display *, Font)
     * }
     */
    public static int XUnloadFont(MemorySegment x0, long x1) {
        var mh$ = XUnloadFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnloadFont", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnmapSubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnmapSubwindows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnmapSubwindows(Display *, Window)
     * }
     */
    public static FunctionDescriptor XUnmapSubwindows$descriptor() {
        return XUnmapSubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnmapSubwindows(Display *, Window)
     * }
     */
    public static MethodHandle XUnmapSubwindows$handle() {
        return XUnmapSubwindows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUnmapSubwindows(Display *, Window)
     * }
     */
    public static int XUnmapSubwindows(MemorySegment x0, long x1) {
        var mh$ = XUnmapSubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnmapSubwindows", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnmapWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnmapWindow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnmapWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XUnmapWindow$descriptor() {
        return XUnmapWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnmapWindow(Display *, Window)
     * }
     */
    public static MethodHandle XUnmapWindow$handle() {
        return XUnmapWindow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUnmapWindow(Display *, Window)
     * }
     */
    public static int XUnmapWindow(MemorySegment x0, long x1) {
        var mh$ = XUnmapWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnmapWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XVendorRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XVendorRelease"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XVendorRelease(Display *)
     * }
     */
    public static FunctionDescriptor XVendorRelease$descriptor() {
        return XVendorRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XVendorRelease(Display *)
     * }
     */
    public static MethodHandle XVendorRelease$handle() {
        return XVendorRelease.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XVendorRelease(Display *)
     * }
     */
    public static int XVendorRelease(MemorySegment x0) {
        var mh$ = XVendorRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XVendorRelease", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWarpPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWarpPointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XWarpPointer$descriptor() {
        return XWarpPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XWarpPointer$handle() {
        return XWarpPointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XWarpPointer(MemorySegment x0, long x1, long x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XWarpPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWarpPointer", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWidthMMOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWidthMMOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWidthMMOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XWidthMMOfScreen$descriptor() {
        return XWidthMMOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWidthMMOfScreen(Screen *)
     * }
     */
    public static MethodHandle XWidthMMOfScreen$handle() {
        return XWidthMMOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XWidthMMOfScreen(Screen *)
     * }
     */
    public static int XWidthMMOfScreen(MemorySegment x0) {
        var mh$ = XWidthMMOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWidthMMOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWidthOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWidthOfScreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWidthOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XWidthOfScreen$descriptor() {
        return XWidthOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWidthOfScreen(Screen *)
     * }
     */
    public static MethodHandle XWidthOfScreen$handle() {
        return XWidthOfScreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XWidthOfScreen(Screen *)
     * }
     */
    public static int XWidthOfScreen(MemorySegment x0) {
        var mh$ = XWidthOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWidthOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWindowEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWindowEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XWindowEvent$descriptor() {
        return XWindowEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static MethodHandle XWindowEvent$handle() {
        return XWindowEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static int XWindowEvent(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XWindowEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWindowEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWriteBitmapFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWriteBitmapFile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XWriteBitmapFile$descriptor() {
        return XWriteBitmapFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XWriteBitmapFile$handle() {
        return XWriteBitmapFile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XWriteBitmapFile(MemorySegment x0, MemorySegment x1, long x2, int x3, int x4, int x5, int x6) {
        var mh$ = XWriteBitmapFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWriteBitmapFile", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSupportsLocale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSupportsLocale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSupportsLocale()
     * }
     */
    public static FunctionDescriptor XSupportsLocale$descriptor() {
        return XSupportsLocale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSupportsLocale()
     * }
     */
    public static MethodHandle XSupportsLocale$handle() {
        return XSupportsLocale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSupportsLocale()
     * }
     */
    public static int XSupportsLocale() {
        var mh$ = XSupportsLocale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSupportsLocale");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetLocaleModifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetLocaleModifiers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XSetLocaleModifiers(const char *)
     * }
     */
    public static FunctionDescriptor XSetLocaleModifiers$descriptor() {
        return XSetLocaleModifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XSetLocaleModifiers(const char *)
     * }
     */
    public static MethodHandle XSetLocaleModifiers$handle() {
        return XSetLocaleModifiers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XSetLocaleModifiers(const char *)
     * }
     */
    public static MemorySegment XSetLocaleModifiers(MemorySegment x0) {
        var mh$ = XSetLocaleModifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetLocaleModifiers", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOpenOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XOpenOM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor XOpenOM$descriptor() {
        return XOpenOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *)
     * }
     */
    public static MethodHandle XOpenOM$handle() {
        return XOpenOM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *)
     * }
     */
    public static MemorySegment XOpenOM(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XOpenOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOpenOM", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCloseOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCloseOM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCloseOM(XOM)
     * }
     */
    public static FunctionDescriptor XCloseOM$descriptor() {
        return XCloseOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCloseOM(XOM)
     * }
     */
    public static MethodHandle XCloseOM$handle() {
        return XCloseOM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCloseOM(XOM)
     * }
     */
    public static int XCloseOM(MemorySegment x0) {
        var mh$ = XCloseOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCloseOM", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetOMValues(XOM, ...)
     * }
     */
    public static class XSetOMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XSetOMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetOMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetOMValues(XOM, ...)
         * }
         */
        public static XSetOMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetOMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetOMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetOMValues(XOM, ...)
     * }
     */
    public static class XGetOMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XGetOMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetOMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetOMValues(XOM, ...)
         * }
         */
        public static XGetOMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetOMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetOMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDisplayOfOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayOfOM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfOM(XOM)
     * }
     */
    public static FunctionDescriptor XDisplayOfOM$descriptor() {
        return XDisplayOfOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfOM(XOM)
     * }
     */
    public static MethodHandle XDisplayOfOM$handle() {
        return XDisplayOfOM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Display *XDisplayOfOM(XOM)
     * }
     */
    public static MemorySegment XDisplayOfOM(MemorySegment x0) {
        var mh$ = XDisplayOfOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayOfOM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLocaleOfOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLocaleOfOM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XLocaleOfOM(XOM)
     * }
     */
    public static FunctionDescriptor XLocaleOfOM$descriptor() {
        return XLocaleOfOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XLocaleOfOM(XOM)
     * }
     */
    public static MethodHandle XLocaleOfOM$handle() {
        return XLocaleOfOM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XLocaleOfOM(XOM)
     * }
     */
    public static MemorySegment XLocaleOfOM(MemorySegment x0) {
        var mh$ = XLocaleOfOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLocaleOfOM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern XOC XCreateOC(XOM, ...)
     * }
     */
    public static class XCreateOC {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XCreateOC");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XCreateOC(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern XOC XCreateOC(XOM, ...)
         * }
         */
        public static XCreateOC makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XCreateOC(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XCreateOC", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDestroyOC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDestroyOC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XDestroyOC(XOC)
     * }
     */
    public static FunctionDescriptor XDestroyOC$descriptor() {
        return XDestroyOC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XDestroyOC(XOC)
     * }
     */
    public static MethodHandle XDestroyOC$handle() {
        return XDestroyOC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XDestroyOC(XOC)
     * }
     */
    public static void XDestroyOC(MemorySegment x0) {
        var mh$ = XDestroyOC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyOC", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOMOfOC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XOMOfOC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XOM XOMOfOC(XOC)
     * }
     */
    public static FunctionDescriptor XOMOfOC$descriptor() {
        return XOMOfOC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XOM XOMOfOC(XOC)
     * }
     */
    public static MethodHandle XOMOfOC$handle() {
        return XOMOfOC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XOM XOMOfOC(XOC)
     * }
     */
    public static MemorySegment XOMOfOC(MemorySegment x0) {
        var mh$ = XOMOfOC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOMOfOC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetOCValues(XOC, ...)
     * }
     */
    public static class XSetOCValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XSetOCValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetOCValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetOCValues(XOC, ...)
         * }
         */
        public static XSetOCValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetOCValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetOCValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetOCValues(XOC, ...)
     * }
     */
    public static class XGetOCValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XGetOCValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetOCValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetOCValues(XOC, ...)
         * }
         */
        public static XGetOCValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetOCValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetOCValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XCreateFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateFontSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **)
     * }
     */
    public static FunctionDescriptor XCreateFontSet$descriptor() {
        return XCreateFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **)
     * }
     */
    public static MethodHandle XCreateFontSet$handle() {
        return XCreateFontSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **)
     * }
     */
    public static MemorySegment XCreateFontSet(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XCreateFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateFontSet", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeFontSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFreeFontSet(Display *, XFontSet)
     * }
     */
    public static FunctionDescriptor XFreeFontSet$descriptor() {
        return XFreeFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFreeFontSet(Display *, XFontSet)
     * }
     */
    public static MethodHandle XFreeFontSet$handle() {
        return XFreeFontSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XFreeFontSet(Display *, XFontSet)
     * }
     */
    public static void XFreeFontSet(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontSet", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFontsOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFontsOfFontSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***)
     * }
     */
    public static FunctionDescriptor XFontsOfFontSet$descriptor() {
        return XFontsOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***)
     * }
     */
    public static MethodHandle XFontsOfFontSet$handle() {
        return XFontsOfFontSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***)
     * }
     */
    public static int XFontsOfFontSet(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XFontsOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFontsOfFontSet", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBaseFontNameListOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XBaseFontNameListOfFontSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XBaseFontNameListOfFontSet(XFontSet)
     * }
     */
    public static FunctionDescriptor XBaseFontNameListOfFontSet$descriptor() {
        return XBaseFontNameListOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XBaseFontNameListOfFontSet(XFontSet)
     * }
     */
    public static MethodHandle XBaseFontNameListOfFontSet$handle() {
        return XBaseFontNameListOfFontSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XBaseFontNameListOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XBaseFontNameListOfFontSet(MemorySegment x0) {
        var mh$ = XBaseFontNameListOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBaseFontNameListOfFontSet", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLocaleOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLocaleOfFontSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XLocaleOfFontSet(XFontSet)
     * }
     */
    public static FunctionDescriptor XLocaleOfFontSet$descriptor() {
        return XLocaleOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XLocaleOfFontSet(XFontSet)
     * }
     */
    public static MethodHandle XLocaleOfFontSet$handle() {
        return XLocaleOfFontSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XLocaleOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XLocaleOfFontSet(MemorySegment x0) {
        var mh$ = XLocaleOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLocaleOfFontSet", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XContextDependentDrawing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XContextDependentDrawing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XContextDependentDrawing(XFontSet)
     * }
     */
    public static FunctionDescriptor XContextDependentDrawing$descriptor() {
        return XContextDependentDrawing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XContextDependentDrawing(XFontSet)
     * }
     */
    public static MethodHandle XContextDependentDrawing$handle() {
        return XContextDependentDrawing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XContextDependentDrawing(XFontSet)
     * }
     */
    public static int XContextDependentDrawing(MemorySegment x0) {
        var mh$ = XContextDependentDrawing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XContextDependentDrawing", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDirectionalDependentDrawing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDirectionalDependentDrawing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDirectionalDependentDrawing(XFontSet)
     * }
     */
    public static FunctionDescriptor XDirectionalDependentDrawing$descriptor() {
        return XDirectionalDependentDrawing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDirectionalDependentDrawing(XFontSet)
     * }
     */
    public static MethodHandle XDirectionalDependentDrawing$handle() {
        return XDirectionalDependentDrawing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDirectionalDependentDrawing(XFontSet)
     * }
     */
    public static int XDirectionalDependentDrawing(MemorySegment x0) {
        var mh$ = XDirectionalDependentDrawing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDirectionalDependentDrawing", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XContextualDrawing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XContextualDrawing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XContextualDrawing(XFontSet)
     * }
     */
    public static FunctionDescriptor XContextualDrawing$descriptor() {
        return XContextualDrawing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XContextualDrawing(XFontSet)
     * }
     */
    public static MethodHandle XContextualDrawing$handle() {
        return XContextualDrawing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XContextualDrawing(XFontSet)
     * }
     */
    public static int XContextualDrawing(MemorySegment x0) {
        var mh$ = XContextualDrawing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XContextualDrawing", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XExtentsOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XExtentsOfFontSet"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontSetExtents *XExtentsOfFontSet(XFontSet)
     * }
     */
    public static FunctionDescriptor XExtentsOfFontSet$descriptor() {
        return XExtentsOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontSetExtents *XExtentsOfFontSet(XFontSet)
     * }
     */
    public static MethodHandle XExtentsOfFontSet$handle() {
        return XExtentsOfFontSet.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XFontSetExtents *XExtentsOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XExtentsOfFontSet(MemorySegment x0) {
        var mh$ = XExtentsOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XExtentsOfFontSet", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextEscapement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbTextEscapement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextEscapement(XFontSet, const char *, int)
     * }
     */
    public static FunctionDescriptor XmbTextEscapement$descriptor() {
        return XmbTextEscapement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextEscapement(XFontSet, const char *, int)
     * }
     */
    public static MethodHandle XmbTextEscapement$handle() {
        return XmbTextEscapement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XmbTextEscapement(XFontSet, const char *, int)
     * }
     */
    public static int XmbTextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XmbTextEscapement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextEscapement", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextEscapement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcTextEscapement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextEscapement(XFontSet, const wchar_t *, int)
     * }
     */
    public static FunctionDescriptor XwcTextEscapement$descriptor() {
        return XwcTextEscapement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextEscapement(XFontSet, const wchar_t *, int)
     * }
     */
    public static MethodHandle XwcTextEscapement$handle() {
        return XwcTextEscapement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XwcTextEscapement(XFontSet, const wchar_t *, int)
     * }
     */
    public static int XwcTextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XwcTextEscapement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextEscapement", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextEscapement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8TextEscapement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextEscapement(XFontSet, const char *, int)
     * }
     */
    public static FunctionDescriptor Xutf8TextEscapement$descriptor() {
        return Xutf8TextEscapement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextEscapement(XFontSet, const char *, int)
     * }
     */
    public static MethodHandle Xutf8TextEscapement$handle() {
        return Xutf8TextEscapement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int Xutf8TextEscapement(XFontSet, const char *, int)
     * }
     */
    public static int Xutf8TextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Xutf8TextEscapement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextEscapement", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbTextExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XmbTextExtents$descriptor() {
        return XmbTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XmbTextExtents$handle() {
        return XmbTextExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static int XmbTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XmbTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextExtents", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcTextExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XwcTextExtents$descriptor() {
        return XwcTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XwcTextExtents$handle() {
        return XwcTextExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *)
     * }
     */
    public static int XwcTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XwcTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextExtents", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8TextExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor Xutf8TextExtents$descriptor() {
        return Xutf8TextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle Xutf8TextExtents$handle() {
        return Xutf8TextExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int Xutf8TextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static int Xutf8TextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Xutf8TextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextExtents", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextPerCharExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbTextPerCharExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XmbTextPerCharExtents$descriptor() {
        return XmbTextPerCharExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XmbTextPerCharExtents$handle() {
        return XmbTextPerCharExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static int XmbTextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XmbTextPerCharExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextPerCharExtents", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextPerCharExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcTextPerCharExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XwcTextPerCharExtents$descriptor() {
        return XwcTextPerCharExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XwcTextPerCharExtents$handle() {
        return XwcTextPerCharExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static int XwcTextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XwcTextPerCharExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextPerCharExtents", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextPerCharExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8TextPerCharExtents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor Xutf8TextPerCharExtents$descriptor() {
        return Xutf8TextPerCharExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle Xutf8TextPerCharExtents$handle() {
        return Xutf8TextPerCharExtents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int Xutf8TextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static int Xutf8TextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = Xutf8TextPerCharExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextPerCharExtents", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbDrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbDrawText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static FunctionDescriptor XmbDrawText$descriptor() {
        return XmbDrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static MethodHandle XmbDrawText$handle() {
        return XmbDrawText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static void XmbDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XmbDrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbDrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcDrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcDrawText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int)
     * }
     */
    public static FunctionDescriptor XwcDrawText$descriptor() {
        return XwcDrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int)
     * }
     */
    public static MethodHandle XwcDrawText$handle() {
        return XwcDrawText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int)
     * }
     */
    public static void XwcDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XwcDrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcDrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8DrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8DrawText"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8DrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static FunctionDescriptor Xutf8DrawText$descriptor() {
        return Xutf8DrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8DrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static MethodHandle Xutf8DrawText$handle() {
        return Xutf8DrawText.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void Xutf8DrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static void Xutf8DrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = Xutf8DrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8DrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbDrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbDrawString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XmbDrawString$descriptor() {
        return XmbDrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XmbDrawString$handle() {
        return XmbDrawString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void XmbDrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XmbDrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbDrawString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcDrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcDrawString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static FunctionDescriptor XwcDrawString$descriptor() {
        return XwcDrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static MethodHandle XwcDrawString$handle() {
        return XwcDrawString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static void XwcDrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XwcDrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcDrawString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8DrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8DrawString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8DrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor Xutf8DrawString$descriptor() {
        return Xutf8DrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8DrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle Xutf8DrawString$handle() {
        return Xutf8DrawString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void Xutf8DrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void Xutf8DrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = Xutf8DrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8DrawString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbDrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbDrawImageString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XmbDrawImageString$descriptor() {
        return XmbDrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XmbDrawImageString$handle() {
        return XmbDrawImageString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void XmbDrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XmbDrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbDrawImageString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcDrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcDrawImageString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static FunctionDescriptor XwcDrawImageString$descriptor() {
        return XwcDrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static MethodHandle XwcDrawImageString$handle() {
        return XwcDrawImageString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static void XwcDrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XwcDrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcDrawImageString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8DrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8DrawImageString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8DrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor Xutf8DrawImageString$descriptor() {
        return Xutf8DrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8DrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle Xutf8DrawImageString$handle() {
        return Xutf8DrawImageString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void Xutf8DrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void Xutf8DrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = Xutf8DrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8DrawImageString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOpenIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XOpenIM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *)
     * }
     */
    public static FunctionDescriptor XOpenIM$descriptor() {
        return XOpenIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *)
     * }
     */
    public static MethodHandle XOpenIM$handle() {
        return XOpenIM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *)
     * }
     */
    public static MemorySegment XOpenIM(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XOpenIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOpenIM", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCloseIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCloseIM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCloseIM(XIM)
     * }
     */
    public static FunctionDescriptor XCloseIM$descriptor() {
        return XCloseIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCloseIM(XIM)
     * }
     */
    public static MethodHandle XCloseIM$handle() {
        return XCloseIM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XCloseIM(XIM)
     * }
     */
    public static int XCloseIM(MemorySegment x0) {
        var mh$ = XCloseIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCloseIM", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetIMValues(XIM, ...)
     * }
     */
    public static class XGetIMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XGetIMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetIMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetIMValues(XIM, ...)
         * }
         */
        public static XGetIMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetIMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetIMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetIMValues(XIM, ...)
     * }
     */
    public static class XSetIMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XSetIMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetIMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetIMValues(XIM, ...)
         * }
         */
        public static XSetIMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetIMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetIMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDisplayOfIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDisplayOfIM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfIM(XIM)
     * }
     */
    public static FunctionDescriptor XDisplayOfIM$descriptor() {
        return XDisplayOfIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfIM(XIM)
     * }
     */
    public static MethodHandle XDisplayOfIM$handle() {
        return XDisplayOfIM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Display *XDisplayOfIM(XIM)
     * }
     */
    public static MemorySegment XDisplayOfIM(MemorySegment x0) {
        var mh$ = XDisplayOfIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayOfIM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLocaleOfIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLocaleOfIM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XLocaleOfIM(XIM)
     * }
     */
    public static FunctionDescriptor XLocaleOfIM$descriptor() {
        return XLocaleOfIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XLocaleOfIM(XIM)
     * }
     */
    public static MethodHandle XLocaleOfIM$handle() {
        return XLocaleOfIM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XLocaleOfIM(XIM)
     * }
     */
    public static MemorySegment XLocaleOfIM(MemorySegment x0) {
        var mh$ = XLocaleOfIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLocaleOfIM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern XIC XCreateIC(XIM, ...)
     * }
     */
    public static class XCreateIC {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XCreateIC");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XCreateIC(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern XIC XCreateIC(XIM, ...)
         * }
         */
        public static XCreateIC makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XCreateIC(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XCreateIC", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDestroyIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDestroyIC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XDestroyIC(XIC)
     * }
     */
    public static FunctionDescriptor XDestroyIC$descriptor() {
        return XDestroyIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XDestroyIC(XIC)
     * }
     */
    public static MethodHandle XDestroyIC$handle() {
        return XDestroyIC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XDestroyIC(XIC)
     * }
     */
    public static void XDestroyIC(MemorySegment x0) {
        var mh$ = XDestroyIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyIC", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetICFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetICFocus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetICFocus(XIC)
     * }
     */
    public static FunctionDescriptor XSetICFocus$descriptor() {
        return XSetICFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetICFocus(XIC)
     * }
     */
    public static MethodHandle XSetICFocus$handle() {
        return XSetICFocus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetICFocus(XIC)
     * }
     */
    public static void XSetICFocus(MemorySegment x0) {
        var mh$ = XSetICFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetICFocus", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnsetICFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnsetICFocus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XUnsetICFocus(XIC)
     * }
     */
    public static FunctionDescriptor XUnsetICFocus$descriptor() {
        return XUnsetICFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XUnsetICFocus(XIC)
     * }
     */
    public static MethodHandle XUnsetICFocus$handle() {
        return XUnsetICFocus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XUnsetICFocus(XIC)
     * }
     */
    public static void XUnsetICFocus(MemorySegment x0) {
        var mh$ = XUnsetICFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnsetICFocus", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcResetIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcResetIC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern wchar_t *XwcResetIC(XIC)
     * }
     */
    public static FunctionDescriptor XwcResetIC$descriptor() {
        return XwcResetIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern wchar_t *XwcResetIC(XIC)
     * }
     */
    public static MethodHandle XwcResetIC$handle() {
        return XwcResetIC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern wchar_t *XwcResetIC(XIC)
     * }
     */
    public static MemorySegment XwcResetIC(MemorySegment x0) {
        var mh$ = XwcResetIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcResetIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbResetIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbResetIC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XmbResetIC(XIC)
     * }
     */
    public static FunctionDescriptor XmbResetIC$descriptor() {
        return XmbResetIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XmbResetIC(XIC)
     * }
     */
    public static MethodHandle XmbResetIC$handle() {
        return XmbResetIC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *XmbResetIC(XIC)
     * }
     */
    public static MemorySegment XmbResetIC(MemorySegment x0) {
        var mh$ = XmbResetIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbResetIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8ResetIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8ResetIC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *Xutf8ResetIC(XIC)
     * }
     */
    public static FunctionDescriptor Xutf8ResetIC$descriptor() {
        return Xutf8ResetIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *Xutf8ResetIC(XIC)
     * }
     */
    public static MethodHandle Xutf8ResetIC$handle() {
        return Xutf8ResetIC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *Xutf8ResetIC(XIC)
     * }
     */
    public static MemorySegment Xutf8ResetIC(MemorySegment x0) {
        var mh$ = Xutf8ResetIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8ResetIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetICValues(XIC, ...)
     * }
     */
    public static class XSetICValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XSetICValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetICValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetICValues(XIC, ...)
         * }
         */
        public static XSetICValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetICValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetICValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetICValues(XIC, ...)
     * }
     */
    public static class XGetICValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_POINTER
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XGetICValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetICValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetICValues(XIC, ...)
         * }
         */
        public static XGetICValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetICValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetICValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XIMOfIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XIMOfIC"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIM XIMOfIC(XIC)
     * }
     */
    public static FunctionDescriptor XIMOfIC$descriptor() {
        return XIMOfIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIM XIMOfIC(XIC)
     * }
     */
    public static MethodHandle XIMOfIC$handle() {
        return XIMOfIC.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XIM XIMOfIC(XIC)
     * }
     */
    public static MemorySegment XIMOfIC(MemorySegment x0) {
        var mh$ = XIMOfIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIMOfIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFilterEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFilterEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFilterEvent(XEvent *, Window)
     * }
     */
    public static FunctionDescriptor XFilterEvent$descriptor() {
        return XFilterEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFilterEvent(XEvent *, Window)
     * }
     */
    public static MethodHandle XFilterEvent$handle() {
        return XFilterEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFilterEvent(XEvent *, Window)
     * }
     */
    public static int XFilterEvent(MemorySegment x0, long x1) {
        var mh$ = XFilterEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFilterEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbLookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbLookupString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static FunctionDescriptor XmbLookupString$descriptor() {
        return XmbLookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static MethodHandle XmbLookupString$handle() {
        return XmbLookupString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static int XmbLookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XmbLookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbLookupString", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcLookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcLookupString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *)
     * }
     */
    public static FunctionDescriptor XwcLookupString$descriptor() {
        return XwcLookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *)
     * }
     */
    public static MethodHandle XwcLookupString$handle() {
        return XwcLookupString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *)
     * }
     */
    public static int XwcLookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XwcLookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcLookupString", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8LookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8LookupString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8LookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static FunctionDescriptor Xutf8LookupString$descriptor() {
        return Xutf8LookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8LookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static MethodHandle Xutf8LookupString$handle() {
        return Xutf8LookupString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int Xutf8LookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static int Xutf8LookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Xutf8LookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8LookupString", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern XVaNestedList XVaCreateNestedList(int, ...)
     * }
     */
    public static class XVaCreateNestedList {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                Xlib_h.C_POINTER,
                Xlib_h.C_INT
            );
        private static final MemorySegment ADDR = Xlib_h.findOrThrow("XVaCreateNestedList");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XVaCreateNestedList(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern XVaNestedList XVaCreateNestedList(int, ...)
         * }
         */
        public static XVaCreateNestedList makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XVaCreateNestedList(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XVaCreateNestedList", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XRegisterIMInstantiateCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRegisterIMInstantiateCallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static FunctionDescriptor XRegisterIMInstantiateCallback$descriptor() {
        return XRegisterIMInstantiateCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static MethodHandle XRegisterIMInstantiateCallback$handle() {
        return XRegisterIMInstantiateCallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static int XRegisterIMInstantiateCallback(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XRegisterIMInstantiateCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRegisterIMInstantiateCallback", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnregisterIMInstantiateCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnregisterIMInstantiateCallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static FunctionDescriptor XUnregisterIMInstantiateCallback$descriptor() {
        return XUnregisterIMInstantiateCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static MethodHandle XUnregisterIMInstantiateCallback$handle() {
        return XUnregisterIMInstantiateCallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static int XUnregisterIMInstantiateCallback(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XUnregisterIMInstantiateCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnregisterIMInstantiateCallback", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInternalConnectionNumbers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XInternalConnectionNumbers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInternalConnectionNumbers(Display *, int **, int *)
     * }
     */
    public static FunctionDescriptor XInternalConnectionNumbers$descriptor() {
        return XInternalConnectionNumbers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInternalConnectionNumbers(Display *, int **, int *)
     * }
     */
    public static MethodHandle XInternalConnectionNumbers$handle() {
        return XInternalConnectionNumbers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XInternalConnectionNumbers(Display *, int **, int *)
     * }
     */
    public static int XInternalConnectionNumbers(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XInternalConnectionNumbers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInternalConnectionNumbers", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XProcessInternalConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XProcessInternalConnection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XProcessInternalConnection(Display *, int)
     * }
     */
    public static FunctionDescriptor XProcessInternalConnection$descriptor() {
        return XProcessInternalConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XProcessInternalConnection(Display *, int)
     * }
     */
    public static MethodHandle XProcessInternalConnection$handle() {
        return XProcessInternalConnection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XProcessInternalConnection(Display *, int)
     * }
     */
    public static void XProcessInternalConnection(MemorySegment x0, int x1) {
        var mh$ = XProcessInternalConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XProcessInternalConnection", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddConnectionWatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAddConnectionWatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static FunctionDescriptor XAddConnectionWatch$descriptor() {
        return XAddConnectionWatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static MethodHandle XAddConnectionWatch$handle() {
        return XAddConnectionWatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static int XAddConnectionWatch(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XAddConnectionWatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddConnectionWatch", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveConnectionWatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRemoveConnectionWatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static FunctionDescriptor XRemoveConnectionWatch$descriptor() {
        return XRemoveConnectionWatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static MethodHandle XRemoveConnectionWatch$handle() {
        return XRemoveConnectionWatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static void XRemoveConnectionWatch(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XRemoveConnectionWatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveConnectionWatch", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetAuthorization {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetAuthorization"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetAuthorization(char *, int, char *, int)
     * }
     */
    public static FunctionDescriptor XSetAuthorization$descriptor() {
        return XSetAuthorization.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetAuthorization(char *, int, char *, int)
     * }
     */
    public static MethodHandle XSetAuthorization$handle() {
        return XSetAuthorization.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetAuthorization(char *, int, char *, int)
     * }
     */
    public static void XSetAuthorization(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = XSetAuthorization.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetAuthorization", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Xmbtowc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("_Xmbtowc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _Xmbtowc(wchar_t *, char *, int)
     * }
     */
    public static FunctionDescriptor _Xmbtowc$descriptor() {
        return _Xmbtowc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _Xmbtowc(wchar_t *, char *, int)
     * }
     */
    public static MethodHandle _Xmbtowc$handle() {
        return _Xmbtowc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int _Xmbtowc(wchar_t *, char *, int)
     * }
     */
    public static int _Xmbtowc(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = _Xmbtowc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Xmbtowc", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Xwctomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("_Xwctomb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _Xwctomb(char *, wchar_t)
     * }
     */
    public static FunctionDescriptor _Xwctomb$descriptor() {
        return _Xwctomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _Xwctomb(char *, wchar_t)
     * }
     */
    public static MethodHandle _Xwctomb$handle() {
        return _Xwctomb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int _Xwctomb(char *, wchar_t)
     * }
     */
    public static int _Xwctomb(MemorySegment x0, int x1) {
        var mh$ = _Xwctomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Xwctomb", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetEventData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetEventData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static FunctionDescriptor XGetEventData$descriptor() {
        return XGetEventData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static MethodHandle XGetEventData$handle() {
        return XGetEventData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static int XGetEventData(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetEventData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetEventData", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeEventData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFreeEventData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFreeEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static FunctionDescriptor XFreeEventData$descriptor() {
        return XFreeEventData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFreeEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static MethodHandle XFreeEventData$handle() {
        return XFreeEventData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XFreeEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static void XFreeEventData(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeEventData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeEventData", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int XStringStyle = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XStringStyle = 0
     * }
     */
    public static int XStringStyle() {
        return XStringStyle;
    }
    private static final int XCompoundTextStyle = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XCompoundTextStyle = 1
     * }
     */
    public static int XCompoundTextStyle() {
        return XCompoundTextStyle;
    }
    private static final int XTextStyle = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTextStyle = 2
     * }
     */
    public static int XTextStyle() {
        return XTextStyle;
    }
    private static final int XStdICCTextStyle = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XStdICCTextStyle = 3
     * }
     */
    public static int XStdICCTextStyle() {
        return XStdICCTextStyle;
    }
    private static final int XUTF8StringStyle = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XUTF8StringStyle = 4
     * }
     */
    public static int XUTF8StringStyle() {
        return XUTF8StringStyle;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _XRegion *Region
     * }
     */
    public static final AddressLayout Region = Xlib_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int XContext
     * }
     */
    public static final OfInt XContext = Xlib_h.C_INT;

    private static class XAllocClassHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocClassHint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XClassHint *XAllocClassHint()
     * }
     */
    public static FunctionDescriptor XAllocClassHint$descriptor() {
        return XAllocClassHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XClassHint *XAllocClassHint()
     * }
     */
    public static MethodHandle XAllocClassHint$handle() {
        return XAllocClassHint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XClassHint *XAllocClassHint()
     * }
     */
    public static MemorySegment XAllocClassHint() {
        var mh$ = XAllocClassHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocClassHint");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocIconSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocIconSize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIconSize *XAllocIconSize()
     * }
     */
    public static FunctionDescriptor XAllocIconSize$descriptor() {
        return XAllocIconSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIconSize *XAllocIconSize()
     * }
     */
    public static MethodHandle XAllocIconSize$handle() {
        return XAllocIconSize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XIconSize *XAllocIconSize()
     * }
     */
    public static MemorySegment XAllocIconSize() {
        var mh$ = XAllocIconSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocIconSize");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocSizeHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XSizeHints *XAllocSizeHints()
     * }
     */
    public static FunctionDescriptor XAllocSizeHints$descriptor() {
        return XAllocSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XSizeHints *XAllocSizeHints()
     * }
     */
    public static MethodHandle XAllocSizeHints$handle() {
        return XAllocSizeHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XSizeHints *XAllocSizeHints()
     * }
     */
    public static MemorySegment XAllocSizeHints() {
        var mh$ = XAllocSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocSizeHints");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocStandardColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocStandardColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XStandardColormap *XAllocStandardColormap()
     * }
     */
    public static FunctionDescriptor XAllocStandardColormap$descriptor() {
        return XAllocStandardColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XStandardColormap *XAllocStandardColormap()
     * }
     */
    public static MethodHandle XAllocStandardColormap$handle() {
        return XAllocStandardColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XStandardColormap *XAllocStandardColormap()
     * }
     */
    public static MemorySegment XAllocStandardColormap() {
        var mh$ = XAllocStandardColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocStandardColormap");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocWMHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XAllocWMHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XWMHints *XAllocWMHints()
     * }
     */
    public static FunctionDescriptor XAllocWMHints$descriptor() {
        return XAllocWMHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XWMHints *XAllocWMHints()
     * }
     */
    public static MethodHandle XAllocWMHints$handle() {
        return XAllocWMHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XWMHints *XAllocWMHints()
     * }
     */
    public static MemorySegment XAllocWMHints() {
        var mh$ = XAllocWMHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocWMHints");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XClipBox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XClipBox"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XClipBox(Region, XRectangle *)
     * }
     */
    public static FunctionDescriptor XClipBox$descriptor() {
        return XClipBox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XClipBox(Region, XRectangle *)
     * }
     */
    public static MethodHandle XClipBox$handle() {
        return XClipBox.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XClipBox(Region, XRectangle *)
     * }
     */
    public static int XClipBox(MemorySegment x0, MemorySegment x1) {
        var mh$ = XClipBox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XClipBox", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XCreateRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Region XCreateRegion()
     * }
     */
    public static FunctionDescriptor XCreateRegion$descriptor() {
        return XCreateRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Region XCreateRegion()
     * }
     */
    public static MethodHandle XCreateRegion$handle() {
        return XCreateRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Region XCreateRegion()
     * }
     */
    public static MemorySegment XCreateRegion() {
        var mh$ = XCreateRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateRegion");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDefaultString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *XDefaultString()
     * }
     */
    public static FunctionDescriptor XDefaultString$descriptor() {
        return XDefaultString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *XDefaultString()
     * }
     */
    public static MethodHandle XDefaultString$handle() {
        return XDefaultString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *XDefaultString()
     * }
     */
    public static MemorySegment XDefaultString() {
        var mh$ = XDefaultString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultString");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDeleteContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDeleteContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDeleteContext(Display *, XID, XContext)
     * }
     */
    public static FunctionDescriptor XDeleteContext$descriptor() {
        return XDeleteContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDeleteContext(Display *, XID, XContext)
     * }
     */
    public static MethodHandle XDeleteContext$handle() {
        return XDeleteContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDeleteContext(Display *, XID, XContext)
     * }
     */
    public static int XDeleteContext(MemorySegment x0, long x1, int x2) {
        var mh$ = XDeleteContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDeleteContext", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDestroyRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XDestroyRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDestroyRegion(Region)
     * }
     */
    public static FunctionDescriptor XDestroyRegion$descriptor() {
        return XDestroyRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDestroyRegion(Region)
     * }
     */
    public static MethodHandle XDestroyRegion$handle() {
        return XDestroyRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XDestroyRegion(Region)
     * }
     */
    public static int XDestroyRegion(MemorySegment x0) {
        var mh$ = XDestroyRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyRegion", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEmptyRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XEmptyRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEmptyRegion(Region)
     * }
     */
    public static FunctionDescriptor XEmptyRegion$descriptor() {
        return XEmptyRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEmptyRegion(Region)
     * }
     */
    public static MethodHandle XEmptyRegion$handle() {
        return XEmptyRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XEmptyRegion(Region)
     * }
     */
    public static int XEmptyRegion(MemorySegment x0) {
        var mh$ = XEmptyRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEmptyRegion", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEqualRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XEqualRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEqualRegion(Region, Region)
     * }
     */
    public static FunctionDescriptor XEqualRegion$descriptor() {
        return XEqualRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEqualRegion(Region, Region)
     * }
     */
    public static MethodHandle XEqualRegion$handle() {
        return XEqualRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XEqualRegion(Region, Region)
     * }
     */
    public static int XEqualRegion(MemorySegment x0, MemorySegment x1) {
        var mh$ = XEqualRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEqualRegion", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFindContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XFindContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFindContext(Display *, XID, XContext, XPointer *)
     * }
     */
    public static FunctionDescriptor XFindContext$descriptor() {
        return XFindContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFindContext(Display *, XID, XContext, XPointer *)
     * }
     */
    public static MethodHandle XFindContext$handle() {
        return XFindContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XFindContext(Display *, XID, XContext, XPointer *)
     * }
     */
    public static int XFindContext(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XFindContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFindContext", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetClassHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetClassHint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static FunctionDescriptor XGetClassHint$descriptor() {
        return XGetClassHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static MethodHandle XGetClassHint$handle() {
        return XGetClassHint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static int XGetClassHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetClassHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetClassHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetIconSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetIconSizes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetIconSizes(Display *, Window, XIconSize **, int *)
     * }
     */
    public static FunctionDescriptor XGetIconSizes$descriptor() {
        return XGetIconSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetIconSizes(Display *, Window, XIconSize **, int *)
     * }
     */
    public static MethodHandle XGetIconSizes$handle() {
        return XGetIconSizes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetIconSizes(Display *, Window, XIconSize **, int *)
     * }
     */
    public static int XGetIconSizes(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetIconSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetIconSizes", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetNormalHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XGetNormalHints$descriptor() {
        return XGetNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XGetNormalHints$handle() {
        return XGetNormalHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XGetNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetNormalHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetRGBColormaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetRGBColormaps"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom)
     * }
     */
    public static FunctionDescriptor XGetRGBColormaps$descriptor() {
        return XGetRGBColormaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom)
     * }
     */
    public static MethodHandle XGetRGBColormaps$handle() {
        return XGetRGBColormaps.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom)
     * }
     */
    public static int XGetRGBColormaps(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4) {
        var mh$ = XGetRGBColormaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetRGBColormaps", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetSizeHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static FunctionDescriptor XGetSizeHints$descriptor() {
        return XGetSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MethodHandle XGetSizeHints$handle() {
        return XGetSizeHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static int XGetSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetSizeHints", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetStandardColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetStandardColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static FunctionDescriptor XGetStandardColormap$descriptor() {
        return XGetStandardColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static MethodHandle XGetStandardColormap$handle() {
        return XGetStandardColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static int XGetStandardColormap(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetStandardColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetStandardColormap", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetTextProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static FunctionDescriptor XGetTextProperty$descriptor() {
        return XGetTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static MethodHandle XGetTextProperty$handle() {
        return XGetTextProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static int XGetTextProperty(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetTextProperty", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetVisualInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetVisualInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XVisualInfo *XGetVisualInfo(Display *, long, XVisualInfo *, int *)
     * }
     */
    public static FunctionDescriptor XGetVisualInfo$descriptor() {
        return XGetVisualInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XVisualInfo *XGetVisualInfo(Display *, long, XVisualInfo *, int *)
     * }
     */
    public static MethodHandle XGetVisualInfo$handle() {
        return XGetVisualInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XVisualInfo *XGetVisualInfo(Display *, long, XVisualInfo *, int *)
     * }
     */
    public static MemorySegment XGetVisualInfo(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetVisualInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetVisualInfo", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMClientMachine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMClientMachine"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XGetWMClientMachine$descriptor() {
        return XGetWMClientMachine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XGetWMClientMachine$handle() {
        return XGetWMClientMachine.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static int XGetWMClientMachine(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMClientMachine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMClientMachine", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XWMHints *XGetWMHints(Display *, Window)
     * }
     */
    public static FunctionDescriptor XGetWMHints$descriptor() {
        return XGetWMHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XWMHints *XGetWMHints(Display *, Window)
     * }
     */
    public static MethodHandle XGetWMHints$handle() {
        return XGetWMHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern XWMHints *XGetWMHints(Display *, Window)
     * }
     */
    public static MemorySegment XGetWMHints(MemorySegment x0, long x1) {
        var mh$ = XGetWMHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMHints", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMIconName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XGetWMIconName$descriptor() {
        return XGetWMIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XGetWMIconName$handle() {
        return XGetWMIconName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static int XGetWMIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMIconName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XGetWMName$descriptor() {
        return XGetWMName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XGetWMName$handle() {
        return XGetWMName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static int XGetWMName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMNormalHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long *)
     * }
     */
    public static FunctionDescriptor XGetWMNormalHints$descriptor() {
        return XGetWMNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long *)
     * }
     */
    public static MethodHandle XGetWMNormalHints$handle() {
        return XGetWMNormalHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long *)
     * }
     */
    public static int XGetWMNormalHints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMNormalHints", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetWMSizeHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long *, Atom)
     * }
     */
    public static FunctionDescriptor XGetWMSizeHints$descriptor() {
        return XGetWMSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long *, Atom)
     * }
     */
    public static MethodHandle XGetWMSizeHints$handle() {
        return XGetWMSizeHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long *, Atom)
     * }
     */
    public static int XGetWMSizeHints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4) {
        var mh$ = XGetWMSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMSizeHints", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetZoomHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XGetZoomHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XGetZoomHints$descriptor() {
        return XGetZoomHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XGetZoomHints$handle() {
        return XGetZoomHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XGetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XGetZoomHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetZoomHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetZoomHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XIntersectRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XIntersectRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XIntersectRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XIntersectRegion$descriptor() {
        return XIntersectRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XIntersectRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XIntersectRegion$handle() {
        return XIntersectRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XIntersectRegion(Region, Region, Region)
     * }
     */
    public static int XIntersectRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XIntersectRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIntersectRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConvertCase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XConvertCase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XConvertCase(KeySym, KeySym *, KeySym *)
     * }
     */
    public static FunctionDescriptor XConvertCase$descriptor() {
        return XConvertCase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XConvertCase(KeySym, KeySym *, KeySym *)
     * }
     */
    public static MethodHandle XConvertCase$handle() {
        return XConvertCase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XConvertCase(KeySym, KeySym *, KeySym *)
     * }
     */
    public static void XConvertCase(long x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XConvertCase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConvertCase", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XLookupString"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *)
     * }
     */
    public static FunctionDescriptor XLookupString$descriptor() {
        return XLookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *)
     * }
     */
    public static MethodHandle XLookupString$handle() {
        return XLookupString.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *)
     * }
     */
    public static int XLookupString(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XLookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLookupString", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMatchVisualInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XMatchVisualInfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *)
     * }
     */
    public static FunctionDescriptor XMatchVisualInfo$descriptor() {
        return XMatchVisualInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *)
     * }
     */
    public static MethodHandle XMatchVisualInfo$handle() {
        return XMatchVisualInfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *)
     * }
     */
    public static int XMatchVisualInfo(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XMatchVisualInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMatchVisualInfo", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOffsetRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XOffsetRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XOffsetRegion(Region, int, int)
     * }
     */
    public static FunctionDescriptor XOffsetRegion$descriptor() {
        return XOffsetRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XOffsetRegion(Region, int, int)
     * }
     */
    public static MethodHandle XOffsetRegion$handle() {
        return XOffsetRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XOffsetRegion(Region, int, int)
     * }
     */
    public static int XOffsetRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XOffsetRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOffsetRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPointInRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPointInRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPointInRegion(Region, int, int)
     * }
     */
    public static FunctionDescriptor XPointInRegion$descriptor() {
        return XPointInRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPointInRegion(Region, int, int)
     * }
     */
    public static MethodHandle XPointInRegion$handle() {
        return XPointInRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XPointInRegion(Region, int, int)
     * }
     */
    public static int XPointInRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XPointInRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPointInRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPolygonRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XPolygonRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Region XPolygonRegion(XPoint *, int, int)
     * }
     */
    public static FunctionDescriptor XPolygonRegion$descriptor() {
        return XPolygonRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Region XPolygonRegion(XPoint *, int, int)
     * }
     */
    public static MethodHandle XPolygonRegion$handle() {
        return XPolygonRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern Region XPolygonRegion(XPoint *, int, int)
     * }
     */
    public static MemorySegment XPolygonRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XPolygonRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPolygonRegion", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRectInRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XRectInRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRectInRegion(Region, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XRectInRegion$descriptor() {
        return XRectInRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRectInRegion(Region, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XRectInRegion$handle() {
        return XRectInRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XRectInRegion(Region, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XRectInRegion(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = XRectInRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRectInRegion", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSaveContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSaveContext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSaveContext(Display *, XID, XContext, const char *)
     * }
     */
    public static FunctionDescriptor XSaveContext$descriptor() {
        return XSaveContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSaveContext(Display *, XID, XContext, const char *)
     * }
     */
    public static MethodHandle XSaveContext$handle() {
        return XSaveContext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSaveContext(Display *, XID, XContext, const char *)
     * }
     */
    public static int XSaveContext(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XSaveContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSaveContext", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClassHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetClassHint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static FunctionDescriptor XSetClassHint$descriptor() {
        return XSetClassHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static MethodHandle XSetClassHint$handle() {
        return XSetClassHint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static int XSetClassHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetClassHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClassHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetIconSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetIconSizes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetIconSizes(Display *, Window, XIconSize *, int)
     * }
     */
    public static FunctionDescriptor XSetIconSizes$descriptor() {
        return XSetIconSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetIconSizes(Display *, Window, XIconSize *, int)
     * }
     */
    public static MethodHandle XSetIconSizes$handle() {
        return XSetIconSizes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetIconSizes(Display *, Window, XIconSize *, int)
     * }
     */
    public static int XSetIconSizes(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetIconSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetIconSizes", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetNormalHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetNormalHints$descriptor() {
        return XSetNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XSetNormalHints$handle() {
        return XSetNormalHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XSetNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetNormalHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetRGBColormaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetRGBColormaps"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom)
     * }
     */
    public static FunctionDescriptor XSetRGBColormaps$descriptor() {
        return XSetRGBColormaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom)
     * }
     */
    public static MethodHandle XSetRGBColormaps$handle() {
        return XSetRGBColormaps.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom)
     * }
     */
    public static void XSetRGBColormaps(MemorySegment x0, long x1, MemorySegment x2, int x3, long x4) {
        var mh$ = XSetRGBColormaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetRGBColormaps", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetSizeHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static FunctionDescriptor XSetSizeHints$descriptor() {
        return XSetSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MethodHandle XSetSizeHints$handle() {
        return XSetSizeHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static int XSetSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetSizeHints", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetStandardProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetStandardProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetStandardProperties$descriptor() {
        return XSetStandardProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *)
     * }
     */
    public static MethodHandle XSetStandardProperties$handle() {
        return XSetStandardProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *)
     * }
     */
    public static int XSetStandardProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = XSetStandardProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetStandardProperties", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetTextProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static FunctionDescriptor XSetTextProperty$descriptor() {
        return XSetTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static MethodHandle XSetTextProperty$handle() {
        return XSetTextProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static void XSetTextProperty(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTextProperty", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMClientMachine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMClientMachine"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XSetWMClientMachine$descriptor() {
        return XSetWMClientMachine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XSetWMClientMachine$handle() {
        return XSetWMClientMachine.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static void XSetWMClientMachine(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMClientMachine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMClientMachine", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWMHints(Display *, Window, XWMHints *)
     * }
     */
    public static FunctionDescriptor XSetWMHints$descriptor() {
        return XSetWMHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWMHints(Display *, Window, XWMHints *)
     * }
     */
    public static MethodHandle XSetWMHints$handle() {
        return XSetWMHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetWMHints(Display *, Window, XWMHints *)
     * }
     */
    public static int XSetWMHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMIconName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XSetWMIconName$descriptor() {
        return XSetWMIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XSetWMIconName$handle() {
        return XSetWMIconName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static void XSetWMIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMIconName", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMName"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XSetWMName$descriptor() {
        return XSetWMName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XSetWMName$handle() {
        return XSetWMName.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static void XSetWMName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMName", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMNormalHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetWMNormalHints$descriptor() {
        return XSetWMNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XSetWMNormalHints$handle() {
        return XSetWMNormalHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetWMNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static void XSetWMNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMNormalHints", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static FunctionDescriptor XSetWMProperties$descriptor() {
        return XSetWMProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MethodHandle XSetWMProperties$handle() {
        return XSetWMProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static void XSetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XSetWMProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMProperties", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbSetWMProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbSetWMProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static FunctionDescriptor XmbSetWMProperties$descriptor() {
        return XmbSetWMProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MethodHandle XmbSetWMProperties$handle() {
        return XmbSetWMProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static void XmbSetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XmbSetWMProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbSetWMProperties", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8SetWMProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8SetWMProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8SetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static FunctionDescriptor Xutf8SetWMProperties$descriptor() {
        return Xutf8SetWMProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8SetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MethodHandle Xutf8SetWMProperties$handle() {
        return Xutf8SetWMProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void Xutf8SetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static void Xutf8SetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = Xutf8SetWMProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8SetWMProperties", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetWMSizeHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static FunctionDescriptor XSetWMSizeHints$descriptor() {
        return XSetWMSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MethodHandle XSetWMSizeHints$handle() {
        return XSetWMSizeHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static void XSetWMSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetWMSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMSizeHints", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetRegion(Display *, GC, Region)
     * }
     */
    public static FunctionDescriptor XSetRegion$descriptor() {
        return XSetRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetRegion(Display *, GC, Region)
     * }
     */
    public static MethodHandle XSetRegion$handle() {
        return XSetRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetRegion(Display *, GC, Region)
     * }
     */
    public static int XSetRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSetRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetStandardColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetStandardColormap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static FunctionDescriptor XSetStandardColormap$descriptor() {
        return XSetStandardColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static MethodHandle XSetStandardColormap$handle() {
        return XSetStandardColormap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static void XSetStandardColormap(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetStandardColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetStandardColormap", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetZoomHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSetZoomHints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetZoomHints$descriptor() {
        return XSetZoomHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XSetZoomHints$handle() {
        return XSetZoomHints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XSetZoomHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetZoomHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetZoomHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XShrinkRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XShrinkRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XShrinkRegion(Region, int, int)
     * }
     */
    public static FunctionDescriptor XShrinkRegion$descriptor() {
        return XShrinkRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XShrinkRegion(Region, int, int)
     * }
     */
    public static MethodHandle XShrinkRegion$handle() {
        return XShrinkRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XShrinkRegion(Region, int, int)
     * }
     */
    public static int XShrinkRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XShrinkRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XShrinkRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStringListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XStringListToTextProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStringListToTextProperty(char **, int, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XStringListToTextProperty$descriptor() {
        return XStringListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStringListToTextProperty(char **, int, XTextProperty *)
     * }
     */
    public static MethodHandle XStringListToTextProperty$handle() {
        return XStringListToTextProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XStringListToTextProperty(char **, int, XTextProperty *)
     * }
     */
    public static int XStringListToTextProperty(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XStringListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStringListToTextProperty", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSubtractRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XSubtractRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSubtractRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XSubtractRegion$descriptor() {
        return XSubtractRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSubtractRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XSubtractRegion$handle() {
        return XSubtractRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XSubtractRegion(Region, Region, Region)
     * }
     */
    public static int XSubtractRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSubtractRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSubtractRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbTextListToTextProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static FunctionDescriptor XmbTextListToTextProperty$descriptor() {
        return XmbTextListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MethodHandle XmbTextListToTextProperty$handle() {
        return XmbTextListToTextProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static int XmbTextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = XmbTextListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextListToTextProperty", display, list, count, style, text_prop_return);
            }
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcTextListToTextProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static FunctionDescriptor XwcTextListToTextProperty$descriptor() {
        return XwcTextListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MethodHandle XwcTextListToTextProperty$handle() {
        return XwcTextListToTextProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static int XwcTextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = XwcTextListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextListToTextProperty", display, list, count, style, text_prop_return);
            }
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8TextListToTextProperty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static FunctionDescriptor Xutf8TextListToTextProperty$descriptor() {
        return Xutf8TextListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MethodHandle Xutf8TextListToTextProperty$handle() {
        return Xutf8TextListToTextProperty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int Xutf8TextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static int Xutf8TextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = Xutf8TextListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextListToTextProperty", display, list, count, style, text_prop_return);
            }
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcFreeStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcFreeStringList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcFreeStringList(wchar_t **list)
     * }
     */
    public static FunctionDescriptor XwcFreeStringList$descriptor() {
        return XwcFreeStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcFreeStringList(wchar_t **list)
     * }
     */
    public static MethodHandle XwcFreeStringList$handle() {
        return XwcFreeStringList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void XwcFreeStringList(wchar_t **list)
     * }
     */
    public static void XwcFreeStringList(MemorySegment list) {
        var mh$ = XwcFreeStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcFreeStringList", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextPropertyToStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XTextPropertyToStringList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextPropertyToStringList(XTextProperty *, char ***, int *)
     * }
     */
    public static FunctionDescriptor XTextPropertyToStringList$descriptor() {
        return XTextPropertyToStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextPropertyToStringList(XTextProperty *, char ***, int *)
     * }
     */
    public static MethodHandle XTextPropertyToStringList$handle() {
        return XTextPropertyToStringList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XTextPropertyToStringList(XTextProperty *, char ***, int *)
     * }
     */
    public static int XTextPropertyToStringList(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XTextPropertyToStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextPropertyToStringList", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextPropertyToTextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XmbTextPropertyToTextList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static FunctionDescriptor XmbTextPropertyToTextList$descriptor() {
        return XmbTextPropertyToTextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static MethodHandle XmbTextPropertyToTextList$handle() {
        return XmbTextPropertyToTextList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XmbTextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static int XmbTextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = XmbTextPropertyToTextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextPropertyToTextList", display, text_prop, list_return, count_return);
            }
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextPropertyToTextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XwcTextPropertyToTextList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextPropertyToTextList(Display *display, const XTextProperty *text_prop, wchar_t ***list_return, int *count_return)
     * }
     */
    public static FunctionDescriptor XwcTextPropertyToTextList$descriptor() {
        return XwcTextPropertyToTextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextPropertyToTextList(Display *display, const XTextProperty *text_prop, wchar_t ***list_return, int *count_return)
     * }
     */
    public static MethodHandle XwcTextPropertyToTextList$handle() {
        return XwcTextPropertyToTextList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XwcTextPropertyToTextList(Display *display, const XTextProperty *text_prop, wchar_t ***list_return, int *count_return)
     * }
     */
    public static int XwcTextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = XwcTextPropertyToTextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextPropertyToTextList", display, text_prop, list_return, count_return);
            }
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextPropertyToTextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("Xutf8TextPropertyToTextList"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static FunctionDescriptor Xutf8TextPropertyToTextList$descriptor() {
        return Xutf8TextPropertyToTextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static MethodHandle Xutf8TextPropertyToTextList$handle() {
        return Xutf8TextPropertyToTextList.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int Xutf8TextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static int Xutf8TextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = Xutf8TextPropertyToTextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextPropertyToTextList", display, text_prop, list_return, count_return);
            }
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnionRectWithRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnionRectWithRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnionRectWithRegion(XRectangle *, Region, Region)
     * }
     */
    public static FunctionDescriptor XUnionRectWithRegion$descriptor() {
        return XUnionRectWithRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnionRectWithRegion(XRectangle *, Region, Region)
     * }
     */
    public static MethodHandle XUnionRectWithRegion$handle() {
        return XUnionRectWithRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUnionRectWithRegion(XRectangle *, Region, Region)
     * }
     */
    public static int XUnionRectWithRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XUnionRectWithRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnionRectWithRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnionRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XUnionRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnionRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XUnionRegion$descriptor() {
        return XUnionRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnionRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XUnionRegion$handle() {
        return XUnionRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XUnionRegion(Region, Region, Region)
     * }
     */
    public static int XUnionRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XUnionRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnionRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWMGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XWMGeometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XWMGeometry$descriptor() {
        return XWMGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *)
     * }
     */
    public static MethodHandle XWMGeometry$handle() {
        return XWMGeometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *)
     * }
     */
    public static int XWMGeometry(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, int x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8, MemorySegment x9, MemorySegment x10) {
        var mh$ = XWMGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWMGeometry", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XXorRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER,
            Xlib_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    Xlib_h.findOrThrow("XXorRegion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XXorRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XXorRegion$descriptor() {
        return XXorRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XXorRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XXorRegion$handle() {
        return XXorRegion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int XXorRegion(Region, Region, Region)
     * }
     */
    public static int XXorRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XXorRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XXorRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final long None = 0L;
    /**
     * {@snippet lang=c :
     * #define None 0
     * }
     */
    public static long None() {
        return None;
    }
    private static final long ParentRelative = 1L;
    /**
     * {@snippet lang=c :
     * #define ParentRelative 1
     * }
     */
    public static long ParentRelative() {
        return ParentRelative;
    }
    private static final long CopyFromParent = 0L;
    /**
     * {@snippet lang=c :
     * #define CopyFromParent 0
     * }
     */
    public static long CopyFromParent() {
        return CopyFromParent;
    }
    private static final long PointerWindow = 0L;
    /**
     * {@snippet lang=c :
     * #define PointerWindow 0
     * }
     */
    public static long PointerWindow() {
        return PointerWindow;
    }
    private static final long InputFocus = 1L;
    /**
     * {@snippet lang=c :
     * #define InputFocus 1
     * }
     */
    public static long InputFocus() {
        return InputFocus;
    }
    private static final long PointerRoot = 1L;
    /**
     * {@snippet lang=c :
     * #define PointerRoot 1
     * }
     */
    public static long PointerRoot() {
        return PointerRoot;
    }
    private static final long AnyPropertyType = 0L;
    /**
     * {@snippet lang=c :
     * #define AnyPropertyType 0
     * }
     */
    public static long AnyPropertyType() {
        return AnyPropertyType;
    }
    private static final long AnyKey = 0L;
    /**
     * {@snippet lang=c :
     * #define AnyKey 0
     * }
     */
    public static long AnyKey() {
        return AnyKey;
    }
    private static final long AnyButton = 0L;
    /**
     * {@snippet lang=c :
     * #define AnyButton 0
     * }
     */
    public static long AnyButton() {
        return AnyButton;
    }
    private static final long AllTemporary = 0L;
    /**
     * {@snippet lang=c :
     * #define AllTemporary 0
     * }
     */
    public static long AllTemporary() {
        return AllTemporary;
    }
    private static final long CurrentTime = 0L;
    /**
     * {@snippet lang=c :
     * #define CurrentTime 0
     * }
     */
    public static long CurrentTime() {
        return CurrentTime;
    }
    private static final long NoSymbol = 0L;
    /**
     * {@snippet lang=c :
     * #define NoSymbol 0
     * }
     */
    public static long NoSymbol() {
        return NoSymbol;
    }
    private static final long NoEventMask = 0L;
    /**
     * {@snippet lang=c :
     * #define NoEventMask 0
     * }
     */
    public static long NoEventMask() {
        return NoEventMask;
    }
    private static final long KeyPressMask = 1L;
    /**
     * {@snippet lang=c :
     * #define KeyPressMask 1
     * }
     */
    public static long KeyPressMask() {
        return KeyPressMask;
    }
    private static final long KeyReleaseMask = 2L;
    /**
     * {@snippet lang=c :
     * #define KeyReleaseMask 2
     * }
     */
    public static long KeyReleaseMask() {
        return KeyReleaseMask;
    }
    private static final long ButtonPressMask = 4L;
    /**
     * {@snippet lang=c :
     * #define ButtonPressMask 4
     * }
     */
    public static long ButtonPressMask() {
        return ButtonPressMask;
    }
    private static final long ButtonReleaseMask = 8L;
    /**
     * {@snippet lang=c :
     * #define ButtonReleaseMask 8
     * }
     */
    public static long ButtonReleaseMask() {
        return ButtonReleaseMask;
    }
    private static final long EnterWindowMask = 16L;
    /**
     * {@snippet lang=c :
     * #define EnterWindowMask 16
     * }
     */
    public static long EnterWindowMask() {
        return EnterWindowMask;
    }
    private static final long LeaveWindowMask = 32L;
    /**
     * {@snippet lang=c :
     * #define LeaveWindowMask 32
     * }
     */
    public static long LeaveWindowMask() {
        return LeaveWindowMask;
    }
    private static final long PointerMotionMask = 64L;
    /**
     * {@snippet lang=c :
     * #define PointerMotionMask 64
     * }
     */
    public static long PointerMotionMask() {
        return PointerMotionMask;
    }
    private static final long PointerMotionHintMask = 128L;
    /**
     * {@snippet lang=c :
     * #define PointerMotionHintMask 128
     * }
     */
    public static long PointerMotionHintMask() {
        return PointerMotionHintMask;
    }
    private static final long Button1MotionMask = 256L;
    /**
     * {@snippet lang=c :
     * #define Button1MotionMask 256
     * }
     */
    public static long Button1MotionMask() {
        return Button1MotionMask;
    }
    private static final long Button2MotionMask = 512L;
    /**
     * {@snippet lang=c :
     * #define Button2MotionMask 512
     * }
     */
    public static long Button2MotionMask() {
        return Button2MotionMask;
    }
    private static final long Button3MotionMask = 1024L;
    /**
     * {@snippet lang=c :
     * #define Button3MotionMask 1024
     * }
     */
    public static long Button3MotionMask() {
        return Button3MotionMask;
    }
    private static final long Button4MotionMask = 2048L;
    /**
     * {@snippet lang=c :
     * #define Button4MotionMask 2048
     * }
     */
    public static long Button4MotionMask() {
        return Button4MotionMask;
    }
    private static final long Button5MotionMask = 4096L;
    /**
     * {@snippet lang=c :
     * #define Button5MotionMask 4096
     * }
     */
    public static long Button5MotionMask() {
        return Button5MotionMask;
    }
    private static final long ButtonMotionMask = 8192L;
    /**
     * {@snippet lang=c :
     * #define ButtonMotionMask 8192
     * }
     */
    public static long ButtonMotionMask() {
        return ButtonMotionMask;
    }
    private static final long KeymapStateMask = 16384L;
    /**
     * {@snippet lang=c :
     * #define KeymapStateMask 16384
     * }
     */
    public static long KeymapStateMask() {
        return KeymapStateMask;
    }
    private static final long ExposureMask = 32768L;
    /**
     * {@snippet lang=c :
     * #define ExposureMask 32768
     * }
     */
    public static long ExposureMask() {
        return ExposureMask;
    }
    private static final long VisibilityChangeMask = 65536L;
    /**
     * {@snippet lang=c :
     * #define VisibilityChangeMask 65536
     * }
     */
    public static long VisibilityChangeMask() {
        return VisibilityChangeMask;
    }
    private static final long StructureNotifyMask = 131072L;
    /**
     * {@snippet lang=c :
     * #define StructureNotifyMask 131072
     * }
     */
    public static long StructureNotifyMask() {
        return StructureNotifyMask;
    }
    private static final long ResizeRedirectMask = 262144L;
    /**
     * {@snippet lang=c :
     * #define ResizeRedirectMask 262144
     * }
     */
    public static long ResizeRedirectMask() {
        return ResizeRedirectMask;
    }
    private static final long SubstructureNotifyMask = 524288L;
    /**
     * {@snippet lang=c :
     * #define SubstructureNotifyMask 524288
     * }
     */
    public static long SubstructureNotifyMask() {
        return SubstructureNotifyMask;
    }
    private static final long SubstructureRedirectMask = 1048576L;
    /**
     * {@snippet lang=c :
     * #define SubstructureRedirectMask 1048576
     * }
     */
    public static long SubstructureRedirectMask() {
        return SubstructureRedirectMask;
    }
    private static final long FocusChangeMask = 2097152L;
    /**
     * {@snippet lang=c :
     * #define FocusChangeMask 2097152
     * }
     */
    public static long FocusChangeMask() {
        return FocusChangeMask;
    }
    private static final long PropertyChangeMask = 4194304L;
    /**
     * {@snippet lang=c :
     * #define PropertyChangeMask 4194304
     * }
     */
    public static long PropertyChangeMask() {
        return PropertyChangeMask;
    }
    private static final long ColormapChangeMask = 8388608L;
    /**
     * {@snippet lang=c :
     * #define ColormapChangeMask 8388608
     * }
     */
    public static long ColormapChangeMask() {
        return ColormapChangeMask;
    }
    private static final long OwnerGrabButtonMask = 16777216L;
    /**
     * {@snippet lang=c :
     * #define OwnerGrabButtonMask 16777216
     * }
     */
    public static long OwnerGrabButtonMask() {
        return OwnerGrabButtonMask;
    }
    private static final int ShiftMask = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ShiftMask 1
     * }
     */
    public static int ShiftMask() {
        return ShiftMask;
    }
    private static final int LockMask = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LockMask 2
     * }
     */
    public static int LockMask() {
        return LockMask;
    }
    private static final int ControlMask = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ControlMask 4
     * }
     */
    public static int ControlMask() {
        return ControlMask;
    }
    private static final int Mod1Mask = (int)8L;
    /**
     * {@snippet lang=c :
     * #define Mod1Mask 8
     * }
     */
    public static int Mod1Mask() {
        return Mod1Mask;
    }
    private static final int Mod2Mask = (int)16L;
    /**
     * {@snippet lang=c :
     * #define Mod2Mask 16
     * }
     */
    public static int Mod2Mask() {
        return Mod2Mask;
    }
    private static final int Mod3Mask = (int)32L;
    /**
     * {@snippet lang=c :
     * #define Mod3Mask 32
     * }
     */
    public static int Mod3Mask() {
        return Mod3Mask;
    }
    private static final int Mod4Mask = (int)64L;
    /**
     * {@snippet lang=c :
     * #define Mod4Mask 64
     * }
     */
    public static int Mod4Mask() {
        return Mod4Mask;
    }
    private static final int Mod5Mask = (int)128L;
    /**
     * {@snippet lang=c :
     * #define Mod5Mask 128
     * }
     */
    public static int Mod5Mask() {
        return Mod5Mask;
    }
    private static final int Button1Mask = (int)256L;
    /**
     * {@snippet lang=c :
     * #define Button1Mask 256
     * }
     */
    public static int Button1Mask() {
        return Button1Mask;
    }
    private static final int Button2Mask = (int)512L;
    /**
     * {@snippet lang=c :
     * #define Button2Mask 512
     * }
     */
    public static int Button2Mask() {
        return Button2Mask;
    }
    private static final int Button3Mask = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define Button3Mask 1024
     * }
     */
    public static int Button3Mask() {
        return Button3Mask;
    }
    private static final int Button4Mask = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define Button4Mask 2048
     * }
     */
    public static int Button4Mask() {
        return Button4Mask;
    }
    private static final int Button5Mask = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define Button5Mask 4096
     * }
     */
    public static int Button5Mask() {
        return Button5Mask;
    }
    private static final int AnyModifier = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define AnyModifier 32768
     * }
     */
    public static int AnyModifier() {
        return AnyModifier;
    }
    private static final int RevertToNone = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RevertToNone 0
     * }
     */
    public static int RevertToNone() {
        return RevertToNone;
    }
    private static final int RevertToPointerRoot = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RevertToPointerRoot 1
     * }
     */
    public static int RevertToPointerRoot() {
        return RevertToPointerRoot;
    }
    private static final long CWBackPixmap = 1L;
    /**
     * {@snippet lang=c :
     * #define CWBackPixmap 1
     * }
     */
    public static long CWBackPixmap() {
        return CWBackPixmap;
    }
    private static final long CWBackPixel = 2L;
    /**
     * {@snippet lang=c :
     * #define CWBackPixel 2
     * }
     */
    public static long CWBackPixel() {
        return CWBackPixel;
    }
    private static final long CWBorderPixmap = 4L;
    /**
     * {@snippet lang=c :
     * #define CWBorderPixmap 4
     * }
     */
    public static long CWBorderPixmap() {
        return CWBorderPixmap;
    }
    private static final long CWBorderPixel = 8L;
    /**
     * {@snippet lang=c :
     * #define CWBorderPixel 8
     * }
     */
    public static long CWBorderPixel() {
        return CWBorderPixel;
    }
    private static final long CWBitGravity = 16L;
    /**
     * {@snippet lang=c :
     * #define CWBitGravity 16
     * }
     */
    public static long CWBitGravity() {
        return CWBitGravity;
    }
}

