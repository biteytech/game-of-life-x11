// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _XIMStringConversionText {
 *     unsigned short length;
 *     XIMStringConversionFeedback* feedback;
 *     int encoding_is_wchar;
 *     union  string;
 * };
 * }
 */
public class _XIMStringConversionText {

    public static MemoryLayout $LAYOUT() {
        return constants$117.const$0;
    }
    public static VarHandle length$VH() {
        return constants$117.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short length;
     * }
     */
    public static short length$get(MemorySegment seg) {
        return (short)constants$117.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short length;
     * }
     */
    public static void length$set(MemorySegment seg, short x) {
        constants$117.const$1.set(seg, x);
    }
    public static short length$get(MemorySegment seg, long index) {
        return (short)constants$117.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, short x) {
        constants$117.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle feedback$VH() {
        return constants$117.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XIMStringConversionFeedback* feedback;
     * }
     */
    public static MemorySegment feedback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$117.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XIMStringConversionFeedback* feedback;
     * }
     */
    public static void feedback$set(MemorySegment seg, MemorySegment x) {
        constants$117.const$2.set(seg, x);
    }
    public static MemorySegment feedback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$117.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void feedback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$117.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle encoding_is_wchar$VH() {
        return constants$117.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int encoding_is_wchar;
     * }
     */
    public static int encoding_is_wchar$get(MemorySegment seg) {
        return (int)constants$117.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int encoding_is_wchar;
     * }
     */
    public static void encoding_is_wchar$set(MemorySegment seg, int x) {
        constants$117.const$3.set(seg, x);
    }
    public static int encoding_is_wchar$get(MemorySegment seg, long index) {
        return (int)constants$117.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void encoding_is_wchar$set(MemorySegment seg, long index, int x) {
        constants$117.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     char* mbs;
     *     wchar_t* wcs;
     * };
     * }
     */
    public static final class string {

        // Suppresses default constructor, ensuring non-instantiability.
        private string() {}
        public static MemoryLayout $LAYOUT() {
            return constants$117.const$4;
        }
        public static VarHandle mbs$VH() {
            return constants$117.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * char* mbs;
         * }
         */
        public static MemorySegment mbs$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$117.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * char* mbs;
         * }
         */
        public static void mbs$set(MemorySegment seg, MemorySegment x) {
            constants$117.const$5.set(seg, x);
        }
        public static MemorySegment mbs$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$117.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void mbs$set(MemorySegment seg, long index, MemorySegment x) {
            constants$117.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wcs$VH() {
            return constants$118.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * wchar_t* wcs;
         * }
         */
        public static MemorySegment wcs$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$118.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * wchar_t* wcs;
         * }
         */
        public static void wcs$set(MemorySegment seg, MemorySegment x) {
            constants$118.const$0.set(seg, x);
        }
        public static MemorySegment wcs$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$118.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void wcs$set(MemorySegment seg, long index, MemorySegment x) {
            constants$118.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment string$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


