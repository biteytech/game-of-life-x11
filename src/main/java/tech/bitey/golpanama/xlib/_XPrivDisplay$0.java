// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     XExtData *ext_data;
 *     struct _XPrivate *private1;
 *     int fd;
 *     int private2;
 *     int proto_major_version;
 *     int proto_minor_version;
 *     char *vendor;
 *     XID private3;
 *     XID private4;
 *     XID private5;
 *     int private6;
 *     XID (*resource_alloc)(struct _XDisplay *);
 *     int byte_order;
 *     int bitmap_unit;
 *     int bitmap_pad;
 *     int bitmap_bit_order;
 *     int nformats;
 *     ScreenFormat *pixmap_format;
 *     int private8;
 *     int release;
 *     struct _XPrivate *private9;
 *     struct _XPrivate *private10;
 *     int qlen;
 *     unsigned long last_request_read;
 *     unsigned long request;
 *     XPointer private11;
 *     XPointer private12;
 *     XPointer private13;
 *     XPointer private14;
 *     unsigned int max_request_size;
 *     struct _XrmHashBucketRec *db;
 *     int (*private15)(struct _XDisplay *);
 *     char *display_name;
 *     int default_screen;
 *     int nscreens;
 *     Screen *screens;
 *     unsigned long motion_buffer;
 *     unsigned long private16;
 *     int min_keycode;
 *     int max_keycode;
 *     XPointer private17;
 *     XPointer private18;
 *     int private19;
 *     char *xdefaults;
 * }
 * }
 */
public class _XPrivDisplay$0 {

    _XPrivDisplay$0() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        Xlib_h.C_POINTER.withName("ext_data"),
        Xlib_h.C_POINTER.withName("private1"),
        Xlib_h.C_INT.withName("fd"),
        Xlib_h.C_INT.withName("private2"),
        Xlib_h.C_INT.withName("proto_major_version"),
        Xlib_h.C_INT.withName("proto_minor_version"),
        Xlib_h.C_POINTER.withName("vendor"),
        Xlib_h.C_LONG.withName("private3"),
        Xlib_h.C_LONG.withName("private4"),
        Xlib_h.C_LONG.withName("private5"),
        Xlib_h.C_INT.withName("private6"),
        MemoryLayout.paddingLayout(4),
        Xlib_h.C_POINTER.withName("resource_alloc"),
        Xlib_h.C_INT.withName("byte_order"),
        Xlib_h.C_INT.withName("bitmap_unit"),
        Xlib_h.C_INT.withName("bitmap_pad"),
        Xlib_h.C_INT.withName("bitmap_bit_order"),
        Xlib_h.C_INT.withName("nformats"),
        MemoryLayout.paddingLayout(4),
        Xlib_h.C_POINTER.withName("pixmap_format"),
        Xlib_h.C_INT.withName("private8"),
        Xlib_h.C_INT.withName("release"),
        Xlib_h.C_POINTER.withName("private9"),
        Xlib_h.C_POINTER.withName("private10"),
        Xlib_h.C_INT.withName("qlen"),
        MemoryLayout.paddingLayout(4),
        Xlib_h.C_LONG.withName("last_request_read"),
        Xlib_h.C_LONG.withName("request"),
        Xlib_h.C_POINTER.withName("private11"),
        Xlib_h.C_POINTER.withName("private12"),
        Xlib_h.C_POINTER.withName("private13"),
        Xlib_h.C_POINTER.withName("private14"),
        Xlib_h.C_INT.withName("max_request_size"),
        MemoryLayout.paddingLayout(4),
        Xlib_h.C_POINTER.withName("db"),
        Xlib_h.C_POINTER.withName("private15"),
        Xlib_h.C_POINTER.withName("display_name"),
        Xlib_h.C_INT.withName("default_screen"),
        Xlib_h.C_INT.withName("nscreens"),
        Xlib_h.C_POINTER.withName("screens"),
        Xlib_h.C_LONG.withName("motion_buffer"),
        Xlib_h.C_LONG.withName("private16"),
        Xlib_h.C_INT.withName("min_keycode"),
        Xlib_h.C_INT.withName("max_keycode"),
        Xlib_h.C_POINTER.withName("private17"),
        Xlib_h.C_POINTER.withName("private18"),
        Xlib_h.C_INT.withName("private19"),
        MemoryLayout.paddingLayout(4),
        Xlib_h.C_POINTER.withName("xdefaults")
    ).withName("$anon$493:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout ext_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ext_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XExtData *ext_data
     * }
     */
    public static final AddressLayout ext_data$layout() {
        return ext_data$LAYOUT;
    }

    private static final long ext_data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XExtData *ext_data
     * }
     */
    public static final long ext_data$offset() {
        return ext_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XExtData *ext_data
     * }
     */
    public static MemorySegment ext_data(MemorySegment struct) {
        return struct.get(ext_data$LAYOUT, ext_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XExtData *ext_data
     * }
     */
    public static void ext_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ext_data$LAYOUT, ext_data$OFFSET, fieldValue);
    }

    private static final AddressLayout private1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _XPrivate *private1
     * }
     */
    public static final AddressLayout private1$layout() {
        return private1$LAYOUT;
    }

    private static final long private1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _XPrivate *private1
     * }
     */
    public static final long private1$offset() {
        return private1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _XPrivate *private1
     * }
     */
    public static MemorySegment private1(MemorySegment struct) {
        return struct.get(private1$LAYOUT, private1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _XPrivate *private1
     * }
     */
    public static void private1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private1$LAYOUT, private1$OFFSET, fieldValue);
    }

    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final OfInt fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static int fd(MemorySegment struct) {
        return struct.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static void fd(MemorySegment struct, int fieldValue) {
        struct.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    private static final OfInt private2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("private2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int private2
     * }
     */
    public static final OfInt private2$layout() {
        return private2$LAYOUT;
    }

    private static final long private2$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int private2
     * }
     */
    public static final long private2$offset() {
        return private2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int private2
     * }
     */
    public static int private2(MemorySegment struct) {
        return struct.get(private2$LAYOUT, private2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int private2
     * }
     */
    public static void private2(MemorySegment struct, int fieldValue) {
        struct.set(private2$LAYOUT, private2$OFFSET, fieldValue);
    }

    private static final OfInt proto_major_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("proto_major_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int proto_major_version
     * }
     */
    public static final OfInt proto_major_version$layout() {
        return proto_major_version$LAYOUT;
    }

    private static final long proto_major_version$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int proto_major_version
     * }
     */
    public static final long proto_major_version$offset() {
        return proto_major_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int proto_major_version
     * }
     */
    public static int proto_major_version(MemorySegment struct) {
        return struct.get(proto_major_version$LAYOUT, proto_major_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int proto_major_version
     * }
     */
    public static void proto_major_version(MemorySegment struct, int fieldValue) {
        struct.set(proto_major_version$LAYOUT, proto_major_version$OFFSET, fieldValue);
    }

    private static final OfInt proto_minor_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("proto_minor_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int proto_minor_version
     * }
     */
    public static final OfInt proto_minor_version$layout() {
        return proto_minor_version$LAYOUT;
    }

    private static final long proto_minor_version$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int proto_minor_version
     * }
     */
    public static final long proto_minor_version$offset() {
        return proto_minor_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int proto_minor_version
     * }
     */
    public static int proto_minor_version(MemorySegment struct) {
        return struct.get(proto_minor_version$LAYOUT, proto_minor_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int proto_minor_version
     * }
     */
    public static void proto_minor_version(MemorySegment struct, int fieldValue) {
        struct.set(proto_minor_version$LAYOUT, proto_minor_version$OFFSET, fieldValue);
    }

    private static final AddressLayout vendor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vendor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *vendor
     * }
     */
    public static final AddressLayout vendor$layout() {
        return vendor$LAYOUT;
    }

    private static final long vendor$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *vendor
     * }
     */
    public static final long vendor$offset() {
        return vendor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *vendor
     * }
     */
    public static MemorySegment vendor(MemorySegment struct) {
        return struct.get(vendor$LAYOUT, vendor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *vendor
     * }
     */
    public static void vendor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vendor$LAYOUT, vendor$OFFSET, fieldValue);
    }

    private static final OfLong private3$LAYOUT = (OfLong)$LAYOUT.select(groupElement("private3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XID private3
     * }
     */
    public static final OfLong private3$layout() {
        return private3$LAYOUT;
    }

    private static final long private3$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XID private3
     * }
     */
    public static final long private3$offset() {
        return private3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XID private3
     * }
     */
    public static long private3(MemorySegment struct) {
        return struct.get(private3$LAYOUT, private3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XID private3
     * }
     */
    public static void private3(MemorySegment struct, long fieldValue) {
        struct.set(private3$LAYOUT, private3$OFFSET, fieldValue);
    }

    private static final OfLong private4$LAYOUT = (OfLong)$LAYOUT.select(groupElement("private4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XID private4
     * }
     */
    public static final OfLong private4$layout() {
        return private4$LAYOUT;
    }

    private static final long private4$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XID private4
     * }
     */
    public static final long private4$offset() {
        return private4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XID private4
     * }
     */
    public static long private4(MemorySegment struct) {
        return struct.get(private4$LAYOUT, private4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XID private4
     * }
     */
    public static void private4(MemorySegment struct, long fieldValue) {
        struct.set(private4$LAYOUT, private4$OFFSET, fieldValue);
    }

    private static final OfLong private5$LAYOUT = (OfLong)$LAYOUT.select(groupElement("private5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XID private5
     * }
     */
    public static final OfLong private5$layout() {
        return private5$LAYOUT;
    }

    private static final long private5$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XID private5
     * }
     */
    public static final long private5$offset() {
        return private5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XID private5
     * }
     */
    public static long private5(MemorySegment struct) {
        return struct.get(private5$LAYOUT, private5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XID private5
     * }
     */
    public static void private5(MemorySegment struct, long fieldValue) {
        struct.set(private5$LAYOUT, private5$OFFSET, fieldValue);
    }

    private static final OfInt private6$LAYOUT = (OfInt)$LAYOUT.select(groupElement("private6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int private6
     * }
     */
    public static final OfInt private6$layout() {
        return private6$LAYOUT;
    }

    private static final long private6$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int private6
     * }
     */
    public static final long private6$offset() {
        return private6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int private6
     * }
     */
    public static int private6(MemorySegment struct) {
        return struct.get(private6$LAYOUT, private6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int private6
     * }
     */
    public static void private6(MemorySegment struct, int fieldValue) {
        struct.set(private6$LAYOUT, private6$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * XID (*resource_alloc)(struct _XDisplay *)
     * }
     */
    public class resource_alloc {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            Xlib_h.C_LONG,
            Xlib_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = Xlib_h.upcallHandle(resource_alloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(resource_alloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout resource_alloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resource_alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XID (*resource_alloc)(struct _XDisplay *)
     * }
     */
    public static final AddressLayout resource_alloc$layout() {
        return resource_alloc$LAYOUT;
    }

    private static final long resource_alloc$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XID (*resource_alloc)(struct _XDisplay *)
     * }
     */
    public static final long resource_alloc$offset() {
        return resource_alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XID (*resource_alloc)(struct _XDisplay *)
     * }
     */
    public static MemorySegment resource_alloc(MemorySegment struct) {
        return struct.get(resource_alloc$LAYOUT, resource_alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XID (*resource_alloc)(struct _XDisplay *)
     * }
     */
    public static void resource_alloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resource_alloc$LAYOUT, resource_alloc$OFFSET, fieldValue);
    }

    private static final OfInt byte_order$LAYOUT = (OfInt)$LAYOUT.select(groupElement("byte_order"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int byte_order
     * }
     */
    public static final OfInt byte_order$layout() {
        return byte_order$LAYOUT;
    }

    private static final long byte_order$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int byte_order
     * }
     */
    public static final long byte_order$offset() {
        return byte_order$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int byte_order
     * }
     */
    public static int byte_order(MemorySegment struct) {
        return struct.get(byte_order$LAYOUT, byte_order$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int byte_order
     * }
     */
    public static void byte_order(MemorySegment struct, int fieldValue) {
        struct.set(byte_order$LAYOUT, byte_order$OFFSET, fieldValue);
    }

    private static final OfInt bitmap_unit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bitmap_unit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bitmap_unit
     * }
     */
    public static final OfInt bitmap_unit$layout() {
        return bitmap_unit$LAYOUT;
    }

    private static final long bitmap_unit$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bitmap_unit
     * }
     */
    public static final long bitmap_unit$offset() {
        return bitmap_unit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bitmap_unit
     * }
     */
    public static int bitmap_unit(MemorySegment struct) {
        return struct.get(bitmap_unit$LAYOUT, bitmap_unit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bitmap_unit
     * }
     */
    public static void bitmap_unit(MemorySegment struct, int fieldValue) {
        struct.set(bitmap_unit$LAYOUT, bitmap_unit$OFFSET, fieldValue);
    }

    private static final OfInt bitmap_pad$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bitmap_pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bitmap_pad
     * }
     */
    public static final OfInt bitmap_pad$layout() {
        return bitmap_pad$LAYOUT;
    }

    private static final long bitmap_pad$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bitmap_pad
     * }
     */
    public static final long bitmap_pad$offset() {
        return bitmap_pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bitmap_pad
     * }
     */
    public static int bitmap_pad(MemorySegment struct) {
        return struct.get(bitmap_pad$LAYOUT, bitmap_pad$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bitmap_pad
     * }
     */
    public static void bitmap_pad(MemorySegment struct, int fieldValue) {
        struct.set(bitmap_pad$LAYOUT, bitmap_pad$OFFSET, fieldValue);
    }

    private static final OfInt bitmap_bit_order$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bitmap_bit_order"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bitmap_bit_order
     * }
     */
    public static final OfInt bitmap_bit_order$layout() {
        return bitmap_bit_order$LAYOUT;
    }

    private static final long bitmap_bit_order$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bitmap_bit_order
     * }
     */
    public static final long bitmap_bit_order$offset() {
        return bitmap_bit_order$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bitmap_bit_order
     * }
     */
    public static int bitmap_bit_order(MemorySegment struct) {
        return struct.get(bitmap_bit_order$LAYOUT, bitmap_bit_order$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bitmap_bit_order
     * }
     */
    public static void bitmap_bit_order(MemorySegment struct, int fieldValue) {
        struct.set(bitmap_bit_order$LAYOUT, bitmap_bit_order$OFFSET, fieldValue);
    }

    private static final OfInt nformats$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nformats"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int nformats
     * }
     */
    public static final OfInt nformats$layout() {
        return nformats$LAYOUT;
    }

    private static final long nformats$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int nformats
     * }
     */
    public static final long nformats$offset() {
        return nformats$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int nformats
     * }
     */
    public static int nformats(MemorySegment struct) {
        return struct.get(nformats$LAYOUT, nformats$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int nformats
     * }
     */
    public static void nformats(MemorySegment struct, int fieldValue) {
        struct.set(nformats$LAYOUT, nformats$OFFSET, fieldValue);
    }

    private static final AddressLayout pixmap_format$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pixmap_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ScreenFormat *pixmap_format
     * }
     */
    public static final AddressLayout pixmap_format$layout() {
        return pixmap_format$LAYOUT;
    }

    private static final long pixmap_format$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ScreenFormat *pixmap_format
     * }
     */
    public static final long pixmap_format$offset() {
        return pixmap_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ScreenFormat *pixmap_format
     * }
     */
    public static MemorySegment pixmap_format(MemorySegment struct) {
        return struct.get(pixmap_format$LAYOUT, pixmap_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ScreenFormat *pixmap_format
     * }
     */
    public static void pixmap_format(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pixmap_format$LAYOUT, pixmap_format$OFFSET, fieldValue);
    }

    private static final OfInt private8$LAYOUT = (OfInt)$LAYOUT.select(groupElement("private8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int private8
     * }
     */
    public static final OfInt private8$layout() {
        return private8$LAYOUT;
    }

    private static final long private8$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int private8
     * }
     */
    public static final long private8$offset() {
        return private8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int private8
     * }
     */
    public static int private8(MemorySegment struct) {
        return struct.get(private8$LAYOUT, private8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int private8
     * }
     */
    public static void private8(MemorySegment struct, int fieldValue) {
        struct.set(private8$LAYOUT, private8$OFFSET, fieldValue);
    }

    private static final OfInt release$LAYOUT = (OfInt)$LAYOUT.select(groupElement("release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int release
     * }
     */
    public static final OfInt release$layout() {
        return release$LAYOUT;
    }

    private static final long release$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int release
     * }
     */
    public static final long release$offset() {
        return release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int release
     * }
     */
    public static int release(MemorySegment struct) {
        return struct.get(release$LAYOUT, release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int release
     * }
     */
    public static void release(MemorySegment struct, int fieldValue) {
        struct.set(release$LAYOUT, release$OFFSET, fieldValue);
    }

    private static final AddressLayout private9$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private9"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _XPrivate *private9
     * }
     */
    public static final AddressLayout private9$layout() {
        return private9$LAYOUT;
    }

    private static final long private9$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _XPrivate *private9
     * }
     */
    public static final long private9$offset() {
        return private9$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _XPrivate *private9
     * }
     */
    public static MemorySegment private9(MemorySegment struct) {
        return struct.get(private9$LAYOUT, private9$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _XPrivate *private9
     * }
     */
    public static void private9(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private9$LAYOUT, private9$OFFSET, fieldValue);
    }

    private static final AddressLayout private10$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private10"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _XPrivate *private10
     * }
     */
    public static final AddressLayout private10$layout() {
        return private10$LAYOUT;
    }

    private static final long private10$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _XPrivate *private10
     * }
     */
    public static final long private10$offset() {
        return private10$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _XPrivate *private10
     * }
     */
    public static MemorySegment private10(MemorySegment struct) {
        return struct.get(private10$LAYOUT, private10$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _XPrivate *private10
     * }
     */
    public static void private10(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private10$LAYOUT, private10$OFFSET, fieldValue);
    }

    private static final OfInt qlen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int qlen
     * }
     */
    public static final OfInt qlen$layout() {
        return qlen$LAYOUT;
    }

    private static final long qlen$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int qlen
     * }
     */
    public static final long qlen$offset() {
        return qlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int qlen
     * }
     */
    public static int qlen(MemorySegment struct) {
        return struct.get(qlen$LAYOUT, qlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int qlen
     * }
     */
    public static void qlen(MemorySegment struct, int fieldValue) {
        struct.set(qlen$LAYOUT, qlen$OFFSET, fieldValue);
    }

    private static final OfLong last_request_read$LAYOUT = (OfLong)$LAYOUT.select(groupElement("last_request_read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long last_request_read
     * }
     */
    public static final OfLong last_request_read$layout() {
        return last_request_read$LAYOUT;
    }

    private static final long last_request_read$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long last_request_read
     * }
     */
    public static final long last_request_read$offset() {
        return last_request_read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long last_request_read
     * }
     */
    public static long last_request_read(MemorySegment struct) {
        return struct.get(last_request_read$LAYOUT, last_request_read$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long last_request_read
     * }
     */
    public static void last_request_read(MemorySegment struct, long fieldValue) {
        struct.set(last_request_read$LAYOUT, last_request_read$OFFSET, fieldValue);
    }

    private static final OfLong request$LAYOUT = (OfLong)$LAYOUT.select(groupElement("request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long request
     * }
     */
    public static final OfLong request$layout() {
        return request$LAYOUT;
    }

    private static final long request$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long request
     * }
     */
    public static final long request$offset() {
        return request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long request
     * }
     */
    public static long request(MemorySegment struct) {
        return struct.get(request$LAYOUT, request$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long request
     * }
     */
    public static void request(MemorySegment struct, long fieldValue) {
        struct.set(request$LAYOUT, request$OFFSET, fieldValue);
    }

    private static final AddressLayout private11$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private11"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XPointer private11
     * }
     */
    public static final AddressLayout private11$layout() {
        return private11$LAYOUT;
    }

    private static final long private11$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XPointer private11
     * }
     */
    public static final long private11$offset() {
        return private11$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XPointer private11
     * }
     */
    public static MemorySegment private11(MemorySegment struct) {
        return struct.get(private11$LAYOUT, private11$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XPointer private11
     * }
     */
    public static void private11(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private11$LAYOUT, private11$OFFSET, fieldValue);
    }

    private static final AddressLayout private12$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private12"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XPointer private12
     * }
     */
    public static final AddressLayout private12$layout() {
        return private12$LAYOUT;
    }

    private static final long private12$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XPointer private12
     * }
     */
    public static final long private12$offset() {
        return private12$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XPointer private12
     * }
     */
    public static MemorySegment private12(MemorySegment struct) {
        return struct.get(private12$LAYOUT, private12$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XPointer private12
     * }
     */
    public static void private12(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private12$LAYOUT, private12$OFFSET, fieldValue);
    }

    private static final AddressLayout private13$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private13"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XPointer private13
     * }
     */
    public static final AddressLayout private13$layout() {
        return private13$LAYOUT;
    }

    private static final long private13$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XPointer private13
     * }
     */
    public static final long private13$offset() {
        return private13$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XPointer private13
     * }
     */
    public static MemorySegment private13(MemorySegment struct) {
        return struct.get(private13$LAYOUT, private13$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XPointer private13
     * }
     */
    public static void private13(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private13$LAYOUT, private13$OFFSET, fieldValue);
    }

    private static final AddressLayout private14$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private14"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XPointer private14
     * }
     */
    public static final AddressLayout private14$layout() {
        return private14$LAYOUT;
    }

    private static final long private14$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XPointer private14
     * }
     */
    public static final long private14$offset() {
        return private14$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XPointer private14
     * }
     */
    public static MemorySegment private14(MemorySegment struct) {
        return struct.get(private14$LAYOUT, private14$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XPointer private14
     * }
     */
    public static void private14(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private14$LAYOUT, private14$OFFSET, fieldValue);
    }

    private static final OfInt max_request_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_request_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int max_request_size
     * }
     */
    public static final OfInt max_request_size$layout() {
        return max_request_size$LAYOUT;
    }

    private static final long max_request_size$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int max_request_size
     * }
     */
    public static final long max_request_size$offset() {
        return max_request_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int max_request_size
     * }
     */
    public static int max_request_size(MemorySegment struct) {
        return struct.get(max_request_size$LAYOUT, max_request_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int max_request_size
     * }
     */
    public static void max_request_size(MemorySegment struct, int fieldValue) {
        struct.set(max_request_size$LAYOUT, max_request_size$OFFSET, fieldValue);
    }

    private static final AddressLayout db$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("db"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _XrmHashBucketRec *db
     * }
     */
    public static final AddressLayout db$layout() {
        return db$LAYOUT;
    }

    private static final long db$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _XrmHashBucketRec *db
     * }
     */
    public static final long db$offset() {
        return db$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _XrmHashBucketRec *db
     * }
     */
    public static MemorySegment db(MemorySegment struct) {
        return struct.get(db$LAYOUT, db$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _XrmHashBucketRec *db
     * }
     */
    public static void db(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(db$LAYOUT, db$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*private15)(struct _XDisplay *)
     * }
     */
    public class private15 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            Xlib_h.C_INT,
            Xlib_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = Xlib_h.upcallHandle(private15.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(private15.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout private15$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private15"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*private15)(struct _XDisplay *)
     * }
     */
    public static final AddressLayout private15$layout() {
        return private15$LAYOUT;
    }

    private static final long private15$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*private15)(struct _XDisplay *)
     * }
     */
    public static final long private15$offset() {
        return private15$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*private15)(struct _XDisplay *)
     * }
     */
    public static MemorySegment private15(MemorySegment struct) {
        return struct.get(private15$LAYOUT, private15$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*private15)(struct _XDisplay *)
     * }
     */
    public static void private15(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private15$LAYOUT, private15$OFFSET, fieldValue);
    }

    private static final AddressLayout display_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("display_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *display_name
     * }
     */
    public static final AddressLayout display_name$layout() {
        return display_name$LAYOUT;
    }

    private static final long display_name$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *display_name
     * }
     */
    public static final long display_name$offset() {
        return display_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *display_name
     * }
     */
    public static MemorySegment display_name(MemorySegment struct) {
        return struct.get(display_name$LAYOUT, display_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *display_name
     * }
     */
    public static void display_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(display_name$LAYOUT, display_name$OFFSET, fieldValue);
    }

    private static final OfInt default_screen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("default_screen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int default_screen
     * }
     */
    public static final OfInt default_screen$layout() {
        return default_screen$LAYOUT;
    }

    private static final long default_screen$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int default_screen
     * }
     */
    public static final long default_screen$offset() {
        return default_screen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int default_screen
     * }
     */
    public static int default_screen(MemorySegment struct) {
        return struct.get(default_screen$LAYOUT, default_screen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int default_screen
     * }
     */
    public static void default_screen(MemorySegment struct, int fieldValue) {
        struct.set(default_screen$LAYOUT, default_screen$OFFSET, fieldValue);
    }

    private static final OfInt nscreens$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nscreens"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int nscreens
     * }
     */
    public static final OfInt nscreens$layout() {
        return nscreens$LAYOUT;
    }

    private static final long nscreens$OFFSET = 228;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int nscreens
     * }
     */
    public static final long nscreens$offset() {
        return nscreens$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int nscreens
     * }
     */
    public static int nscreens(MemorySegment struct) {
        return struct.get(nscreens$LAYOUT, nscreens$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int nscreens
     * }
     */
    public static void nscreens(MemorySegment struct, int fieldValue) {
        struct.set(nscreens$LAYOUT, nscreens$OFFSET, fieldValue);
    }

    private static final AddressLayout screens$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("screens"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Screen *screens
     * }
     */
    public static final AddressLayout screens$layout() {
        return screens$LAYOUT;
    }

    private static final long screens$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Screen *screens
     * }
     */
    public static final long screens$offset() {
        return screens$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Screen *screens
     * }
     */
    public static MemorySegment screens(MemorySegment struct) {
        return struct.get(screens$LAYOUT, screens$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Screen *screens
     * }
     */
    public static void screens(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(screens$LAYOUT, screens$OFFSET, fieldValue);
    }

    private static final OfLong motion_buffer$LAYOUT = (OfLong)$LAYOUT.select(groupElement("motion_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long motion_buffer
     * }
     */
    public static final OfLong motion_buffer$layout() {
        return motion_buffer$LAYOUT;
    }

    private static final long motion_buffer$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long motion_buffer
     * }
     */
    public static final long motion_buffer$offset() {
        return motion_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long motion_buffer
     * }
     */
    public static long motion_buffer(MemorySegment struct) {
        return struct.get(motion_buffer$LAYOUT, motion_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long motion_buffer
     * }
     */
    public static void motion_buffer(MemorySegment struct, long fieldValue) {
        struct.set(motion_buffer$LAYOUT, motion_buffer$OFFSET, fieldValue);
    }

    private static final OfLong private16$LAYOUT = (OfLong)$LAYOUT.select(groupElement("private16"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long private16
     * }
     */
    public static final OfLong private16$layout() {
        return private16$LAYOUT;
    }

    private static final long private16$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long private16
     * }
     */
    public static final long private16$offset() {
        return private16$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long private16
     * }
     */
    public static long private16(MemorySegment struct) {
        return struct.get(private16$LAYOUT, private16$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long private16
     * }
     */
    public static void private16(MemorySegment struct, long fieldValue) {
        struct.set(private16$LAYOUT, private16$OFFSET, fieldValue);
    }

    private static final OfInt min_keycode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("min_keycode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int min_keycode
     * }
     */
    public static final OfInt min_keycode$layout() {
        return min_keycode$LAYOUT;
    }

    private static final long min_keycode$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int min_keycode
     * }
     */
    public static final long min_keycode$offset() {
        return min_keycode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int min_keycode
     * }
     */
    public static int min_keycode(MemorySegment struct) {
        return struct.get(min_keycode$LAYOUT, min_keycode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int min_keycode
     * }
     */
    public static void min_keycode(MemorySegment struct, int fieldValue) {
        struct.set(min_keycode$LAYOUT, min_keycode$OFFSET, fieldValue);
    }

    private static final OfInt max_keycode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_keycode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_keycode
     * }
     */
    public static final OfInt max_keycode$layout() {
        return max_keycode$LAYOUT;
    }

    private static final long max_keycode$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_keycode
     * }
     */
    public static final long max_keycode$offset() {
        return max_keycode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_keycode
     * }
     */
    public static int max_keycode(MemorySegment struct) {
        return struct.get(max_keycode$LAYOUT, max_keycode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_keycode
     * }
     */
    public static void max_keycode(MemorySegment struct, int fieldValue) {
        struct.set(max_keycode$LAYOUT, max_keycode$OFFSET, fieldValue);
    }

    private static final AddressLayout private17$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private17"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XPointer private17
     * }
     */
    public static final AddressLayout private17$layout() {
        return private17$LAYOUT;
    }

    private static final long private17$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XPointer private17
     * }
     */
    public static final long private17$offset() {
        return private17$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XPointer private17
     * }
     */
    public static MemorySegment private17(MemorySegment struct) {
        return struct.get(private17$LAYOUT, private17$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XPointer private17
     * }
     */
    public static void private17(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private17$LAYOUT, private17$OFFSET, fieldValue);
    }

    private static final AddressLayout private18$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private18"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * XPointer private18
     * }
     */
    public static final AddressLayout private18$layout() {
        return private18$LAYOUT;
    }

    private static final long private18$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * XPointer private18
     * }
     */
    public static final long private18$offset() {
        return private18$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * XPointer private18
     * }
     */
    public static MemorySegment private18(MemorySegment struct) {
        return struct.get(private18$LAYOUT, private18$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * XPointer private18
     * }
     */
    public static void private18(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private18$LAYOUT, private18$OFFSET, fieldValue);
    }

    private static final OfInt private19$LAYOUT = (OfInt)$LAYOUT.select(groupElement("private19"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int private19
     * }
     */
    public static final OfInt private19$layout() {
        return private19$LAYOUT;
    }

    private static final long private19$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int private19
     * }
     */
    public static final long private19$offset() {
        return private19$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int private19
     * }
     */
    public static int private19(MemorySegment struct) {
        return struct.get(private19$LAYOUT, private19$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int private19
     * }
     */
    public static void private19(MemorySegment struct, int fieldValue) {
        struct.set(private19$LAYOUT, private19$OFFSET, fieldValue);
    }

    private static final AddressLayout xdefaults$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xdefaults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *xdefaults
     * }
     */
    public static final AddressLayout xdefaults$layout() {
        return xdefaults$LAYOUT;
    }

    private static final long xdefaults$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *xdefaults
     * }
     */
    public static final long xdefaults$offset() {
        return xdefaults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *xdefaults
     * }
     */
    public static MemorySegment xdefaults(MemorySegment struct) {
        return struct.get(xdefaults$LAYOUT, xdefaults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *xdefaults
     * }
     */
    public static void xdefaults(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xdefaults$LAYOUT, xdefaults$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

