// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     int extension;
 *     int major_opcode;
 *     int first_event;
 *     int first_error;
 * };
 * }
 */
public class XExtCodes {

    public static MemoryLayout $LAYOUT() {
        return constants$11.const$5;
    }
    public static VarHandle extension$VH() {
        return constants$12.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int extension;
     * }
     */
    public static int extension$get(MemorySegment seg) {
        return (int)constants$12.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int extension;
     * }
     */
    public static void extension$set(MemorySegment seg, int x) {
        constants$12.const$0.set(seg, x);
    }
    public static int extension$get(MemorySegment seg, long index) {
        return (int)constants$12.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extension$set(MemorySegment seg, long index, int x) {
        constants$12.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle major_opcode$VH() {
        return constants$12.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int major_opcode;
     * }
     */
    public static int major_opcode$get(MemorySegment seg) {
        return (int)constants$12.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int major_opcode;
     * }
     */
    public static void major_opcode$set(MemorySegment seg, int x) {
        constants$12.const$1.set(seg, x);
    }
    public static int major_opcode$get(MemorySegment seg, long index) {
        return (int)constants$12.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void major_opcode$set(MemorySegment seg, long index, int x) {
        constants$12.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle first_event$VH() {
        return constants$12.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int first_event;
     * }
     */
    public static int first_event$get(MemorySegment seg) {
        return (int)constants$12.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int first_event;
     * }
     */
    public static void first_event$set(MemorySegment seg, int x) {
        constants$12.const$2.set(seg, x);
    }
    public static int first_event$get(MemorySegment seg, long index) {
        return (int)constants$12.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void first_event$set(MemorySegment seg, long index, int x) {
        constants$12.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle first_error$VH() {
        return constants$12.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int first_error;
     * }
     */
    public static int first_error$get(MemorySegment seg) {
        return (int)constants$12.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int first_error;
     * }
     */
    public static void first_error$set(MemorySegment seg, int x) {
        constants$12.const$3.set(seg, x);
    }
    public static int first_error$get(MemorySegment seg, long index) {
        return (int)constants$12.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void first_error$set(MemorySegment seg, long index, int x) {
        constants$12.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


