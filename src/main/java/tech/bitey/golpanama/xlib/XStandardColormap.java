// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     Colormap colormap;
 *     unsigned long red_max;
 *     unsigned long red_mult;
 *     unsigned long green_max;
 *     unsigned long green_mult;
 *     unsigned long blue_max;
 *     unsigned long blue_mult;
 *     unsigned long base_pixel;
 *     VisualID visualid;
 *     XID killid;
 * };
 * }
 */
public class XStandardColormap {

    public static MemoryLayout $LAYOUT() {
        return constants$220.const$3;
    }
    public static VarHandle colormap$VH() {
        return constants$220.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Colormap colormap;
     * }
     */
    public static long colormap$get(MemorySegment seg) {
        return (long)constants$220.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Colormap colormap;
     * }
     */
    public static void colormap$set(MemorySegment seg, long x) {
        constants$220.const$4.set(seg, x);
    }
    public static long colormap$get(MemorySegment seg, long index) {
        return (long)constants$220.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void colormap$set(MemorySegment seg, long index, long x) {
        constants$220.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle red_max$VH() {
        return constants$220.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long red_max;
     * }
     */
    public static long red_max$get(MemorySegment seg) {
        return (long)constants$220.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long red_max;
     * }
     */
    public static void red_max$set(MemorySegment seg, long x) {
        constants$220.const$5.set(seg, x);
    }
    public static long red_max$get(MemorySegment seg, long index) {
        return (long)constants$220.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void red_max$set(MemorySegment seg, long index, long x) {
        constants$220.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle red_mult$VH() {
        return constants$221.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long red_mult;
     * }
     */
    public static long red_mult$get(MemorySegment seg) {
        return (long)constants$221.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long red_mult;
     * }
     */
    public static void red_mult$set(MemorySegment seg, long x) {
        constants$221.const$0.set(seg, x);
    }
    public static long red_mult$get(MemorySegment seg, long index) {
        return (long)constants$221.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void red_mult$set(MemorySegment seg, long index, long x) {
        constants$221.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle green_max$VH() {
        return constants$221.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long green_max;
     * }
     */
    public static long green_max$get(MemorySegment seg) {
        return (long)constants$221.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long green_max;
     * }
     */
    public static void green_max$set(MemorySegment seg, long x) {
        constants$221.const$1.set(seg, x);
    }
    public static long green_max$get(MemorySegment seg, long index) {
        return (long)constants$221.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void green_max$set(MemorySegment seg, long index, long x) {
        constants$221.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle green_mult$VH() {
        return constants$221.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long green_mult;
     * }
     */
    public static long green_mult$get(MemorySegment seg) {
        return (long)constants$221.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long green_mult;
     * }
     */
    public static void green_mult$set(MemorySegment seg, long x) {
        constants$221.const$2.set(seg, x);
    }
    public static long green_mult$get(MemorySegment seg, long index) {
        return (long)constants$221.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void green_mult$set(MemorySegment seg, long index, long x) {
        constants$221.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blue_max$VH() {
        return constants$221.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long blue_max;
     * }
     */
    public static long blue_max$get(MemorySegment seg) {
        return (long)constants$221.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long blue_max;
     * }
     */
    public static void blue_max$set(MemorySegment seg, long x) {
        constants$221.const$3.set(seg, x);
    }
    public static long blue_max$get(MemorySegment seg, long index) {
        return (long)constants$221.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_max$set(MemorySegment seg, long index, long x) {
        constants$221.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blue_mult$VH() {
        return constants$221.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long blue_mult;
     * }
     */
    public static long blue_mult$get(MemorySegment seg) {
        return (long)constants$221.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long blue_mult;
     * }
     */
    public static void blue_mult$set(MemorySegment seg, long x) {
        constants$221.const$4.set(seg, x);
    }
    public static long blue_mult$get(MemorySegment seg, long index) {
        return (long)constants$221.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_mult$set(MemorySegment seg, long index, long x) {
        constants$221.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle base_pixel$VH() {
        return constants$221.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long base_pixel;
     * }
     */
    public static long base_pixel$get(MemorySegment seg) {
        return (long)constants$221.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long base_pixel;
     * }
     */
    public static void base_pixel$set(MemorySegment seg, long x) {
        constants$221.const$5.set(seg, x);
    }
    public static long base_pixel$get(MemorySegment seg, long index) {
        return (long)constants$221.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void base_pixel$set(MemorySegment seg, long index, long x) {
        constants$221.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle visualid$VH() {
        return constants$222.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static long visualid$get(MemorySegment seg) {
        return (long)constants$222.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static void visualid$set(MemorySegment seg, long x) {
        constants$222.const$0.set(seg, x);
    }
    public static long visualid$get(MemorySegment seg, long index) {
        return (long)constants$222.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void visualid$set(MemorySegment seg, long index, long x) {
        constants$222.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle killid$VH() {
        return constants$222.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XID killid;
     * }
     */
    public static long killid$get(MemorySegment seg) {
        return (long)constants$222.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XID killid;
     * }
     */
    public static void killid$set(MemorySegment seg, long x) {
        constants$222.const$1.set(seg, x);
    }
    public static long killid$get(MemorySegment seg, long index) {
        return (long)constants$222.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void killid$set(MemorySegment seg, long index, long x) {
        constants$222.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


