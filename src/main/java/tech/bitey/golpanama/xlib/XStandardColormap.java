// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     Colormap colormap;
 *     unsigned long red_max;
 *     unsigned long red_mult;
 *     unsigned long green_max;
 *     unsigned long green_mult;
 *     unsigned long blue_max;
 *     unsigned long blue_mult;
 *     unsigned long base_pixel;
 *     VisualID visualid;
 *     XID killid;
 * };
 * }
 */
public class XStandardColormap {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("colormap"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("red_max"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("red_mult"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("green_max"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("green_mult"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("blue_max"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("blue_mult"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("base_pixel"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("visualid"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("killid")
    );
    public static MemoryLayout $LAYOUT() {
        return XStandardColormap.$struct$LAYOUT;
    }
    static final VarHandle colormap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("colormap"));
    public static VarHandle colormap$VH() {
        return XStandardColormap.colormap$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Colormap colormap;
     * }
     */
    public static long colormap$get(MemorySegment seg) {
        return (long)XStandardColormap.colormap$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Colormap colormap;
     * }
     */
    public static void colormap$set(MemorySegment seg, long x) {
        XStandardColormap.colormap$VH.set(seg, x);
    }
    public static long colormap$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.colormap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colormap$set(MemorySegment seg, long index, long x) {
        XStandardColormap.colormap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle red_max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("red_max"));
    public static VarHandle red_max$VH() {
        return XStandardColormap.red_max$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long red_max;
     * }
     */
    public static long red_max$get(MemorySegment seg) {
        return (long)XStandardColormap.red_max$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long red_max;
     * }
     */
    public static void red_max$set(MemorySegment seg, long x) {
        XStandardColormap.red_max$VH.set(seg, x);
    }
    public static long red_max$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.red_max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red_max$set(MemorySegment seg, long index, long x) {
        XStandardColormap.red_max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle red_mult$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("red_mult"));
    public static VarHandle red_mult$VH() {
        return XStandardColormap.red_mult$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long red_mult;
     * }
     */
    public static long red_mult$get(MemorySegment seg) {
        return (long)XStandardColormap.red_mult$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long red_mult;
     * }
     */
    public static void red_mult$set(MemorySegment seg, long x) {
        XStandardColormap.red_mult$VH.set(seg, x);
    }
    public static long red_mult$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.red_mult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void red_mult$set(MemorySegment seg, long index, long x) {
        XStandardColormap.red_mult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("green_max"));
    public static VarHandle green_max$VH() {
        return XStandardColormap.green_max$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long green_max;
     * }
     */
    public static long green_max$get(MemorySegment seg) {
        return (long)XStandardColormap.green_max$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long green_max;
     * }
     */
    public static void green_max$set(MemorySegment seg, long x) {
        XStandardColormap.green_max$VH.set(seg, x);
    }
    public static long green_max$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.green_max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_max$set(MemorySegment seg, long index, long x) {
        XStandardColormap.green_max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle green_mult$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("green_mult"));
    public static VarHandle green_mult$VH() {
        return XStandardColormap.green_mult$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long green_mult;
     * }
     */
    public static long green_mult$get(MemorySegment seg) {
        return (long)XStandardColormap.green_mult$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long green_mult;
     * }
     */
    public static void green_mult$set(MemorySegment seg, long x) {
        XStandardColormap.green_mult$VH.set(seg, x);
    }
    public static long green_mult$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.green_mult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void green_mult$set(MemorySegment seg, long index, long x) {
        XStandardColormap.green_mult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue_max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("blue_max"));
    public static VarHandle blue_max$VH() {
        return XStandardColormap.blue_max$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long blue_max;
     * }
     */
    public static long blue_max$get(MemorySegment seg) {
        return (long)XStandardColormap.blue_max$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long blue_max;
     * }
     */
    public static void blue_max$set(MemorySegment seg, long x) {
        XStandardColormap.blue_max$VH.set(seg, x);
    }
    public static long blue_max$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.blue_max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_max$set(MemorySegment seg, long index, long x) {
        XStandardColormap.blue_max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle blue_mult$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("blue_mult"));
    public static VarHandle blue_mult$VH() {
        return XStandardColormap.blue_mult$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long blue_mult;
     * }
     */
    public static long blue_mult$get(MemorySegment seg) {
        return (long)XStandardColormap.blue_mult$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long blue_mult;
     * }
     */
    public static void blue_mult$set(MemorySegment seg, long x) {
        XStandardColormap.blue_mult$VH.set(seg, x);
    }
    public static long blue_mult$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.blue_mult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void blue_mult$set(MemorySegment seg, long index, long x) {
        XStandardColormap.blue_mult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle base_pixel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("base_pixel"));
    public static VarHandle base_pixel$VH() {
        return XStandardColormap.base_pixel$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long base_pixel;
     * }
     */
    public static long base_pixel$get(MemorySegment seg) {
        return (long)XStandardColormap.base_pixel$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long base_pixel;
     * }
     */
    public static void base_pixel$set(MemorySegment seg, long x) {
        XStandardColormap.base_pixel$VH.set(seg, x);
    }
    public static long base_pixel$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.base_pixel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void base_pixel$set(MemorySegment seg, long index, long x) {
        XStandardColormap.base_pixel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle visualid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visualid"));
    public static VarHandle visualid$VH() {
        return XStandardColormap.visualid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static long visualid$get(MemorySegment seg) {
        return (long)XStandardColormap.visualid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VisualID visualid;
     * }
     */
    public static void visualid$set(MemorySegment seg, long x) {
        XStandardColormap.visualid$VH.set(seg, x);
    }
    public static long visualid$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.visualid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visualid$set(MemorySegment seg, long index, long x) {
        XStandardColormap.visualid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle killid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("killid"));
    public static VarHandle killid$VH() {
        return XStandardColormap.killid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XID killid;
     * }
     */
    public static long killid$get(MemorySegment seg) {
        return (long)XStandardColormap.killid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XID killid;
     * }
     */
    public static void killid$set(MemorySegment seg, long x) {
        XStandardColormap.killid$VH.set(seg, x);
    }
    public static long killid$get(MemorySegment seg, long index) {
        return (long)XStandardColormap.killid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void killid$set(MemorySegment seg, long index, long x) {
        XStandardColormap.killid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


