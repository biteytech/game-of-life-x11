// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     XExtData* ext_data;
 *     struct _XDisplay* display;
 *     Window root;
 *     int width;
 *     int height;
 *     int mwidth;
 *     int mheight;
 *     int ndepths;
 *     Depth* depths;
 *     int root_depth;
 *     Visual* root_visual;
 *     GC default_gc;
 *     Colormap cmap;
 *     unsigned long white_pixel;
 *     unsigned long black_pixel;
 *     int max_maps;
 *     int min_maps;
 *     int backing_store;
 *     int save_unders;
 *     long root_input_mask;
 * };
 * }
 */
public class Screen {

    public static MemoryLayout $LAYOUT() {
        return constants$19.const$3;
    }
    public static VarHandle ext_data$VH() {
        return constants$19.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XExtData* ext_data;
     * }
     */
    public static MemorySegment ext_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XExtData* ext_data;
     * }
     */
    public static void ext_data$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$4.set(seg, x);
    }
    public static MemorySegment ext_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ext_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle display$VH() {
        return constants$19.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _XDisplay* display;
     * }
     */
    public static MemorySegment display$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _XDisplay* display;
     * }
     */
    public static void display$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$5.set(seg, x);
    }
    public static MemorySegment display$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void display$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle root$VH() {
        return constants$20.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Window root;
     * }
     */
    public static long root$get(MemorySegment seg) {
        return (long)constants$20.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Window root;
     * }
     */
    public static void root$set(MemorySegment seg, long x) {
        constants$20.const$0.set(seg, x);
    }
    public static long root$get(MemorySegment seg, long index) {
        return (long)constants$20.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void root$set(MemorySegment seg, long index, long x) {
        constants$20.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$20.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$20.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$20.const$1.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$20.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$20.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$20.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$20.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$20.const$2.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$20.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$20.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mwidth$VH() {
        return constants$20.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mwidth;
     * }
     */
    public static int mwidth$get(MemorySegment seg) {
        return (int)constants$20.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mwidth;
     * }
     */
    public static void mwidth$set(MemorySegment seg, int x) {
        constants$20.const$3.set(seg, x);
    }
    public static int mwidth$get(MemorySegment seg, long index) {
        return (int)constants$20.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mwidth$set(MemorySegment seg, long index, int x) {
        constants$20.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mheight$VH() {
        return constants$20.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mheight;
     * }
     */
    public static int mheight$get(MemorySegment seg) {
        return (int)constants$20.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mheight;
     * }
     */
    public static void mheight$set(MemorySegment seg, int x) {
        constants$20.const$4.set(seg, x);
    }
    public static int mheight$get(MemorySegment seg, long index) {
        return (int)constants$20.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mheight$set(MemorySegment seg, long index, int x) {
        constants$20.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ndepths$VH() {
        return constants$20.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ndepths;
     * }
     */
    public static int ndepths$get(MemorySegment seg) {
        return (int)constants$20.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ndepths;
     * }
     */
    public static void ndepths$set(MemorySegment seg, int x) {
        constants$20.const$5.set(seg, x);
    }
    public static int ndepths$get(MemorySegment seg, long index) {
        return (int)constants$20.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ndepths$set(MemorySegment seg, long index, int x) {
        constants$20.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depths$VH() {
        return constants$21.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Depth* depths;
     * }
     */
    public static MemorySegment depths$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Depth* depths;
     * }
     */
    public static void depths$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$0.set(seg, x);
    }
    public static MemorySegment depths$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void depths$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle root_depth$VH() {
        return constants$21.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int root_depth;
     * }
     */
    public static int root_depth$get(MemorySegment seg) {
        return (int)constants$21.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int root_depth;
     * }
     */
    public static void root_depth$set(MemorySegment seg, int x) {
        constants$21.const$1.set(seg, x);
    }
    public static int root_depth$get(MemorySegment seg, long index) {
        return (int)constants$21.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void root_depth$set(MemorySegment seg, long index, int x) {
        constants$21.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle root_visual$VH() {
        return constants$21.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Visual* root_visual;
     * }
     */
    public static MemorySegment root_visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Visual* root_visual;
     * }
     */
    public static void root_visual$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$2.set(seg, x);
    }
    public static MemorySegment root_visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void root_visual$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle default_gc$VH() {
        return constants$21.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GC default_gc;
     * }
     */
    public static MemorySegment default_gc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GC default_gc;
     * }
     */
    public static void default_gc$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$3.set(seg, x);
    }
    public static MemorySegment default_gc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void default_gc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cmap$VH() {
        return constants$21.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Colormap cmap;
     * }
     */
    public static long cmap$get(MemorySegment seg) {
        return (long)constants$21.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Colormap cmap;
     * }
     */
    public static void cmap$set(MemorySegment seg, long x) {
        constants$21.const$4.set(seg, x);
    }
    public static long cmap$get(MemorySegment seg, long index) {
        return (long)constants$21.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cmap$set(MemorySegment seg, long index, long x) {
        constants$21.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle white_pixel$VH() {
        return constants$21.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long white_pixel;
     * }
     */
    public static long white_pixel$get(MemorySegment seg) {
        return (long)constants$21.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long white_pixel;
     * }
     */
    public static void white_pixel$set(MemorySegment seg, long x) {
        constants$21.const$5.set(seg, x);
    }
    public static long white_pixel$get(MemorySegment seg, long index) {
        return (long)constants$21.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void white_pixel$set(MemorySegment seg, long index, long x) {
        constants$21.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle black_pixel$VH() {
        return constants$22.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long black_pixel;
     * }
     */
    public static long black_pixel$get(MemorySegment seg) {
        return (long)constants$22.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long black_pixel;
     * }
     */
    public static void black_pixel$set(MemorySegment seg, long x) {
        constants$22.const$0.set(seg, x);
    }
    public static long black_pixel$get(MemorySegment seg, long index) {
        return (long)constants$22.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void black_pixel$set(MemorySegment seg, long index, long x) {
        constants$22.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_maps$VH() {
        return constants$22.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_maps;
     * }
     */
    public static int max_maps$get(MemorySegment seg) {
        return (int)constants$22.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_maps;
     * }
     */
    public static void max_maps$set(MemorySegment seg, int x) {
        constants$22.const$1.set(seg, x);
    }
    public static int max_maps$get(MemorySegment seg, long index) {
        return (int)constants$22.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void max_maps$set(MemorySegment seg, long index, int x) {
        constants$22.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle min_maps$VH() {
        return constants$22.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_maps;
     * }
     */
    public static int min_maps$get(MemorySegment seg) {
        return (int)constants$22.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_maps;
     * }
     */
    public static void min_maps$set(MemorySegment seg, int x) {
        constants$22.const$2.set(seg, x);
    }
    public static int min_maps$get(MemorySegment seg, long index) {
        return (int)constants$22.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void min_maps$set(MemorySegment seg, long index, int x) {
        constants$22.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle backing_store$VH() {
        return constants$22.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int backing_store;
     * }
     */
    public static int backing_store$get(MemorySegment seg) {
        return (int)constants$22.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int backing_store;
     * }
     */
    public static void backing_store$set(MemorySegment seg, int x) {
        constants$22.const$3.set(seg, x);
    }
    public static int backing_store$get(MemorySegment seg, long index) {
        return (int)constants$22.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void backing_store$set(MemorySegment seg, long index, int x) {
        constants$22.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle save_unders$VH() {
        return constants$22.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int save_unders;
     * }
     */
    public static int save_unders$get(MemorySegment seg) {
        return (int)constants$22.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int save_unders;
     * }
     */
    public static void save_unders$set(MemorySegment seg, int x) {
        constants$22.const$4.set(seg, x);
    }
    public static int save_unders$get(MemorySegment seg, long index) {
        return (int)constants$22.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void save_unders$set(MemorySegment seg, long index, int x) {
        constants$22.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle root_input_mask$VH() {
        return constants$22.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long root_input_mask;
     * }
     */
    public static long root_input_mask$get(MemorySegment seg) {
        return (long)constants$22.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long root_input_mask;
     * }
     */
    public static void root_input_mask$set(MemorySegment seg, long x) {
        constants$22.const$5.set(seg, x);
    }
    public static long root_input_mask$get(MemorySegment seg, long index) {
        return (long)constants$22.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void root_input_mask$set(MemorySegment seg, long index, long x) {
        constants$22.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


