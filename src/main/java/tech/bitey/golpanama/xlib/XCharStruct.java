// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     short lbearing;
 *     short rbearing;
 *     short width;
 *     short ascent;
 *     short descent;
 *     unsigned short attributes;
 * };
 * }
 */
public class XCharStruct {

    public static MemoryLayout $LAYOUT() {
        return constants$103.const$4;
    }
    public static VarHandle lbearing$VH() {
        return constants$103.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short lbearing;
     * }
     */
    public static short lbearing$get(MemorySegment seg) {
        return (short)constants$103.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short lbearing;
     * }
     */
    public static void lbearing$set(MemorySegment seg, short x) {
        constants$103.const$5.set(seg, x);
    }
    public static short lbearing$get(MemorySegment seg, long index) {
        return (short)constants$103.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lbearing$set(MemorySegment seg, long index, short x) {
        constants$103.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rbearing$VH() {
        return constants$104.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short rbearing;
     * }
     */
    public static short rbearing$get(MemorySegment seg) {
        return (short)constants$104.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short rbearing;
     * }
     */
    public static void rbearing$set(MemorySegment seg, short x) {
        constants$104.const$0.set(seg, x);
    }
    public static short rbearing$get(MemorySegment seg, long index) {
        return (short)constants$104.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rbearing$set(MemorySegment seg, long index, short x) {
        constants$104.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$104.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short width;
     * }
     */
    public static short width$get(MemorySegment seg) {
        return (short)constants$104.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short width;
     * }
     */
    public static void width$set(MemorySegment seg, short x) {
        constants$104.const$1.set(seg, x);
    }
    public static short width$get(MemorySegment seg, long index) {
        return (short)constants$104.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, short x) {
        constants$104.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ascent$VH() {
        return constants$104.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short ascent;
     * }
     */
    public static short ascent$get(MemorySegment seg) {
        return (short)constants$104.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short ascent;
     * }
     */
    public static void ascent$set(MemorySegment seg, short x) {
        constants$104.const$2.set(seg, x);
    }
    public static short ascent$get(MemorySegment seg, long index) {
        return (short)constants$104.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ascent$set(MemorySegment seg, long index, short x) {
        constants$104.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descent$VH() {
        return constants$104.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short descent;
     * }
     */
    public static short descent$get(MemorySegment seg) {
        return (short)constants$104.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short descent;
     * }
     */
    public static void descent$set(MemorySegment seg, short x) {
        constants$104.const$3.set(seg, x);
    }
    public static short descent$get(MemorySegment seg, long index) {
        return (short)constants$104.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void descent$set(MemorySegment seg, long index, short x) {
        constants$104.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle attributes$VH() {
        return constants$104.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short attributes;
     * }
     */
    public static short attributes$get(MemorySegment seg) {
        return (short)constants$104.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short attributes;
     * }
     */
    public static void attributes$set(MemorySegment seg, short x) {
        constants$104.const$4.set(seg, x);
    }
    public static short attributes$get(MemorySegment seg, long index) {
        return (short)constants$104.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void attributes$set(MemorySegment seg, long index, short x) {
        constants$104.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


