// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _XEvent {
 *     int type;
 *     XAnyEvent xany;
 *     XKeyEvent xkey;
 *     XButtonEvent xbutton;
 *     XMotionEvent xmotion;
 *     XCrossingEvent xcrossing;
 *     XFocusChangeEvent xfocus;
 *     XExposeEvent xexpose;
 *     XGraphicsExposeEvent xgraphicsexpose;
 *     XNoExposeEvent xnoexpose;
 *     XVisibilityEvent xvisibility;
 *     XCreateWindowEvent xcreatewindow;
 *     XDestroyWindowEvent xdestroywindow;
 *     XUnmapEvent xunmap;
 *     XMapEvent xmap;
 *     XMapRequestEvent xmaprequest;
 *     XReparentEvent xreparent;
 *     XConfigureEvent xconfigure;
 *     XGravityEvent xgravity;
 *     XResizeRequestEvent xresizerequest;
 *     XConfigureRequestEvent xconfigurerequest;
 *     XCirculateEvent xcirculate;
 *     XCirculateRequestEvent xcirculaterequest;
 *     XPropertyEvent xproperty;
 *     XSelectionClearEvent xselectionclear;
 *     XSelectionRequestEvent xselectionrequest;
 *     XSelectionEvent xselection;
 *     XColormapEvent xcolormap;
 *     XClientMessageEvent xclient;
 *     XMappingEvent xmapping;
 *     XErrorEvent xerror;
 *     XKeymapEvent xkeymap;
 *     XGenericEvent xgeneric;
 *     XGenericEventCookie xcookie;
 *     long pad[24];
 * };
 * }
 */
public class _XEvent {

    public static MemoryLayout $LAYOUT() {
        return constants$103.const$2;
    }
    public static VarHandle type$VH() {
        return constants$103.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$103.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$103.const$3.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$103.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$103.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment xany$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment xkey$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment xbutton$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment xmotion$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment xcrossing$slice(MemorySegment seg) {
        return seg.asSlice(0, 104);
    }
    public static MemorySegment xfocus$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment xexpose$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment xgraphicsexpose$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static MemorySegment xnoexpose$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment xvisibility$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment xcreatewindow$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static MemorySegment xdestroywindow$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment xunmap$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xmap$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xmaprequest$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment xreparent$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static MemorySegment xconfigure$slice(MemorySegment seg) {
        return seg.asSlice(0, 88);
    }
    public static MemorySegment xgravity$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xresizerequest$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment xconfigurerequest$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment xcirculate$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xcirculaterequest$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xproperty$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment xselectionclear$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xselectionrequest$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static MemorySegment xselection$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static MemorySegment xcolormap$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xclient$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment xmapping$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment xerror$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment xkeymap$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static MemorySegment xgeneric$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment xcookie$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(0, 192);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


