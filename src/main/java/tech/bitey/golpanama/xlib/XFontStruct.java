// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     XExtData* ext_data;
 *     Font fid;
 *     unsigned int direction;
 *     unsigned int min_char_or_byte2;
 *     unsigned int max_char_or_byte2;
 *     unsigned int min_byte1;
 *     unsigned int max_byte1;
 *     int all_chars_exist;
 *     unsigned int default_char;
 *     int n_properties;
 *     XFontProp* properties;
 *     XCharStruct min_bounds;
 *     XCharStruct max_bounds;
 *     XCharStruct* per_char;
 *     int ascent;
 *     int descent;
 * };
 * }
 */
public class XFontStruct {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("ext_data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("fid"),
        Constants$root.C_INT$LAYOUT.withName("direction"),
        Constants$root.C_INT$LAYOUT.withName("min_char_or_byte2"),
        Constants$root.C_INT$LAYOUT.withName("max_char_or_byte2"),
        Constants$root.C_INT$LAYOUT.withName("min_byte1"),
        Constants$root.C_INT$LAYOUT.withName("max_byte1"),
        Constants$root.C_INT$LAYOUT.withName("all_chars_exist"),
        Constants$root.C_INT$LAYOUT.withName("default_char"),
        Constants$root.C_INT$LAYOUT.withName("n_properties"),
        Constants$root.C_POINTER$LAYOUT.withName("properties"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("lbearing"),
            Constants$root.C_SHORT$LAYOUT.withName("rbearing"),
            Constants$root.C_SHORT$LAYOUT.withName("width"),
            Constants$root.C_SHORT$LAYOUT.withName("ascent"),
            Constants$root.C_SHORT$LAYOUT.withName("descent"),
            Constants$root.C_SHORT$LAYOUT.withName("attributes")
        ).withName("min_bounds"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("lbearing"),
            Constants$root.C_SHORT$LAYOUT.withName("rbearing"),
            Constants$root.C_SHORT$LAYOUT.withName("width"),
            Constants$root.C_SHORT$LAYOUT.withName("ascent"),
            Constants$root.C_SHORT$LAYOUT.withName("descent"),
            Constants$root.C_SHORT$LAYOUT.withName("attributes")
        ).withName("max_bounds"),
        Constants$root.C_POINTER$LAYOUT.withName("per_char"),
        Constants$root.C_INT$LAYOUT.withName("ascent"),
        Constants$root.C_INT$LAYOUT.withName("descent")
    );
    public static MemoryLayout $LAYOUT() {
        return XFontStruct.$struct$LAYOUT;
    }
    static final VarHandle ext_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ext_data"));
    public static VarHandle ext_data$VH() {
        return XFontStruct.ext_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XExtData* ext_data;
     * }
     */
    public static MemorySegment ext_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XFontStruct.ext_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XExtData* ext_data;
     * }
     */
    public static void ext_data$set(MemorySegment seg, MemorySegment x) {
        XFontStruct.ext_data$VH.set(seg, x);
    }
    public static MemorySegment ext_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XFontStruct.ext_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ext_data$set(MemorySegment seg, long index, MemorySegment x) {
        XFontStruct.ext_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fid"));
    public static VarHandle fid$VH() {
        return XFontStruct.fid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Font fid;
     * }
     */
    public static long fid$get(MemorySegment seg) {
        return (long)XFontStruct.fid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Font fid;
     * }
     */
    public static void fid$set(MemorySegment seg, long x) {
        XFontStruct.fid$VH.set(seg, x);
    }
    public static long fid$get(MemorySegment seg, long index) {
        return (long)XFontStruct.fid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fid$set(MemorySegment seg, long index, long x) {
        XFontStruct.fid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle direction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("direction"));
    public static VarHandle direction$VH() {
        return XFontStruct.direction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int direction;
     * }
     */
    public static int direction$get(MemorySegment seg) {
        return (int)XFontStruct.direction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int direction;
     * }
     */
    public static void direction$set(MemorySegment seg, int x) {
        XFontStruct.direction$VH.set(seg, x);
    }
    public static int direction$get(MemorySegment seg, long index) {
        return (int)XFontStruct.direction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void direction$set(MemorySegment seg, long index, int x) {
        XFontStruct.direction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_char_or_byte2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_char_or_byte2"));
    public static VarHandle min_char_or_byte2$VH() {
        return XFontStruct.min_char_or_byte2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int min_char_or_byte2;
     * }
     */
    public static int min_char_or_byte2$get(MemorySegment seg) {
        return (int)XFontStruct.min_char_or_byte2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int min_char_or_byte2;
     * }
     */
    public static void min_char_or_byte2$set(MemorySegment seg, int x) {
        XFontStruct.min_char_or_byte2$VH.set(seg, x);
    }
    public static int min_char_or_byte2$get(MemorySegment seg, long index) {
        return (int)XFontStruct.min_char_or_byte2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_char_or_byte2$set(MemorySegment seg, long index, int x) {
        XFontStruct.min_char_or_byte2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_char_or_byte2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_char_or_byte2"));
    public static VarHandle max_char_or_byte2$VH() {
        return XFontStruct.max_char_or_byte2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_char_or_byte2;
     * }
     */
    public static int max_char_or_byte2$get(MemorySegment seg) {
        return (int)XFontStruct.max_char_or_byte2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_char_or_byte2;
     * }
     */
    public static void max_char_or_byte2$set(MemorySegment seg, int x) {
        XFontStruct.max_char_or_byte2$VH.set(seg, x);
    }
    public static int max_char_or_byte2$get(MemorySegment seg, long index) {
        return (int)XFontStruct.max_char_or_byte2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_char_or_byte2$set(MemorySegment seg, long index, int x) {
        XFontStruct.max_char_or_byte2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_byte1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_byte1"));
    public static VarHandle min_byte1$VH() {
        return XFontStruct.min_byte1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int min_byte1;
     * }
     */
    public static int min_byte1$get(MemorySegment seg) {
        return (int)XFontStruct.min_byte1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int min_byte1;
     * }
     */
    public static void min_byte1$set(MemorySegment seg, int x) {
        XFontStruct.min_byte1$VH.set(seg, x);
    }
    public static int min_byte1$get(MemorySegment seg, long index) {
        return (int)XFontStruct.min_byte1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_byte1$set(MemorySegment seg, long index, int x) {
        XFontStruct.min_byte1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_byte1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_byte1"));
    public static VarHandle max_byte1$VH() {
        return XFontStruct.max_byte1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int max_byte1;
     * }
     */
    public static int max_byte1$get(MemorySegment seg) {
        return (int)XFontStruct.max_byte1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int max_byte1;
     * }
     */
    public static void max_byte1$set(MemorySegment seg, int x) {
        XFontStruct.max_byte1$VH.set(seg, x);
    }
    public static int max_byte1$get(MemorySegment seg, long index) {
        return (int)XFontStruct.max_byte1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_byte1$set(MemorySegment seg, long index, int x) {
        XFontStruct.max_byte1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle all_chars_exist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("all_chars_exist"));
    public static VarHandle all_chars_exist$VH() {
        return XFontStruct.all_chars_exist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int all_chars_exist;
     * }
     */
    public static int all_chars_exist$get(MemorySegment seg) {
        return (int)XFontStruct.all_chars_exist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int all_chars_exist;
     * }
     */
    public static void all_chars_exist$set(MemorySegment seg, int x) {
        XFontStruct.all_chars_exist$VH.set(seg, x);
    }
    public static int all_chars_exist$get(MemorySegment seg, long index) {
        return (int)XFontStruct.all_chars_exist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void all_chars_exist$set(MemorySegment seg, long index, int x) {
        XFontStruct.all_chars_exist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle default_char$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("default_char"));
    public static VarHandle default_char$VH() {
        return XFontStruct.default_char$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int default_char;
     * }
     */
    public static int default_char$get(MemorySegment seg) {
        return (int)XFontStruct.default_char$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int default_char;
     * }
     */
    public static void default_char$set(MemorySegment seg, int x) {
        XFontStruct.default_char$VH.set(seg, x);
    }
    public static int default_char$get(MemorySegment seg, long index) {
        return (int)XFontStruct.default_char$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void default_char$set(MemorySegment seg, long index, int x) {
        XFontStruct.default_char$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_properties"));
    public static VarHandle n_properties$VH() {
        return XFontStruct.n_properties$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int n_properties;
     * }
     */
    public static int n_properties$get(MemorySegment seg) {
        return (int)XFontStruct.n_properties$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int n_properties;
     * }
     */
    public static void n_properties$set(MemorySegment seg, int x) {
        XFontStruct.n_properties$VH.set(seg, x);
    }
    public static int n_properties$get(MemorySegment seg, long index) {
        return (int)XFontStruct.n_properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_properties$set(MemorySegment seg, long index, int x) {
        XFontStruct.n_properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("properties"));
    public static VarHandle properties$VH() {
        return XFontStruct.properties$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XFontProp* properties;
     * }
     */
    public static MemorySegment properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XFontStruct.properties$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XFontProp* properties;
     * }
     */
    public static void properties$set(MemorySegment seg, MemorySegment x) {
        XFontStruct.properties$VH.set(seg, x);
    }
    public static MemorySegment properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XFontStruct.properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void properties$set(MemorySegment seg, long index, MemorySegment x) {
        XFontStruct.properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment min_bounds$slice(MemorySegment seg) {
        return seg.asSlice(56, 12);
    }
    public static MemorySegment max_bounds$slice(MemorySegment seg) {
        return seg.asSlice(68, 12);
    }
    static final VarHandle per_char$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("per_char"));
    public static VarHandle per_char$VH() {
        return XFontStruct.per_char$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XCharStruct* per_char;
     * }
     */
    public static MemorySegment per_char$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XFontStruct.per_char$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XCharStruct* per_char;
     * }
     */
    public static void per_char$set(MemorySegment seg, MemorySegment x) {
        XFontStruct.per_char$VH.set(seg, x);
    }
    public static MemorySegment per_char$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XFontStruct.per_char$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void per_char$set(MemorySegment seg, long index, MemorySegment x) {
        XFontStruct.per_char$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ascent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ascent"));
    public static VarHandle ascent$VH() {
        return XFontStruct.ascent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ascent;
     * }
     */
    public static int ascent$get(MemorySegment seg) {
        return (int)XFontStruct.ascent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ascent;
     * }
     */
    public static void ascent$set(MemorySegment seg, int x) {
        XFontStruct.ascent$VH.set(seg, x);
    }
    public static int ascent$get(MemorySegment seg, long index) {
        return (int)XFontStruct.ascent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ascent$set(MemorySegment seg, long index, int x) {
        XFontStruct.ascent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle descent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("descent"));
    public static VarHandle descent$VH() {
        return XFontStruct.descent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int descent;
     * }
     */
    public static int descent$get(MemorySegment seg) {
        return (int)XFontStruct.descent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int descent;
     * }
     */
    public static void descent$set(MemorySegment seg, int x) {
        XFontStruct.descent$VH.set(seg, x);
    }
    public static int descent$get(MemorySegment seg, long index) {
        return (int)XFontStruct.descent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void descent$set(MemorySegment seg, long index, int x) {
        XFontStruct.descent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


