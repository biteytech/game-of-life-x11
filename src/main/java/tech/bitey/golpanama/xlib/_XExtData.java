// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _XExtData {
 *     int number;
 *     struct _XExtData* next;
 *     int (*free_private)(struct _XExtData*);
 *     XPointer private_data;
 * };
 * }
 */
public class _XExtData {

    public static MemoryLayout $LAYOUT() {
        return constants$10.const$3;
    }
    public static VarHandle number$VH() {
        return constants$10.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int number;
     * }
     */
    public static int number$get(MemorySegment seg) {
        return (int)constants$10.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int number;
     * }
     */
    public static void number$set(MemorySegment seg, int x) {
        constants$10.const$4.set(seg, x);
    }
    public static int number$get(MemorySegment seg, long index) {
        return (int)constants$10.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void number$set(MemorySegment seg, long index, int x) {
        constants$10.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle next$VH() {
        return constants$10.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _XExtData* next;
     * }
     */
    public static MemorySegment next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _XExtData* next;
     * }
     */
    public static void next$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$5.set(seg, x);
    }
    public static MemorySegment next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*free_private)(struct _XExtData*);
     * }
     */
    public interface free_private {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(free_private fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$11.const$1, fi, constants$11.const$0, scope);
        }
        static free_private ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$11.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle free_private$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*free_private)(struct _XExtData*);
     * }
     */
    public static MemorySegment free_private$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*free_private)(struct _XExtData*);
     * }
     */
    public static void free_private$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$3.set(seg, x);
    }
    public static MemorySegment free_private$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void free_private$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static free_private free_private(MemorySegment segment, Arena scope) {
        return free_private.ofAddress(free_private$get(segment), scope);
    }
    public static VarHandle private_data$VH() {
        return constants$11.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XPointer private_data;
     * }
     */
    public static MemorySegment private_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XPointer private_data;
     * }
     */
    public static void private_data$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$4.set(seg, x);
    }
    public static MemorySegment private_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void private_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


