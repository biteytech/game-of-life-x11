// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _XExtData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("number"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("next"),
        Constants$root.C_POINTER$LAYOUT.withName("free_private"),
        Constants$root.C_POINTER$LAYOUT.withName("private_data")
    ).withName("_XExtData");
    public static MemoryLayout $LAYOUT() {
        return _XExtData.$struct$LAYOUT;
    }
    static final VarHandle number$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("number"));
    public static VarHandle number$VH() {
        return _XExtData.number$VH;
    }
    public static int number$get(MemorySegment seg) {
        return (int)_XExtData.number$VH.get(seg);
    }
    public static void number$set( MemorySegment seg, int x) {
        _XExtData.number$VH.set(seg, x);
    }
    public static int number$get(MemorySegment seg, long index) {
        return (int)_XExtData.number$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void number$set(MemorySegment seg, long index, int x) {
        _XExtData.number$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return _XExtData.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_XExtData.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        _XExtData.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_XExtData.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        _XExtData.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor free_private$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle free_private$MH = RuntimeHelper.downcallHandle(
        _XExtData.free_private$FUNC
    );
    public interface free_private {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(free_private fi, MemorySession session) {
            return RuntimeHelper.upcallStub(free_private.class, fi, _XExtData.free_private$FUNC, session);
        }
        static free_private ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_XExtData.free_private$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle free_private$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free_private"));
    public static VarHandle free_private$VH() {
        return _XExtData.free_private$VH;
    }
    public static MemoryAddress free_private$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_XExtData.free_private$VH.get(seg);
    }
    public static void free_private$set( MemorySegment seg, MemoryAddress x) {
        _XExtData.free_private$VH.set(seg, x);
    }
    public static MemoryAddress free_private$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_XExtData.free_private$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free_private$set(MemorySegment seg, long index, MemoryAddress x) {
        _XExtData.free_private$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static free_private free_private (MemorySegment segment, MemorySession session) {
        return free_private.ofAddress(free_private$get(segment), session);
    }
    static final VarHandle private_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_data"));
    public static VarHandle private_data$VH() {
        return _XExtData.private_data$VH;
    }
    public static MemoryAddress private_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_XExtData.private_data$VH.get(seg);
    }
    public static void private_data$set( MemorySegment seg, MemoryAddress x) {
        _XExtData.private_data$VH.set(seg, x);
    }
    public static MemoryAddress private_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_XExtData.private_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _XExtData.private_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


