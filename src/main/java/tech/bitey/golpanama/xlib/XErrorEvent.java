// Generated by jextract

package tech.bitey.golpanama.xlib;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     int type;
 *     Display* display;
 *     XID resourceid;
 *     unsigned long serial;
 *     unsigned char error_code;
 *     unsigned char request_code;
 *     unsigned char minor_code;
 * };
 * }
 */
public class XErrorEvent {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("display"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("resourceid"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("serial"),
        Constants$root.C_CHAR$LAYOUT.withName("error_code"),
        Constants$root.C_CHAR$LAYOUT.withName("request_code"),
        Constants$root.C_CHAR$LAYOUT.withName("minor_code"),
        MemoryLayout.paddingLayout(40)
    );
    public static MemoryLayout $LAYOUT() {
        return XErrorEvent.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return XErrorEvent.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)XErrorEvent.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        XErrorEvent.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)XErrorEvent.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        XErrorEvent.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle display$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("display"));
    public static VarHandle display$VH() {
        return XErrorEvent.display$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * Display* display;
     * }
     */
    public static MemorySegment display$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)XErrorEvent.display$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * Display* display;
     * }
     */
    public static void display$set(MemorySegment seg, MemorySegment x) {
        XErrorEvent.display$VH.set(seg, x);
    }
    public static MemorySegment display$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)XErrorEvent.display$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void display$set(MemorySegment seg, long index, MemorySegment x) {
        XErrorEvent.display$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resourceid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resourceid"));
    public static VarHandle resourceid$VH() {
        return XErrorEvent.resourceid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XID resourceid;
     * }
     */
    public static long resourceid$get(MemorySegment seg) {
        return (long)XErrorEvent.resourceid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XID resourceid;
     * }
     */
    public static void resourceid$set(MemorySegment seg, long x) {
        XErrorEvent.resourceid$VH.set(seg, x);
    }
    public static long resourceid$get(MemorySegment seg, long index) {
        return (long)XErrorEvent.resourceid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resourceid$set(MemorySegment seg, long index, long x) {
        XErrorEvent.resourceid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle serial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("serial"));
    public static VarHandle serial$VH() {
        return XErrorEvent.serial$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long serial;
     * }
     */
    public static long serial$get(MemorySegment seg) {
        return (long)XErrorEvent.serial$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long serial;
     * }
     */
    public static void serial$set(MemorySegment seg, long x) {
        XErrorEvent.serial$VH.set(seg, x);
    }
    public static long serial$get(MemorySegment seg, long index) {
        return (long)XErrorEvent.serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serial$set(MemorySegment seg, long index, long x) {
        XErrorEvent.serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle error_code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("error_code"));
    public static VarHandle error_code$VH() {
        return XErrorEvent.error_code$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char error_code;
     * }
     */
    public static byte error_code$get(MemorySegment seg) {
        return (byte)XErrorEvent.error_code$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char error_code;
     * }
     */
    public static void error_code$set(MemorySegment seg, byte x) {
        XErrorEvent.error_code$VH.set(seg, x);
    }
    public static byte error_code$get(MemorySegment seg, long index) {
        return (byte)XErrorEvent.error_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error_code$set(MemorySegment seg, long index, byte x) {
        XErrorEvent.error_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle request_code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_code"));
    public static VarHandle request_code$VH() {
        return XErrorEvent.request_code$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char request_code;
     * }
     */
    public static byte request_code$get(MemorySegment seg) {
        return (byte)XErrorEvent.request_code$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char request_code;
     * }
     */
    public static void request_code$set(MemorySegment seg, byte x) {
        XErrorEvent.request_code$VH.set(seg, x);
    }
    public static byte request_code$get(MemorySegment seg, long index) {
        return (byte)XErrorEvent.request_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_code$set(MemorySegment seg, long index, byte x) {
        XErrorEvent.request_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle minor_code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("minor_code"));
    public static VarHandle minor_code$VH() {
        return XErrorEvent.minor_code$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char minor_code;
     * }
     */
    public static byte minor_code$get(MemorySegment seg) {
        return (byte)XErrorEvent.minor_code$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char minor_code;
     * }
     */
    public static void minor_code$set(MemorySegment seg, byte x) {
        XErrorEvent.minor_code$VH.set(seg, x);
    }
    public static byte minor_code$get(MemorySegment seg, long index) {
        return (byte)XErrorEvent.minor_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void minor_code$set(MemorySegment seg, long index, byte x) {
        XErrorEvent.minor_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


